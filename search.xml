<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>证券分析（第六版）</title>
      <link href="2021/04/15/fund/%E8%AF%81%E5%88%B8%E5%88%86%E6%9E%90%EF%BC%88%E7%AC%AC%E5%85%AD%E7%89%88%EF%BC%89/"/>
      <url>2021/04/15/fund/%E8%AF%81%E5%88%B8%E5%88%86%E6%9E%90%EF%BC%88%E7%AC%AC%E5%85%AD%E7%89%88%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在便宜的投资产品稀缺的时候，价值投资者必须有耐心，放弃标准，退而求其次往往会导致灾难。虽然我们不知道好机会处于何时何地，但我们知道机会终将会出现。</p><p>价值投资者进行的是自下而上的分析，善于根据基本面逐一对证券进行评估。他们不需要等整个市场的价格都便宜下来，而是只需要20或25个不相关 联的证券一这一数量便足以分散风险。即便是在市场价位走高的形势下，价值投<br>资者也务必要做出证券分析和业务评估，从而获得知识经验以备将来之需。因此价 值投资者们要做的，并不是小心地估算着时间，猜测近期内的盈亏，而是应采取自 下而上的方式，先筛选出价格合适的金融市场，继而出资买入，不管市场或经济的近期水平以及走向如何。只有在找不到合适的交易的情况下，他们才应持有现金。</p>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>金融市场与金融机构基础笔记</title>
      <link href="2021/03/01/fund/%E9%87%91%E8%9E%8D%E5%B8%82%E5%9C%BA%E4%B8%8E%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84%E5%9F%BA%E7%A1%80/"/>
      <url>2021/03/01/fund/%E9%87%91%E8%9E%8D%E5%B8%82%E5%9C%BA%E4%B8%8E%E9%87%91%E8%9E%8D%E6%9C%BA%E6%9E%84%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="引论"><a href="#引论" class="headerlink" title="引论"></a>引论</h2><h2 id="金融机构、金融中介和资产管理公司"><a href="#金融机构、金融中介和资产管理公司" class="headerlink" title="金融机构、金融中介和资产管理公司"></a>金融机构、金融中介和资产管理公司</h2><h2 id="存款机构、美联储与货币政策"><a href="#存款机构、美联储与货币政策" class="headerlink" title="存款机构、美联储与货币政策"></a>存款机构、美联储与货币政策</h2><h2 id="美联储与货币创造"><a href="#美联储与货币创造" class="headerlink" title="美联储与货币创造"></a>美联储与货币创造</h2><h2 id="货币政策"><a href="#货币政策" class="headerlink" title="货币政策"></a>货币政策</h2>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell笔记一</title>
      <link href="2020/12/23/shell/shell-1/"/>
      <url>2020/12/23/shell/shell-1/</url>
      
        <content type="html"><![CDATA[<h2 id="Shell-编程基础"><a href="#Shell-编程基础" class="headerlink" title="Shell 编程基础"></a>Shell 编程基础</h2><h3 id="获取脚本的参数"><a href="#获取脚本的参数" class="headerlink" title="获取脚本的参数"></a>获取脚本的参数</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># $# 代表传入函数的参数个数</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$#</span> 个参数"</span></span><br><span class="line"><span class="comment"># 位置参数 。从参数 0 开始</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$1</span> <span class="variable">$2</span>"</span></span><br><span class="line"><span class="comment"># $@ 代表所有参数的内容</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"<span class="variable">$@</span>"</span></span><br></pre></td></tr></table></figure><p>将脚本加上可执行权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -x ./2.sh</span><br></pre></td></tr></table></figure><p>以 &gt; 改变标准输出：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以 &lt; 改变标准输入（这条命令将会复制/tmp/a.txt 文件到/tmp/b.txt）</span></span><br><span class="line">cat &lt; /tmp/a.txt &gt; /tmp/b.txt</span><br></pre></td></tr></table></figure><p>以 &gt;&gt; 追加文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat 2.sh &gt;&gt; 3.sh</span><br></pre></td></tr></table></figure><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><h4 id="理解文件描述符、系统文件表和内存索引节点表"><a href="#理解文件描述符、系统文件表和内存索引节点表" class="headerlink" title="理解文件描述符、系统文件表和内存索引节点表"></a>理解文件描述符、系统文件表和内存索引节点表</h4><ol><li><p>文件描述符表<br>用户区的一部分，除非通过使用文件描述符的函数，否则程序无法对其进行访问。对进程中每个打开的文件，文件描述符表都包含一个条目。</p></li><li><p>系统文件表<br>为系统中所有的进程共享。对每个活动的 open, 它都包含一个条目。每个系统文件表的条目都包含文件偏移量、访问模式（读、写、或读-写）以及指向它的文件 描述符表的条目计数。每个进程的文件表在系统文件表中的区域都不重合。理由是，这种安排使每个进程都有 它自己的对该文件的当前偏移量。</p></li><li><p>内存索引节点表<br>对系统中的每个活动的文件（被某个进程打开了），内存中索引节点表都包含一个条目。几个系统文件表条目可能对应于同一个内存索引节点表（不同进程打开同一个文件）。</p></li></ol><p>习惯上，标准输入（Standard Input）的文件描述符是 0，标准输出（Standard Output）是 1， 标准错误（Standard Error）是 2。这也是当我们重定向标准错误时，使用（2&gt;）的原因。</p><h3 id="特殊文件的妙用"><a href="#特殊文件的妙用" class="headerlink" title="特殊文件的妙用"></a>特殊文件的妙用</h3><h4 id="dev-null"><a href="#dev-null" class="headerlink" title="/dev/null"></a>/dev/null</h4><p>我们可以把/dev/null 想象为一个“黑洞”。它类似于一个只写文件。所有写入它的内容都不可读取。但是，对于命令行和脚本来说，/dev/null 却非常有用。如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取/tmp/b.txt 文件，但是将读取的内容输出到/dev/null</span></span><br><span class="line">cat /tmp/b.txt &gt;/dev/null</span><br><span class="line"><span class="comment"># 检索/etc 下所有包含 alloy 字符串的文件行，但是如果有错误信息，则输出到/dev/null</span></span><br><span class="line">grep <span class="string">"alloy"</span> /etc/* 2&gt; /dev/null</span><br><span class="line"><span class="comment"># 下面的命令不会产生任何输出</span></span><br><span class="line"><span class="comment"># 如果 b.txt 文件存在，则读取的内容输出到/dev/null</span></span><br><span class="line"><span class="comment"># 如果 b.txt 文件不存在，则错误的信息输出到/dev/null</span></span><br><span class="line">cat /tmp/b.txt &gt;/dev/null 2&gt;/dev/null</span><br><span class="line"><span class="comment"># 这个命令和上一条命令是等效的</span></span><br><span class="line">cat /tmp/b.txt &amp;&gt;/dev/null</span><br><span class="line"><span class="comment"># 清空 messages 和 wtmp 文件中的内容，但是让文件依然存在并且不改变权限</span></span><br><span class="line">cat /dev/null &gt; /var/<span class="built_in">log</span>/messages</span><br><span class="line">cat /dev/null &gt; /var/<span class="built_in">log</span>/wtmp</span><br></pre></td></tr></table></figure><p>如果是重定向标准输出，直接使用&gt;就可以了，或者也可以用(1&gt;)表示，而如果是重新向标准错误，则用 2&gt;。如果是标准输入呢?那就要用(0&lt;)表示。而(&amp;&gt;)则代表标准输出和标准错误。</p><h4 id="dev-zero"><a href="#dev-zero" class="headerlink" title="/dev/zero"></a>/dev/zero</h4><p>类似于/dev/null，/dev/zero 也是一个伪文件，但事实上它会产生一个 null 流(二进制的 0 流，而不是 ASCII 类型)。如果你想把其他命令的输出写入/dev/zero 文件的话，那么写入的内容会消失，而且如果你想从/dev/zero 文件中读取一连串 null 的话，也非常的困难，/dev/zero 文件的主要用途就是用来创建一个指定长度，并且初始化为空的文件，这种文件一 般都用作临时交换文件。</p><h4 id="dev-tty"><a href="#dev-tty" class="headerlink" title="/dev/tty"></a>/dev/tty</h4><p>/dev/tty 是一个很实用的文件。当程序打开这个文件时，UNIX/Linux 会自动将它重定向到当<br>前所处的终端。输出到此的信息只会显示在当前工作的终端显示器上。在某些时候例如，设定了 脚本输出到/dev/null 时，而你又想在当前终端上显示一些很重要的信息，你就可以调用这个设备， 写入重要信息。这样做可以强制信息显示到终端。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>“Enter new passwd:”               <span class="comment"># 提示输入 </span></span><br><span class="line">stty–<span class="built_in">echo</span>                               <span class="comment"># 关闭自动打印输入字符的功能 </span></span><br><span class="line"><span class="built_in">read</span> pass &lt; /dev/tty                    <span class="comment"># 读取密码</span></span><br><span class="line"><span class="built_in">printf</span>“Enter again”</span><br><span class="line"><span class="built_in">read</span> pass2&lt; /dev/tty                    <span class="comment"># 再读一次，以便确认 </span></span><br><span class="line">stty <span class="built_in">echo</span>                               <span class="comment"># 记得重新打开自动打印输入字符功能</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="一切皆文件"><a href="#一切皆文件" class="headerlink" title="一切皆文件\"></a>一切皆文件\</h3><p>Linux 文件类型常见的有:普通文件、目录、字符设备文件、块设备文件、符号链接文件等。</p><ol><li><p>普通文件<br>我们用 ls-lh 来查看某个文件的属性，可以看到有类似-rw-r–r– ，值得注意的，它的第一个符 号是-，这样的文件在 Linux 中就是普通文件。这些文件一般是用一些相关的应用程序创建，例如 图像工具、文档工具、归档工具或 cp 工具等。这类文件的删除方式是用 rm 命令。</p></li><li><p>目录<br>当我们在某个目录下执行命令，看到有类似 drwxr-xr-x 命令时，这样的文件就是目录，目录 在 Linux 是一个比较特殊的文件。注意，它的第一个字符是 d。创建目录可以用 mkdir 命令或 cp 命令。cp 可以把一个目录复制为另一个目录。删除目录用 rm 或 rmdir 命令。</p></li><li><p>字符设备或块设备文件<br>如果进入/dev 目录，列一下文件，会看到类似如下的格式:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alloy@ubuntu:~/LinuxShell/ch2$ ls-la /dev/tty</span><br><span class="line">crw-rw-rw-1 root tty 5, 0 5 月 14 16:47 /dev/tty</span><br><span class="line">crw-rw-rw-1 root tty 5, 0 04-19 08:29 /dev/tty</span><br><span class="line">alloy@ubuntu:~/LinuxShell/ch2$ ls-la /dev/sda1</span><br><span class="line">brw-rw----1 root disk 8, 1 5 月 14 11:39 /dev/sda1</span><br></pre></td></tr></table></figure></li></ol><p>看到 /dev/tty 的属性是 crw-rw-rw-。注意，前面第一个字符是 c，表示字符设备文件，如猫等串口设备。<br>看到/dev/sda1 的属性是 brw-r—–。注意，前面的第一个字符是 b，表示块设备，如硬盘、光驱等设备。<br>这种文件，是用 mknode 来创建，用 rm 来删除。目前，在最新的 Linux 发行版本中，一般不用自己来创建设备文件，因为这些文件是和内核是相关联的。</p><ol start="4"><li>套接口文件<br>当我们启动 MySQL 服务器时，会产生一个 mysql.sock 的文件。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alloy@ubuntu:~/LinuxShell/ch2$ ls-lh /var/lib/mysql/mysql.sock</span><br></pre></td></tr></table></figure></li></ol><p>注意，这个文件的属性的第一个字符是 s。我们了解一下就行了。</p><ol start="5"><li>符号链接文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alloy@ubuntu:~/LinuxShell/ch2$ ls-lh setup.log</span><br><span class="line">lrwxrwxrwx 1 root root 11 5月14 11:39 setup.log-&gt; install.log</span><br></pre></td></tr></table></figure><p>当我们查看文件属性时，会看到有类似 lrwxrwxrwx 的命令。注意，第一个字符是 l，这类文件是链接文件。是通过 ln-s 源文件产生新文件名。这和 Windows 操作系统中的快捷方式有点相似。</p><h2 id="编程的基础元素"><a href="#编程的基础元素" class="headerlink" title="编程的基础元素"></a>编程的基础元素</h2><h3 id="字符串操作符"><a href="#字符串操作符" class="headerlink" title="字符串操作符"></a>字符串操作符</h3><ol><li>替换运算符</li></ol><table><thead><tr><th align="center">变量运算符</th><th>替换</th></tr></thead><tbody><tr><td align="center">${varname:-word}</td><td>如果 varname 存在且非 null，则返回 varname 的值;否则，返回 word。用途:如果变量未定义，则返回默认值范例:如果 loginname 未定义，则${loginname:-ollir}的值为 ollir</td></tr><tr><td align="center">${varname:=word}</td><td>如果 varname 存在且非 null，则返回 varname 的值;否则将其置为 word，然后返回其值。用途:如果变量未定义，则设置变量为默认值 word。范例:如果 loginname 未定义，则${loginname:-ollir}的值为 ollir，并且 loginname 被设 置为 ollir</td></tr><tr><td align="center">${varname:?message}</td><td>如果 varname 存在且非 null，则返回 varname 的值;否则打印message，并退出当前脚 本。省如果省略 message 的话，Shell 返回 parameter null or not set。用途:用于捕捉由于变量未定义而导致的错误。范例:如果 loginname 未定义，则${loginname:”undefined!”}则显示 loginname:undefined!，然后退出</td></tr><tr><td align="center">${varname:+word}</td><td>如果 varname 存在且非 null，则返回 word;否则返回 null。用途:用于测试变量存在。范例:如果 loginname 已定义，则${loginname:+1}返回 1</td></tr></tbody></table><ol start="2"><li>模式匹配运算符</li></ol><table><thead><tr><th align="center">变量运算符</th><th>替换</th></tr></thead><tbody><tr><td align="center">${varname#pattern}</td><td>如果模式匹配变量取值的开头处，则删除匹配的最短部分，并返回剩下部分。范例:${path#/*/}为 prince/desktop/long.file.name 这个范例删除了字符串开头/的部分</td></tr><tr><td align="center">${varname##pattern}</td><td>如果模式匹配变量取值的开头处，则删除匹配的最长部分，并返回剩下部分。范例:${path#/*/}为 long.file.name这个范例提取了文件路径中的文件名</td></tr><tr><td align="center">${varname%pattern}</td><td>如果模式匹配变量取值的结尾处，则删除匹配的最短部分，并返回剩下部分。范例:${path%.*}为/home/prince/desktop/long.file 这个范例去除文件路径中最后一个点号(.)之后的部分</td></tr><tr><td align="center">${varname%%pattern}</td><td>如果模式匹配变量取值的结尾处，则删除匹配的最长部分，并返回剩下部分。范例:${path%.*}为/home/prince/desktop/long 这个范例去除范例中第一个点号(.)之后的部分</td></tr><tr><td align="center">${varname/pattern/string} ${varname//pattern/string}</td><td>将 varname 中匹配模式的最长部分替换为 string。第一种格式中，只有匹配的第一部分 被替换;第二种格式中，varname 中所有匹配的部分都被替换。如果模式以#开头，则 必须匹配varname 的开头，如果模式以%开头，则必须匹配 varname 的结尾。如果 string 为空，匹配部分被删除。如果 varname 为@或*，操作被依次应用于每个位置参数 并且扩展为结果列表。范例:${path//prince/ollir}则为:/home/ollir/desktop/long.file.name 这个范例将字符串 prince 替换成 ollir</td></tr></tbody></table><p>${varname//pattern/string} 例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># PATH 以换行符展示</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PATH//:/'\n'&#125;</span>-e   <span class="comment"># -e 选项允许 echo 将\n 解释为一个 LINEFEED</span></span><br></pre></td></tr></table></figure><h3 id="位置变量"><a href="#位置变量" class="headerlink" title="位置变量"></a>位置变量</h3><p>比较多得是 $n，$#，$0，$?。如例所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="comment"># 判断运行参数个数，如果不等于 2，显示使用“用法帮助”，其中 $0 表示就是脚本自己。</span></span><br><span class="line"><span class="comment"># NOTE 用中括号做判断时 “[“ 后和 ”]” 前的空格是必须加的</span></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span>-ne 2 ] ;</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: <span class="variable">$0</span> string file"</span>;</span><br><span class="line">    <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 用 grep 在 $2 文件中查找 $1 字符串</span></span><br><span class="line">grep <span class="variable">$1</span> <span class="variable">$2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 判断前一个命令运行后的返回值(一般成功都会返回 0, 失败都会返回非 0)</span></span><br><span class="line"><span class="keyword">if</span> [ $?-ne 0 ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> <span class="string">"Not Found \"<span class="variable">$1</span>\" in <span class="variable">$2</span>"</span>;</span><br><span class="line">   <span class="built_in">exit</span> 1;</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># 如果没有成功则显示没找到相关信息，否则显示找到了。</span></span><br><span class="line"><span class="comment"># 其中 \" 表示转义，在 "" 里面还需要显示 " 号，则需要加上转义符 \"。</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"found \"<span class="variable">$1</span>\" in <span class="variable">$2</span>"</span>;</span><br></pre></td></tr></table></figure><blockquote><p>Shell 内置了一个 shift 命令，shift 命令可以“截去”参数列表最左端的一个。执行了 shift 命 令后，$1 的值将永远丢失，而$2 的旧值会被赋值给$1，依此类推。</p></blockquote><h3 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h3><h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4><table><thead><tr><th>操作符</th><th>如果…则为真</th></tr></thead><tbody><tr><td>Str1 = str2</td><td>str1 匹配 str2</td></tr><tr><td>Str1 != str2</td><td>str1 不匹配 str2</td></tr><tr><td>Str1 &lt; str2</td><td>str1 小于 str2</td></tr><tr><td>Str1 &gt; str2</td><td>str1 大于 str2</td></tr><tr><td>-n str1</td><td>str1 为非 null(长度大于 0)</td></tr><tr><td>-z str1</td><td>str1 为 null(长度为 0)</td></tr></tbody></table><h4 id="文件属性检查"><a href="#文件属性检查" class="headerlink" title="文件属性检查"></a>文件属性检查</h4><table><thead><tr><th>操作符</th><th>如果…则为真</th></tr></thead><tbody><tr><td>-b file</td><td>file 为块设备文件</td></tr><tr><td>-d file</td><td>file 为目录</td></tr><tr><td>-e file</td><td>file 存在</td></tr><tr><td>-f file</td><td>file 为一般文件</td></tr><tr><td>-r file</td><td>file 可读</td></tr><tr><td>-w file</td><td>file 可写</td></tr><tr><td>-x file</td><td>file 可执行</td></tr><tr><td>-s file</td><td>file 非空</td></tr><tr><td>-O file</td><td>你是 file 的所有者</td></tr><tr><td>file1 -nt file2</td><td>file1 比 file2 新</td></tr><tr><td>file1 -ot file2</td><td>file1 比 file2 旧</td></tr></tbody></table><h4 id="case"><a href="#case" class="headerlink" title="case"></a>case</h4><p>语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> expression <span class="keyword">in</span></span><br><span class="line">pattern1)</span><br><span class="line">    statements;;</span><br><span class="line">pattern2)</span><br><span class="line">    statements;;</span><br><span class="line">pattern3 | pattern4)</span><br><span class="line">    statements;;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>case 语句常常被用于对 单个参数有大量判断语句的情形。一个例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 判断文件后缀，然后根据文件后缀选择不同的读取方式。</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">*.jpg)</span><br><span class="line">    gqview <span class="variable">$1</span>;;</span><br><span class="line">*.txt)</span><br><span class="line">    gvim <span class="variable">$1</span>;;</span><br><span class="line">*.avi | *.wmv)</span><br><span class="line">    mplayer <span class="variable">$1</span>;;</span><br><span class="line">*.pdf)</span><br><span class="line">    acroread <span class="variable">$1</span>;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span>: Don<span class="string">'t know how to read this file;;</span></span><br><span class="line"><span class="string">esac</span></span><br></pre></td></tr></table></figure><h4 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h4><p>语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> name [<span class="keyword">in</span> list]           <span class="comment"># 遍历list中的所有对象</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">...                          <span class="comment"># able to use $name，执行与$name相关的操作</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>一个例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历当前目录中所有 mp3 文件，mpg123 时命令行程序，播放mp3文件</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `find .-iname</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">mpg123 <span class="variable">$file</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，本例中 list 上的两个反单引号(``)。执行反单引号之间的命令，引用结果作为字符串。<br>在 for 循环中，如果 in list 被省略，则默认为 in “$@”，即命令行参数的引用列表。</p></blockquote><h4 id="while-until-循环"><a href="#while-until-循环" class="headerlink" title="while/until 循环"></a>while/until 循环</h4><p>语法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">statements...</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 至于 until 语句，语法几乎和 while 一样:</span></span><br><span class="line"><span class="comment"># until condition</span></span><br></pre></td></tr></table></figure><p>while 语句与 until 语句唯一不同的地方在于，如何判断 condition 的退出状态。在 while 语句中，当 condtion 的退出状态为真时，循环继续运行，否则退出循环。而在 until 中，当 condition 的退出状态为真时，循环退出，否则继续执行循环体。一个例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 遍历 PATH 路径</span></span><br><span class="line">path=<span class="variable">$PATH</span>:             <span class="comment"># 将$PATH 复制到一个参数 path 中，并在末尾加上一个冒号</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ -n <span class="variable">$path</span> ];     <span class="comment"># 当path不为空时</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">ls-ld <span class="variable">$&#123;path%%:*&#125;</span>       <span class="comment"># 我们使用ls-ld列出显示path中的第一个目录</span></span><br><span class="line">path=<span class="variable">$&#123;path#*:&#125;</span>         <span class="comment"># 在这里，我们截去 path 中的第一个目录和冒号</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>综合例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">author=<span class="literal">false</span></span><br><span class="line">list=<span class="literal">false</span></span><br><span class="line">file=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> [ <span class="variable">$#</span>-gt 0 ]</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    -f)</span><br><span class="line">        file=<span class="variable">$2</span>         <span class="comment"># 将 -f 参数的下一个参数(file)获取至 file 变量 #截去下一个参数</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        ;;</span><br><span class="line">    -l)</span><br><span class="line">        list=<span class="literal">true</span></span><br><span class="line">        ;;</span><br><span class="line">    -a)</span><br><span class="line">        author=<span class="literal">true</span></span><br><span class="line">        ;;</span><br><span class="line">    --)                 <span class="comment"># 传统上，以 -- 结束选项</span></span><br><span class="line">        <span class="built_in">shift</span></span><br><span class="line">        <span class="built_in">break</span></span><br><span class="line">        ;;</span><br><span class="line">    -*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$0</span>: <span class="variable">$1</span>: unrecognized option</span><br><span class="line">        ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">break</span>           <span class="comment"># 无选项参数时，在循环中跳出</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">shift</span>                   <span class="comment"># 参数偏移</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>在 Shell 中，有 getopt 命令，可以简化选项处理。使用 getopt 重写：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">author=<span class="literal">false</span></span><br><span class="line">list=<span class="literal">false</span></span><br><span class="line">file=<span class="string">""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 它的第一个参数是一个字符串，每个字符是命令的一个选项。如果参数后还需要跟其 他参数，则该字符后面接一个冒号(:)，而紧跟的参数则会放入 $OPTARG 变量中。</span></span><br><span class="line"><span class="keyword">while</span> getopt alf: opt</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$opt</span> <span class="keyword">in</span></span><br><span class="line">    f)                  <span class="comment"># 将 -f 参数的下一个参数(file)获取至 file 变量 #截去下一个参数</span></span><br><span class="line">        file=<span class="variable">$OPTARG</span></span><br><span class="line">        ;;</span><br><span class="line">    l)</span><br><span class="line">        list=<span class="literal">true</span></span><br><span class="line">        ;;</span><br><span class="line">    a)</span><br><span class="line">        author=<span class="literal">true</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">shift</span> <span class="variable">$&#123;&#123;OPTIND–1&#125;</span>&#125;     <span class="comment">#删除选项，留下参数，变量 OPTIND 包含下一个要处理的参数的索引值。Shell 会 把它初始化为 1</span></span><br></pre></td></tr></table></figure><blockquote><p>可以明显看出简化了很多。首先，在 case 中对 $opt 的测试仅仅是字母，开头的 - 被去除了；然后，循环中的 shift 也被 getopt 处理了，不需要自己控制；再次，– 的 case 也不见了，getopt 自动处理；最后，针对不合法选项的处理默认下 getopt 也会显示错误信息。</p></blockquote><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><h3 id="一般字符"><a href="#一般字符" class="headerlink" title="一般字符"></a>一般字符</h3><p>一般字符包括文字和数字字符、空白字符和 标点符号字符。一般字符匹配的就是它们自身。</p><h3 id="转义的-meta-字符"><a href="#转义的-meta-字符" class="headerlink" title="转义的 meta 字符"></a>转义的 meta 字符</h3><p>当 meta 字符无法表示自己而我们需要这些字符时，转义符号的作用就体现出来了:在字符前置一个反斜杠 ()。例如，.只表示一个点，而不是任意字符;[匹配左方括号，而\表示反斜杠本身。如果将转义字符置于一般字符前，则转义字符会被忽略。</p><h3 id="点号-字符"><a href="#点号-字符" class="headerlink" title=".(点号)字符"></a>.(点号)字符</h3><p>.(点号)字符 点号字符表示“任一字符”。例如，”.hina”正则表达式匹配 china，也匹配 China，但是它也同时匹配 dhina</p><h3 id="方括号表达式"><a href="#方括号表达式" class="headerlink" title="方括号表达式"></a>方括号表达式</h3><p>例如，[cC]hina 只匹配 china 和 China。这是最简单的方括号表达式的用法，即直接将字符列表置于方括号中。如果将^符号至于方括号的开头([^abc])，就是取反的意思。即不在方括号中出现的任意字符。例如，[^abd]hina 匹配除了 abd 三个小写字母外的任意字母，加上 hina。</p><h3 id="星号-meta-字符的应用"><a href="#星号-meta-字符的应用" class="headerlink" title="星号 meta 字符的应用"></a>星号 meta 字符的应用</h3><p>ab*c 正则表达式匹配如下字符串:ac，abc，abbc，abbbc…你一定看出来了，星号 meta 字符匹配零个或多 个星号前面的单个字符。注意，匹配零个或多个字符并不是任意字母，例如，ab*c 就不匹配 adc。</p><p>a.*c 当点号和星号一起用时是表示字母 a 和 c 中匹配任意长度的字符串，例如，ac, abc, adc, abbc, acccc 等。</p><p>a.c 它的含义是字母 a 和字母 c 之间匹配任意一个字母，但是只能是一个，不能多也不能少。例如，acc, abc, aac, a!c等。</p><h3 id="区间表达式的应用"><a href="#区间表达式的应用" class="headerlink" title="区间表达式的应用"></a>区间表达式的应用</h3><p>ab{3}c a 字母和 c 字母之间的 b 字母重现 3 次，即，ab{3}c 正则表达式匹配 abbbc。</p><p>ab{3,}c a 字母和 c 字母之间的 b 字母重现至少 3 次，即，ab{3}c 正则表达式匹配 abbbc，abbbbc， abbbbbc…</p><p>ab{3,5}c a 字母和 c 字母之间的 b 字母重现 3~5 次，即，ab{3}c 正则表达式匹配 abbbc，abbbbc， abbbbbc。</p><p>ab?c 只匹配两种：ac 和 abc。</p><p>ab+c 匹配 abc，abbc，abbbc。。。但不匹配 ac。</p><p>^abc 匹配字符串开头的 3 个字母 abc，例如，abcxxxABCabcxxxefg。</p><p>efg$ 匹配结尾处的 efg。和开头一样，$符号锚定了字符串的结尾，即 abcxxxABCabcxxxefg。</p><p>如果将字符^和$一起使用，则两者之间的正则表达式就匹配了整个或整行正则表达式。有时 我们使用^$来匹配空的字符串或者空行。</p>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>聪明的投资者笔记（格雷厄姆投资指南）</title>
      <link href="2020/12/23/fund/%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/23/fund/%E8%81%AA%E6%98%8E%E7%9A%84%E6%8A%95%E8%B5%84%E8%80%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="投资普通股的原则"><a href="#投资普通股的原则" class="headerlink" title="投资普通股的原则"></a>投资普通股的原则</h2><p>对防御型投资者的组合策略,普通股的选择是很简单的。 下面提出应遵守的四个原则：</p><ol><li>应该有适当的但不是过度的多样化，这徂许意味着有 最少10种和最多大约30种不同的证券。</li><li>所选择的每一个公司应该是大的、突冶的、谨慎投资 的。尽管这些修饰语是不确定的，但它们的一般意义是清楚 的。关于该点的讨论被放在本章的结尾。</li><li>每个公司应该具有一个长期的连续的红利支付的记 录{在道•琼斯工业平均指数中的所有证券满足了这个红利要求为了明确这点，我建议连续红利支付的要求至少从1940年开始。该点将简捷地把我们带进现在一般所指的“战 前”时期</li><li>联系到过去7年的平均收益，投资者应读表明他将愿意为一个证券所支付的价格的界限。我建议这个界限设置为平均收益的25倍，并且不多于最近12个月的20倍。这个限制几乎将所有最强的和最流行的公司从组合证券中去掉了。特别是,它实质上取消了在过去很多年中被投机型和机构投资者所喜爱的整个成长股目录。</li></ol><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><h3 id="普通股"><a href="#普通股" class="headerlink" title="普通股"></a>普通股</h3><p>普通股是享有普通权利、承担普通义务的股份，是公司股份的最基本形式。普通股的股东对公司的管理、收益享有平等权利，根据公司经营效益分红，风险较大。在公司的经营管理和盈利及财产的分配上享有普通权利的股份，代表满足所有债权偿付要求及优先股东的收益权与求偿权要求后对企业盈利和剩余财产的索取权。它构成公司资本的基础，是股票的一种基本形式，也是发行量最大，最为重要的股票。目前在上海和深圳证券交易所中交易的股票，都是普通股。</p><h3 id="优先股"><a href="#优先股" class="headerlink" title="优先股"></a>优先股</h3><p>优先股是“普通股”的对称。是股份公司发行的在分配红利和剩余财产时比普通股具有优先 权的股份。优先股也是一种没有期限的有权凭证，优先股股东一般不能在中途向公司要求退股 (少数可赎回的优先股例外)。优先股的主要特征有三：</p><p>一是优先股通常预先定明股息收益率。由于优先股股息率事先固定，所以优先股的股息一般不会根据公司经营情况而增减，而且一般 也不能参与公司的分红，但优先股可以先于普通股获得股息，对公司来说，由于股息固定，它 不影响公司的利润分配。</p><p>二是优先股的权利范围小。优先股股东一般没有选举权和被选举权， 对股份公司的重大经营无投票权，但在某些情况下可以享有投票权。</p><p>如果公司股东大会需要讨论与优先股有关的索偿权，即优先股的索偿权先于普通股，而次于 债权人，优先股的优先权主要表现在两个方面：</p><ol><li>股息领取优先权。股份公司分派股息的顺 序是优先股在前，普通股在后。股份公司不论其盈利多少，只要股东大会决定分派股息，优先 股就可按照事先确定的股息率领取股息，即使普遍减少或没有股息，优先股亦应照常分派股息。</li><li>剩余资产分配优先权。股份公司在解散、破产清算时，优先股具有公司剩余资产的分配 优先权，不过，优先股的优先分配权在债权人之后，而在普通股之前。只有还清公司债权人债 务之后，有剩余资产时，优先股才具有剩余资产的分配权。只有在优先股索偿之后，普通股才 参与分配。</li></ol><h3 id="成长股"><a href="#成长股" class="headerlink" title="成长股"></a>成长股</h3><p>术语“成长股”被用于这样一种股票:其过去每股收益的增长远高于整个普通股的收益率且人们預计今宕仍会如此(一些权威人士认为，真正的成氏股应该有望在10年至少将其收益翻倍，即它们的复合年收益率增长超过7.1%沁显然，如果支付的价格不过分的话，这种类型的股票具有购买和拥有的吸引力。当然，由于成长股长期以与现在收益相联系的高价出售,并且在过去一段时间以比它们的平均收益高许多的倍数出售，因而是存在问題的。这说明在成长股中已经导人了相当重的投机因素，并在这个领域以远不是简单的方式进行了成功运怍</p><p>牛市周期通常以大量私人拥有的企业转成挂牌股份公式为特征，一个相当普遍的过程是将优先股出售给公众，经常是增加货币以满足企业膨胀的需求，为了老的拥有者的利益，也出售大约25%的普通股。因而，后者将保持大约75%的普通股并在诱人的时期将剩余部分变成现金。大多数情况下，优先股将以比普通股的开价稍高的价格转换为普通股。</p><p>债券的利息收入通常少于相应的股息收入的一半。</p><p>观察股票价格是否有低估有两个主要的来源：</p><ol><li>确切的令人失望的结果</li><li>长期被忽视、误解或冷落<blockquote><p>考虑到个股的特殊性，这两点都不能被依赖为成功的普通股的投资指南。</p></blockquote></li></ol><h3 id="中等公司"><a href="#中等公司" class="headerlink" title="中等公司"></a>中等公司</h3><p>定义：他是一个比较重要的工业部门但不是领头的公司。例如他通常在有关的领域是较小的公司，但也许在不重要的行业中与领头的公司起一样的作用。除此之外，任何拥有成长股的公司通常都不被考虑为中等公司。</p><p>如果中等公司股票的一般趋势是低估，投资者通过这种趋势怎样才有希望获利呢？购买廉价的中等公司的股票，其利润因各种方法产生：</p><ol><li>收到的股利率。</li><li>相对购买价格并最终影响价格的再投资的可观收益，在 5 ~ 7 年中，在良好的上等股票中，这些利益能积累得相当大。</li><li>牛市对廉价股票通常是最慷慨的，它将把典型的廉价股票至少提高到一个合适的水平。</li><li>即使在相对平凡的市场中，持续的价格调整过程仍在进行，此时，中等的被低估的股价也许至少升到他们典型的一般的安全水平。</li><li>许多情况下，由于令人失望的收益记录所造成的特别因素，可能因新状态的出现，或因采取新的政策，或因一个管理的机会而被修改。</li></ol><p>投资选择的两个基本问题：</p><ol><li>安全检验公司债券的主要方法是什么？</li><li>构成普通股评价的主要因素是什么？</li></ol><h3 id="证券选择"><a href="#证券选择" class="headerlink" title="证券选择"></a>证券选择</h3><h4 id="防御性投资者"><a href="#防御性投资者" class="headerlink" title="防御性投资者"></a>防御性投资者</h4><p>将仅购买高等级的债券和各种一流的普通股，他要确定所要购买的后者价格不是太高。在确立购买品种时，他有三个选择方向：</p><ol><li>应获得一种正确的一流正确的抽样数据，他应既包括幸运的成长性公司（该公司股票卖价特别高），也包括缺乏增长以及股价较低的公司。</li><li>排除那些卖价相对他们现在和过去平均收益太高的正群。原因是公司具有投资品质时，高价使其证券注入了太大的投机性因素。我建议一种可能的排除指标是：价格超过7年平均收益25倍或者最近12个月的收益的20倍。</li><li>是全神贯注于那些一流的证券，由于他们相对不流行，因此卖价处在重要公司市场价以下。</li></ol><p>选择的重点是排除：</p><ol><li>排除上市股票中明显的拙劣股</li><li>排除那些价格很高却很容易卷入投机性冒险的优先股</li></ol><h4 id="进攻性投资者"><a href="#进攻性投资者" class="headerlink" title="进攻性投资者"></a>进攻性投资者</h4><h3 id="影响资产价值的因素"><a href="#影响资产价值的因素" class="headerlink" title="影响资产价值的因素"></a>影响资产价值的因素</h3><p>普通股的资产价值由以下因素决定：所有的有形资产（一般根据它们的账面价值），扣除普通股之前的所有负债和债权，按未偿还股的数量平分余额。</p><h3 id="成长股的评估"><a href="#成长股的评估" class="headerlink" title="成长股的评估"></a>成长股的评估</h3><p><strong>价值 = 当前（普通）收益 * （8.5 加上预期收益年增长率的 2 倍）</strong></p><p>这个增长数应该是对下一个 7 至 10 年的预测。就成长股来说，他应该有利于建立价值的投资构成，这个价值要大致地与 20 倍与当前收益的最大建议值相一致。</p><p>满足投资价值标准的股票（1957年）：</p><ol><li>基本规模：有超过 1000 万美元的流动资产</li><li>主要“廉价”标准：以低于净流动资产 2/3 的价格卖出普通股</li><li>低市盈率：价格不超过 1957 年收益的 8 倍</li><li>良好的分红历史：至少在以前 10 年分过红利</li></ol><p>评估普通股的 11 条规则：</p><ol><li>评估价值请决于对收益能力的预测,因此要选用合适的倍数,如果必要还要通过调整资产价值来决定。</li><li>收益能力一般代表对未来 7 年平均收益的预调。</li><li>上面的预测应该是在对美元数量和利润率统计分分析的基础上得出的 ,起点就是过去一些时期的真实情况 ,尤其是过去 7 至 10 年内的那些情况。</li><li>当把早些年的价格用到计算中时 ,应该作出适当的调整,以反映后来资本额所导致的变动。</li><li>倍数应该反映未来收益更长期的变化。倍数选 12 对股票的中立预测比较适当，“中立预测”也就是每股收盖年预期增长不超过 2% 。这个数字的增加或减少依赖于评估者的判断和偏爱。除了异常情况外, 最大的倍数应是 20,最小的倍数应是 8。倍数的范国应该符合一定规律,并随基本利率的变化而相反地改变。当然.能否在实际中这样做还值得怀疑,这是因为在市场中,心理因素一一很大程度上决定了倍<br>数一一能使较高的利率更高 ,使较低的利率更低。</li><li>如果有形资产价值少于数益能力价值（收益能力倍数）,后者会由于反映了这种缺陷的一些姿意的因素而焉少。我建议的因素是:和将收益能力价值超过资产价值 2 倍的量减少 1/4（这里允许不扣除超过有形资产 100% 的额外部分)。</li><li>如果净流动资产价值超过了收益能力价值,可以让后者增大到超过最后展定价值的 50% 。</li><li>有些因素是不能控制的,如哉争收益,或战争的约束 ,或临时使用权 ,或租赁条件,或由于过去损失而获得的收入税的有限的减免。在不考虑反常条件的情况下 ,可能的收益总数或每股的损失记该是能估计到的 ,并且应该在评估价值时加入或从中扣除。</li><li>在资本化结构有很大投机性的地方 ,也就是在那些企业优先有由总量较大而不够均衡的地方.企业的总价值应首先被确定,如果企业只拥有普通股的话。这个价值应该以企业承认的主要债权经营价值为根据,然后在优先股和普通股之间进行分配（注意这个处理方法和基于优先股分解权的评估之间的区别)。如果根据前面第 8 条中所指反常条件来说需要调整,这种调整应该对企业总价值进行而不是对每股的基价进行。</li><li>只有在评知价至少超过市场价 1/3 时,它们对指导当前购买才具有明显的价值。在其他情况下 ,它们作为补充的事实可以用在分析和投资决定中,如果现价高出评估价较多，它们也可用在卖出的决定中。</li><li>无论在什么情况下,普通股的投机性越强,符合鉴定价值的实际根据就越少, 特别是成长型公司,在它们的总价值中很可能有真正的投机性成分,对此无法作出任何可靠的计算。</li></ol>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>投资第一课笔记</title>
      <link href="2020/12/01/fund/%E6%8A%95%E8%B5%84%E7%AC%AC%E4%B8%80%E8%AF%BE%E7%AC%94%E8%AE%B0/"/>
      <url>2020/12/01/fund/%E6%8A%95%E8%B5%84%E7%AC%AC%E4%B8%80%E8%AF%BE%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>在交易的背后，首先我们必须认识到，股票跟其他商品一样——价值决定价格，价格围绕价值上下波动。与此同时，由于股票具备投机的属性，因此股价有可能长期偏 离其实际价值。</p>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>定投十年财务自由笔记</title>
      <link href="2020/11/12/fund/%E5%AE%9A%E6%8A%95%E5%8D%81%E5%B9%B4%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/12/fund/%E5%AE%9A%E6%8A%95%E5%8D%81%E5%B9%B4%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h4 id="ROE-净资产收益率"><a href="#ROE-净资产收益率" class="headerlink" title="ROE(净资产收益率)"></a>ROE(净资产收益率)</h4><h4 id="策略加权指数基金"><a href="#策略加权指数基金" class="headerlink" title="策略加权指数基金"></a>策略加权指数基金</h4><p>小众、收益更好</p><p>在所有的策略指数当中，最有影响力，也是我们最常用到的，主要是如下四类:红利指数、基本面 指数、价值指数、低波动指数。</p><h4 id="红利指数"><a href="#红利指数" class="headerlink" title="红利指数:"></a>红利指数:</h4><p>持股收息的最优选择<br>红利指数，是按照股息率来决定个股的权重，哪只股票的股息率越高，这只股票的权重就越大。所以 有的股票市值规模虽然小，但股息率高，可能在红利指数中的占比反而更高一些。</p><p><strong>红利指数的优点</strong></p><p>第一，高股息率，在熊市更有优势。红利指数的股息率越高，熊市分红后再投入的效果越出众，在熊 市里是非常不错的优势。</p><p>第二，红利指数的波动是各个指数中比较低的。能长期发放现金股息的公司，赢利能力和财务状况一 般都不错，毕竟现金股息是切切实实发放了出去，如果公司财务状况不好，是没有能力持续发放股息的。 财务状况越稳定，企业出意外的可能性就越小，股价的波动也越小。红利指数投资一篮子这样的股票，自 然也比较稳定，波动也较低。</p><p>第三，为日常生活提供分红现金流。指数基金也是有基金分红的，指数基金分红的来源是背后公司的 现金分红。而红利指数投资的是高现金分红的企业，自然也能收获很多现金分红，有的红利指数基金就会 以基金分红的形式发放给基金持有者。</p><p><strong>缺点</strong><br>A股有的股票，会因为短期盈利大幅增加，而大比例分红，会影响指数长期的分 红能力。A股的上市公司中，强周期性行业经常会遇到类似的问题。会影响红利指数分红的稳定性</p><h4 id="基本面指数"><a href="#基本面指数" class="headerlink" title="基本面指数"></a>基本面指数</h4><p>基本面策略挑选股票的规则跟市值策略很不一样，这种策略不看市值大小，只看基本面好坏，谁的基 本面更好，谁占的权重就更高。目前一般从四个维度去衡量:营业收入、现金流、净资产、分红。</p><p>基本面指数相较普通的指数，最大的好处还是收益会相对更高一些。熊市里，基本面指数平均每年跑赢标普500指数大约5.8%，这是一个非常惊人的数字。牛市里，基本面 指数平均每年跑赢标普500指数大约0.7%。平均下来，基本面指数比标普500指数多出了2%~3%的年化收益 率。</p><p>市盈率=公司市值/公司盈利。</p><p>市净率=公司市值/公司净资产。</p><p>市现率=公司市值/现金流量。</p><p>股息率=现金分红/公司市值。</p><p>通常对于同一个股票品种来说，市盈率、市净率、市现率越低，股息率越高，这个品种的投资价值也 会越高。</p><h4 id="沪深300价值指数"><a href="#沪深300价值指数" class="headerlink" title="沪深300价值指数"></a>沪深300价值指数</h4><p>是从沪深300指数中挑选出市盈率、市净率、市现率最低，股息率最高的100只股 票，每年定期调整。即每年会调出一部分估值较高的股票，调入一批估值较低的股票，用这种方式，带来 一些额外的超额收益。</p><h4 id="策略加权指数基金-1"><a href="#策略加权指数基金-1" class="headerlink" title="策略加权指数基金"></a>策略加权指数基金</h4><p>一个最大的缺点，是资金容量的问题，它承载不了太多的资金。</p><p>举个例子，沪深300指数，有300只成份股，是按照上市公司的市值规模挑选的，规模越大的公司，在 沪深300指数中占比越高。</p><p>沪深300价值指数，只有100只成份股，是市盈率、市净率等估值比较低的股票。这100成份股容纳的资 金量肯定是小于300只成份股的。</p><p>所以策略加权指数基金，通常规模都是小于对应的市值加权指数基金的。</p><p>常见的策略加权指数有:红利指数、基本面指数、价值指数和低波动指数。</p><p>通常我们定投时，可以以优秀的宽基策略加权指数基金为主，以优秀行业指数基金为辅。例如以红 利、基本面、价值、低波动四类策略加权指数基金为主，以消费、医药、中概互联行业指数基金为辅。</p><p>宽基指数基金比较稳健，适合作为投资主力。优秀行业指数基金长期收益出色，可以提高我们的定投 收益效果。这样的思路，更适合普通投资者。我们要挑选规模合适、费率低廉、追踪误差小的指数基金。我们要挑选长期收益出色的策略加权指数基金和优秀行业指数基金。</p><p>如果一只指数基金规模较小，它清盘的概率就较大。</p><h4 id="追踪误差"><a href="#追踪误差" class="headerlink" title="追踪误差"></a>追踪误差</h4><p>第一，基金份额净值增长率与业绩比较基准收益率的差值。<br>基金份额净值增长率，就是这段时间里，基金净值上涨了多少。业绩比较基准收益率，就是这段时间 里，指数上涨了多少。它们之间的差值，可以衡量收益上的差距。<br>如果基金净值增长率比业绩比较基准的收益率高，差值就是正的，就说明基金的收益比指数的默认收 益好。起码，指数基金没跑输指数。</p><p>第二，基金份额净值增长率标准差与业绩比较基准收益率标准差的差值。<br>这个指标不常用到。标准差指的是衡量基金净值追踪的拟合程度，如果标准差的差距小，就说明基金 在每个时间段的追踪情况都比较贴近于指数。</p><p>总体来说，第一个是衡量指数基金的收益是不是追得上指数，第二个则是衡量指数基金的走势是不是 贴得上指数。</p><p>从我们投资指数基金的角度来说，通常前者更重要，也就是基金净值是不是跑赢了指数基准。毕竟我 们更在乎收益率。</p><p>当然，第二个也很重要，它可以让我们看到每个时间段指数基金的净值是不是与指数比较接近。</p><h4 id="估值指标一把手——市盈率"><a href="#估值指标一把手——市盈率" class="headerlink" title="估值指标一把手——市盈率"></a>估值指标一把手——市盈率</h4><p>市盈率指标也有一些缺点，如不适合用在盈利变化大的品种上，不适合强周期性品种，遇到金 融危机和经济周期的底部会失效等。</p><h4 id="静态市盈率"><a href="#静态市盈率" class="headerlink" title="静态市盈率"></a>静态市盈率</h4><p>静态市盈率是指，市值/上一年度财报的净利润。比如说在2019年年中，我们看静态市盈率，就是用市 值/2018年财报的净利润。</p><h4 id="滚动市盈率"><a href="#滚动市盈率" class="headerlink" title="滚动市盈率"></a>滚动市盈率</h4><p>时效性更高的滚动市盈率是指，市值/最近四个季度财报的净利润。相对来说实效性高一些。</p><p>螺丝钉经常用的就是滚动市盈率。滚动市盈率每个季度更新一次。比如说在2019年7、8月，上市公司会更新半年报。半年报更新完成 后，上市公司如果盈利上涨，滚动市盈率就会下降。</p><p>静态市盈率和滚动市盈率都是根据已经公布的财报来计算的，是客观的估值指标。只不过时效性不 同，相对来说，滚动市盈率的时效性会更强一些。</p><h4 id="动态市盈率"><a href="#动态市盈率" class="headerlink" title="动态市盈率"></a>动态市盈率</h4><p>预测未来的动态市盈率是指，市值/预测未来一年的净利润。动态市盈率通常是用未来一年的盈利来计 算估值，但是这个未来一年的盈利，是预测的。</p><p>未来谁也无法准确预测，所以就会有偏差。大多数时候，我们都不用动态市盈率。</p><h4 id="席勒市盈率"><a href="#席勒市盈率" class="headerlink" title="席勒市盈率"></a>席勒市盈率</h4><p>罗伯特·席勒(Robert Shiller)是著名的经济学家，《非理性繁荣》(Irrational Exuberance )就是他的 著作。这里的席勒市盈率，是他对市盈率的一个改良。</p><p>一般的市盈率，使用一年的净利润时会遇到一些特殊情况而产生较大波动。所以巴菲特的老师格雷厄 姆建议用多年的平均净利润来作为参考。</p><p>席勒在这个基础上，编制了席勒市盈率，也被称为CAPE。席勒市盈率使用过去10年的平均净利润作为 分母，也就是市值/过去10年平均净利润。</p><p>这种方式的市盈率的好处，是避免了某一两年特殊情况的干扰。比如说2007—2008年金融危机的时 候，美国上市公司整体盈利大幅下滑，标普500指数的静态市盈率被动上升到了上百倍。但是如果用席勒市 盈率，则避免了这种干扰，继续有效。</p><h4 id="估值指标二把手——市净率"><a href="#估值指标二把手——市净率" class="headerlink" title="估值指标二把手——市净率"></a>估值指标二把手——市净率</h4><p>什么是市净率？市净率是指每股股价与每股净资产的比率，也就是我们说的账面价值。</p><p>市净率的定义是:PB=P/B(其中P代表公司市值，B代表公司净资产)。</p><p>净资产，通俗来说就是资产减去负债，它代表全体股东共同享有的权益。具体的计算在上市公司的年 报中都有。</p><p>净资产这个财务指标比盈利更加稳定。而且，大多数公司的净资产都是稳定增加的，可以计算出市净 率。</p><p>相比较市盈率来说，市净率会更稳定。因为盈利是一个时间段里产生的，而净资产是积累起来的。</p><h4 id="企业运作资产的效率-ROE"><a href="#企业运作资产的效率-ROE" class="headerlink" title="企业运作资产的效率:ROE"></a>企业运作资产的效率:ROE</h4><p>说到市净率，就不得不说净资产收益率(ROE)，ROE等于净利润除以净资产。ROE越高的企业，资产运作效率越高，市净率也就越高。</p><p>如果一家企业主要靠无形资产来经营，像律师事务所、广告服务公司、互联网公司，那市净率就没有 多少参考价值了。</p><h4 id="衡量现金分红收益率的指标——股息率"><a href="#衡量现金分红收益率的指标——股息率" class="headerlink" title="衡量现金分红收益率的指标——股息率"></a>衡量现金分红收益率的指标——股息率</h4><p>股息率是指，现金分红/市值。</p><p>股息，是投资者在不减少所持有的股权资产的前提下，仍然可以直接分享企业业绩增长的最佳方式。我们买入指数基金的时候就确定了，一般来说基金越是低估，股息率越高。</p><p><strong>分红比例是什么</strong></p><p>说到股息率，就不得不说分红比例，也就是分红率。乍一看，股息率、分红率这两个概念很像，但实 际上是不同的。分红率，也叫作派息率、分红比例。</p><p>简单来说，股息率，是企业过去一年的现金派息额除以公司的总市值。分红率，则是企业过去一年的 现金派息额除以公司的总净利润。分红率一般是公司预先就设置好了，并且连续多年都不会改变。而股息率，则会随着股价波动:股价越低，股息率就越高。</p><p>改良后的定投指数基金的方法：</p><ol><li>挑选长期盈利增长率良好的品种<br>前面提到过的宽基指数基金和优秀行业指数基金基本都符合这个要求。</li><li>在估值处于低位的阶段买入</li></ol><p>要同时满足：在自身历史估值处于低位，估值要跟自身盈利速度相匹配。</p><p>从世界范围内来看，成熟国家的股票市场，长期盈利增长率在 8% - 10%，市盈率平均值在15倍左右，这是一个可参考的区间。</p><p>估值和盈利增长速度的关系：PEG指标（市盈率数值 / 长期盈利增长速度数值）：</p><p>比如市盈率时15倍，长期盈利增长率时15%，那PEG就是1，一般合理的区间时 1～2，更多是用来帮助我们排雷用的。</p>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>理财不用懂太多笔记</title>
      <link href="2020/11/12/fund/%E7%90%86%E8%B4%A2%E4%B8%8D%E7%94%A8%E6%87%82%E5%A4%AA%E5%A4%9A%E7%AC%94%E8%AE%B0/"/>
      <url>2020/11/12/fund/%E7%90%86%E8%B4%A2%E4%B8%8D%E7%94%A8%E6%87%82%E5%A4%AA%E5%A4%9A%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="货币基金的两个名词："><a href="#货币基金的两个名词：" class="headerlink" title="货币基金的两个名词："></a>货币基金的两个名词：</h3><p><strong>万份收益</strong>：持有一万元货币基金当天的收益</p><p><strong>七日年化</strong>：用之前7天的收益率加总，除以7再乘以365所得的结果，之所以是过去7日是因为货币基金或多或少的参与到证券市场，其中的普遍规律是周四的收益较高，周末的收益较少，通过7天累加可以很大程度消除这个影响。</p><h3 id="买房参考"><a href="#买房参考" class="headerlink" title="买房参考"></a>买房参考</h3><ol><li>在看完所选的户型图纸后，记得看下楼层图或者CAD图纸</li><li>户型图注意看标识的尺寸，横平方向要大于3.1m（是最低尺寸），竖直方向要大于3.5m（最低尺寸），不要太相信样板间，他们的家具都是定做的，看起来比较好（比如尺寸）</li><li>房屋光线</li><li>靠近道路的房屋，9-11层，PM2.5略高一点，临高架桥更高</li><li>不要买一层升至二层</li><li>不要买顶层</li><li>注意小区内变电站和垃圾箱的位置</li><li>注意小区内的水系</li><li>特别注意铁路</li><li>看楼盘时故意提及竞争对手的，置业顾问会把对方的不利因素都告诉你（有许多你是发现不了的）</li></ol><p>研究上市公司财务报表</p><p>其实我们并不需要成为顶级专家，也不需要供职于金融机构，只要储蓄率大于零，我们就可以用自己的余钱去投资理财，让资金滚动起来钱生钱</p><p>要考虑恶性通货膨胀</p><p>非流动资产是投资收益的主要来源，只有短期内用不到的资金，才能置换成股票等非流动资产，否则就是以短持长，应当尽量避免。在选择股票时，重点考虑利润和分红稳定的股票，用出租房子的租金和股票的分红去覆盖房贷月供，只要股票的投资收益大于贷款的按揭贷款的利率，那么这种搭配方法就能获得正收益。</p><p>查看货币基金的财务报表，并试着理解其中的内容。</p><p>坚持不懂的不做</p><h2 id="股票"><a href="#股票" class="headerlink" title="股票"></a>股票</h2><h3 id="指数型基金"><a href="#指数型基金" class="headerlink" title="指数型基金"></a>指数型基金</h3><p>资本市场上有不少“地雷”和“陷阱”，即使投资能力很强也难免中招。指数有一个好处，就是它的样本量大。一个指数中所包含的股票数量，少则几十只，多则数百上千只。这些上市公司有好也有坏，最终好坏相互抵消，得到一个平均水平。</p><p>如果我们想要超越平均水平呢?其实也很简单。这里用到我们之前说的两根温度计—–PE、PB。我们统计各类指数十年以上的运行情况，看看各个阶段它们的PE、PB是多少。最好选择有十年以上历史可追溯的指数，如上证指数、深证成指、恒生指数等。我们在时间轴上把各PE、PB的值连起来，这样高点和低点就一目了然。只要选择在PE、PB处于历史低位的时候投资指数，得到的收益率自然就能超越平均水平。</p><p>综合统计国内外各大主要指数的历史情况，当PE低于10倍时处于低估区域，20倍以上则为高估区域，中间为正常区域。这一点从实行注册制的美股、港股市场看得更清楚。A股由于之前实行审核制，供应量跟不上需求，所以曾经很长时间处于高估的位置。</p><h3 id="低估分散策略"><a href="#低估分散策略" class="headerlink" title="低估分散策略"></a>低估分散策略</h3><p>除了指数投资，我们还可以采取另一种策略来实现“傻瓜式投资”。这种策略需要我们资金量稍微多一点，40万元以上较为合适。资金太少则难以分散持股，且交易费率较高。与此同时，还需要稍微了解-点财务知识，会通过财务报表自行计算PE、PB。</p><p>我们首先通过一些财经网站或者行情软件，筛选出一篮子低PE、低PB的个股。然后逐一阅读财务报表，核算出它们的PE、PB值，剔除一些PE、PB被扭曲的情况（如非经常性损益等），并将结果记录下来@。最后，我们在各个行业中分散地选择低可在上交所网站查询行业分类信息，如表16-1：PE、低PB的个股，买入并持有。因为股价是变动的，所以我们还需要按月审查，如果出现更低估的标的，则进行换股。</p><p>股票的估值低，有可能是因为处于夕阳行业，前景不被看好；又或者是周期性行业，利润处于顶峰时期（好得不能再好，未来就只能下降了）。所以我们需要将投资标的分散到不同的行业中去。但总体来说，低估值更多是出自投资者的悲观情绪i。对于低估的股票而言，因为预期不高，所以只要业绩稍有改善，股价介就可能上涨。反观许多高估值的“成长股”，多多少少有泡沫成分，即使业绩维持高增长，只要增长幅度不如市场预期的那么高，股价也可能下跌。</p><h2 id="基金和信托"><a href="#基金和信托" class="headerlink" title="基金和信托"></a>基金和信托</h2><p>对于投资人来说，基金就是把钱交给专业财经人士打理。基金管理公司收取一定的费用，如管理费、申赎费等。扣除这些费用后，不论是赔是赚，均由基金投资人承担。公募基金品类繁多，数量比股票还多（2015年初超越）。2015年共发行了800多只基金，截至年底公募基金的总规模达到8.4万亿元（但货基占了半壁江山）。对大多数人来说，挑选一款适合自己的基金并不容易。我们普通大众能接触到的基金，被称为“公募基金”。它的特点是可以公开宣传，公开募集发行，投资门槛低，由某某基金公司发行①此外还有面向高净值人士的私募基金，特点是不能公开宣传，只能面向少数特定人群，认购门槛高（不低于100万），一般由某某资产管理公司发行。在公募基金这个大框框里，又分很多类别，我们来看一看。</p><h3 id="投资范围"><a href="#投资范围" class="headerlink" title="投资范围"></a>投资范围</h3><p>基金可以投资的范围很广，除了前面提到的货币基金外，还可以是股票（股票型基金）、债券（债券型基金）、股债混合（混合型基金）、大宗商品（如石油、贵金属等）、房地产（REIs）等，甚至还有投资基金的基金（FOF）。根据最新的《公开募集证券投资基金运作管理办法》②，股票型基金投资股票的最低仓位不得低于80%，这意味着如果遭遇股市崩盘，股票型基金只能硬扛，无法将仓位降低至80%以下。同样，债券型基金投资债券的最低仓位不得低于80%。但不要因为“债券”二字就认为其“风险低”。首先，债券型基金通常用正回购等方式加杠杆买债券，短融长投，因而受到的利率风险较大;其次，债券型基金既可以配置较多的可转债（股性较重），也能够买一小部分股票。至于混合型基金，投资仓位灵活得多，不受限制。关于基金仓位要求的具体情况，可<br>以在招募说明书中找到。根据投资范围，还可以更细致地分类，如专门投资短期债券的短融债基金，专门投资大盘蓝筹股的股票型基金等。投资人可以根据自己的需要去选择合适的基金。</p><h3 id="申赎及交易方式"><a href="#申赎及交易方式" class="headerlink" title="申赎及交易方式"></a>申赎及交易方式</h3><p>基金按能否进行申赎，可分为封闭式基金和开放式基金。同时根据其是否能够在交易所买卖，又分为可交易型基金和不可交易型基金。封闭式基金在募集完毕后的“封闭期”内，不能进行申购和赎回即基金的份额总数不变。许多封闭式基金不能申赎，但可以在证券交易所买卖。由于封闭式基金不能按净值赎回，而其中的股票型基金又有仓位限制，所以当股市低迷时便少有人愿意接手（买入），交易价格相对净值出现大幅折价。2005年熊市底部，甚至出现了不少打半价的封闭式基金。封闭期结束后，一般的处理方法是转为开放式基金，或对基金清算返还资金（这个很少）。随着早期的封闭式基金陆续到期，目前市场上的封闭式基金数量很少。大部分新基金均开放申赎。开放式基金允许申赎的日期即为“开放日”，一般的证券交易日都是开放日，但有些基金也常常暂停申赎，如QD外汇额度耗尽，又如一些基金申购额太多，难以完成资产配置（之前的打新基金），具体情况留意基金的公告。</p><p>封闭式基金一般都能在交易所买卖（少量除外），但并不是所有的开放式基金都能交易，其中可交易的又称为LOF，或ETF等。此类基金可以按照净值赎回，所以其交易价格不会偏离净值太多，否则就会有套利资金介入。</p><h3 id="场内基金与场外基金"><a href="#场内基金与场外基金" class="headerlink" title="场内基金与场外基金"></a>场内基金与场外基金</h3><p>通常说的“场内”指的是上海和深圳两个交易所之内。我们除了利用炒股软件申赎和交易基金，还可以通过银行、基金公司官网，甚至淘宝、天天基金网、陆金所等其他平台进行申赎，这些申赎渠道都称为“场外”。同一只基金，既可以在场内申赎和交易，也可以在场外申赎（但不能交易）。当然也有一些基金只在场内，或只在场外。对于在场内有交易代码的基金，我们也可以进行转托管，即“场外转场内”，或“场内转场外”，将基金份额在同一个身份证下不同的账户之间进行转移。通常场外转场内更多，因为许多基金在场外的申购费率打折。此类转换的流程比较复杂，通常只用于套利。</p><h3 id="分级基金"><a href="#分级基金" class="headerlink" title="分级基金"></a>分级基金</h3><p>我们在前面的章节里提到的分级A，就是分级基金的一种。分级基金简言之就是“借钱买股”“借钱买债”。分级基金分作母基金、A类子基、B类子基①三种。母基与其他基金并无二异，只是可以按比例拆分成A类子基、B类子基。其中A类子基获取固定收益，相当于借钱给B类子基，而B类子基则承担更多的盈利和亏损分级基金从2014年下半年开始发展壮大，尤以跟踪各类细分指数的被动型分级基金为多。通过分级基金，我们不仅可以投资各类指数，还可以投资于一些细分行业（行业指数），如银行、券商、环保、军工等。</p><h2 id="招募说明书"><a href="#招募说明书" class="headerlink" title="招募说明书"></a>招募说明书</h2><p>《招募说明书》就像是一本产品说明书，它收纳了基金最全面的资料，类似的还有《上市公告书》和《基金合同》。后两者如果没有时间详细阅读，可以重点关注《招募说明书》。一般的《招募说明书》都有百页以上，但其实需要关注的内容并没有那么多，我们重点关注的内容有：</p><ol><li>基金经理介绍。这个自然不用多说，基金经理就像一只基金的导演，很大程度上决定了基金的运作水平。该部分内容会列出基金经理的学历、曾担任过哪些基金的经理，同一时间是否兼任其他基金的经理等内容。某些基金经常更换基金经理，这需要引起我们的注意。许多人冲着明星基金经理去投资的，更得密切关注这一点。</li><li>申赎时间及方式，交易方式等。如是否为开放式基金，能否在证券交易所交易等。ETF基金的申购办法略有不同，后文还将详述</li><li>封闭期及封闭期结束后处理方法。许多开放式基金在认购期结束后，会暂时封闭一段时间（一个月内）才上市交易或开放申赎以利于基金建仓。通常封闭期超过一年以上，且有固定的封闭期结束日，才称为封闭式基金。封闭期时长以及结束后的处理办法是必须关注的。封闭期结束前，封闭式基金的折价率有缩窄的趋势，因为它将转换为可按净值赎回的LOF基金，或按净值清盘返还资金等。</li><li>巨额赎回的认定及处理方式。同一时间大量基金遭遇赎回（一般认为10%以上），基金可以采取部分顺延赎回、全部顺延赎回暂停赎回等措施。</li><li>基金转换业务。许多基金公司都有基金转换业务，方便客户在同一基金公司旗下的基金之间转换，其效果就相当于赎回一只，申购另一只，只是省下了一些申赎费用。这也是基金公司防止客户流失的种方法。</li><li>拒绝或暂停申购、赎回和转换的情形及处理方式。此处列举了各种可能性，如外汇额度不够用;又或者基金资产规模过大，找不到合适的投资产品（一些基金公司的旗帜型产品，为了树立业绩榜样，可能暂停申购）等。如果出现此类情况，基金公司会单独发布公告说明。</li><li>投资策略、范围、比例等。基金的投资策略是积极进取，还是稳健保本?投资范围是债券还是股票?是稳健型的大盘蓝筹股，还是高新技术的小盘成长股?各类投资的最低及最高比例，会不会使用杠杆（各类投资比例合计超过100%）?这部分内容很重要，不同的投资去向，收益性和风险性也各不相同。</li><li>业绩比较基准。通过这部分内容，可以对基金的收益性、风险性、业绩目标有一个大致了解。例如，货基的比较基准一般是银行存款利率，所以它的净值不会每天大幅波动。再如，如果一只基金的比较基准是上证A指数收益率×80%+上证国债指数收益率×20%，那么它的收益和风险大致就像是八成股票，两成国债，当然基金经理会努力使业绩好于比较基准。</li><li>估值方法（净值）。基金会在每个交易日结束后，将基金财产的价值估算出来，除以总的基金份额数量，得到每份基金的净值。基金的申购和赎回都是以这个净值为参考进行的，所以估多估少会直接影响基金持有人的收益。这里特别注意停牌股票的估值调整办法，还有一些无交易量的证券、非上市证券等的估值办法（一般是债券）等。</li><li>收益分配方法。主要是基金分红的一些事项，是发放现金还是基金红利份额等。某些基金还规定，“如果基金投资当期出现亏损则不进行收益分配”“基金当期收益先弥补上期亏损后，方可进行当期收益分配”等。</li><li>基金费率。基金的费率包括运营类费率，如管理费、托管费、营销费、指数使用费（指数型基金）;以及交易类费率，如申购费、赎回费、转换费率等。运营类费率虽然没有直接的“收费”动作，但却是实实在在的费用，它直接在基金净值里扣除掉了。而交易类费率，只有当投资人有交易操作时才会产生。为了促销，部分渠道的申购费率还可以打折①，一折、五折的都有，此类渠道多为基金官网或其他网络平台。申购费率也可能因为申购金额的不同而设置不同的收费档位，赎回费率则可能因为持有基金的时间长短而设置不同的收费档位。基金《招募说明书》一般没写其在证券交易所的买卖佣金费率，因为它是券商收取的，各家券商会有不同，就跟股票佣金一样。一般人更关注基金的历史业绩，而较少关注基金费率。有的货基运营类费率高达0.8%以上，有的却不足0.3%，因为货基的收益率本就不高②，所以后者已经赢在了起跑线上。又比如各类股票型基金中，主动管理型基金的费率相对最高，而指数型基金费率则大致低了一半。</li><li>建仓期，指数型基金尤其注意这一点。许多新成立的基金规定了三至六个月的建仓期，在建仓期内基金的仓位不受约束，有些基金甚至因此空仓了半年。</li><li>分级基金特别注意事项。如A:B的比例数量;A、B子基是永续型还是定期转换型;定折、下折、上折的办法;A类子基的利率规则等。分级基金种类繁多，未来发行的新分级基金，还可能冒出新的</li><li>风险揭示。该部分内容详细列举了各种可能的风险。虽然很多也是“八股文”，但有必要细读一遍。</li><li>合同终止及清算。一只基金之所以遭遇清算，两种可能性最大，要么是运行不划算（亏本），要么是基金公司或基金托管人（银行）没有能力继续运营（破产倒闭或被吊销牌照），且没有同行愿意接手的。基金的招募说明书中会有基金清算的条件，例如某基金规定:基金份额持有人数量连续60个工作日达不到100人，或连续60个工作日基金资产净值低于人民币5000万元。许多投资人喜欢在熊市抄底，注意不要遇到规模过小而清盘的基金。</li><li>其他。任何你关心的内容，都可以在《招募说明书》里找到。例如定期定额投资办法（定投）等。</li></ol><p>作为普通投资人，许多金融产品我们无法直接投资。基金拓宽了投资渠道，例如QDII可以投资港股、美股等;又如货币基金可以投资银行大宗存款。此外，一些基金还帮我们省了不少事。例如，指数型基金通过按比例持有成分股，达到跟踪指数的效果。因此我们不用一笔一笔去分散买入上百只股票（资金量小甚至做不到）。</p>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>螺丝钉的投资类书单</title>
      <link href="2020/09/07/other/%E6%8A%95%E8%B5%84%E7%B1%BB%E4%B9%A6%E5%8D%95/"/>
      <url>2020/09/07/other/%E6%8A%95%E8%B5%84%E7%B1%BB%E4%B9%A6%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="螺丝钉推荐的经典的投资书籍"><a href="#螺丝钉推荐的经典的投资书籍" class="headerlink" title="螺丝钉推荐的经典的投资书籍"></a>螺丝钉推荐的经典的投资书籍</h2><ol><li><input disabled type="checkbox"> 聪明的投资者</li><li><input disabled type="checkbox"> 证券分析</li><li><input disabled type="checkbox"> 巴菲特致股东的信</li><li><input disabled type="checkbox"> 滚雪球</li><li><input disabled type="checkbox"> 穷查理宝典</li><li><input disabled type="checkbox"> 文明、现代化、价值投资与中国</li><li><input disabled type="checkbox"> 彼得林奇的成功投资</li><li><input disabled type="checkbox"> 共同基金常识</li><li><input disabled type="checkbox"> 股市真规则</li><li><input disabled type="checkbox"> 投资中最重要的事</li><li><input disabled type="checkbox"> 机构投资的创新之路</li><li><input disabled type="checkbox"> 原则</li><li><input disabled type="checkbox"> 商业模式新生代、商业模式新生代（个人篇）</li><li><input disabled type="checkbox"> 投资与养老</li><li><input disabled type="checkbox"> 憨夺型投资者</li><li><input disabled type="checkbox"> 大钱细思</li><li><input disabled type="checkbox"> 非理性繁荣</li><li><input disabled type="checkbox"> 助推</li><li><input disabled type="checkbox"> 思考，快与慢</li></ol><h2 id="螺丝钉的投资类书单"><a href="#螺丝钉的投资类书单" class="headerlink" title="螺丝钉的投资类书单"></a><a href="https://mp.weixin.qq.com/s/j3LYcVpX2kiCg2rJ-OA7bw" target="_blank" rel="noopener">螺丝钉的投资类书单</a></h2><ol><li><input checked disabled type="checkbox"> 指数基金投资指南</li><li><input checked disabled type="checkbox"> 定投十年财务自由-银行螺丝钉</li><li><input checked disabled type="checkbox"> 买基金为自己加薪</li><li><input checked disabled type="checkbox"> 理财不用懂太多</li><li><input disabled type="checkbox"> 期权期货及其他衍生产品第七版本</li><li><input disabled type="checkbox"> 手把手教你读财报</li><li><input disabled type="checkbox"> 一个投资家的20年</li><li><input disabled type="checkbox"> 投资第一课</li><li><input checked disabled type="checkbox"> 穷爸爸富爸爸</li><li><input checked disabled type="checkbox"> 聪明的投资者</li><li><input disabled type="checkbox"> 证券分析（投资启蒙书籍，巴菲特的老师格雷厄姆先生的著作）</li><li><input disabled type="checkbox"> 巴菲特致股东的信</li><li><input disabled type="checkbox"> 滚雪球</li><li><input disabled type="checkbox"> 巴菲特之道</li><li><input disabled type="checkbox"> 巴菲特投资案例集</li><li><input disabled type="checkbox"> 穿过迷雾</li><li><input disabled type="checkbox"> 穷查理宝典</li><li><input disabled type="checkbox"> 彼得林奇的成功投资</li><li><input disabled type="checkbox"> 战胜华尔街</li><li><input disabled type="checkbox"> 伯格读共同基金</li><li><input disabled type="checkbox"> 长赢投资</li><li><input disabled type="checkbox"> 共同基金常识</li><li><input disabled type="checkbox"> 约翰博格的投资50年</li><li><input disabled type="checkbox"> 股市长线法宝</li><li><input disabled type="checkbox"> 投资者的未来</li><li><input disabled type="checkbox"> 约翰聂夫的成功投资</li><li><input disabled type="checkbox"> 股市真规则</li><li><input disabled type="checkbox"> 投资最重要的事</li><li><input disabled type="checkbox"> 投资中最简单的事</li><li><input disabled type="checkbox"> 股市进阶之道——一个散户的自我修养</li><li><input disabled type="checkbox"> 机构投资的创新之路</li><li><input disabled type="checkbox"> 新经济下的财富管理</li><li><input disabled type="checkbox"> 投资估价</li><li><input disabled type="checkbox"> 低风险投资之路</li><li><input disabled type="checkbox"> 可转债投资魔法书</li><li><input disabled type="checkbox"> 分级基金与投资策略</li></ol><h2 id="吴晓波推荐给年轻人的50本书"><a href="#吴晓波推荐给年轻人的50本书" class="headerlink" title="吴晓波推荐给年轻人的50本书"></a>吴晓波推荐给年轻人的50本书</h2><h3 id="第一部分-当商业开始改变世界"><a href="#第一部分-当商业开始改变世界" class="headerlink" title="第一部分    当商业开始改变世界"></a>第一部分    当商业开始改变世界</h3><ol><li><input disabled type="checkbox"> 国富论：他发现了“看不见的手”<font color="#969896">（豆瓣 9.0）</font></li><li><input disabled type="checkbox"> 资本论：一本为革命而生的经济学宣言<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> 新教伦理与资本主义精神：为商业编织“意义之网”<font color="#969896">（豆瓣 8.9）</font></li><li><input disabled type="checkbox"> 就业、利息和货币通论：重新定义“看得见的手”<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> 通往奴役之路 ：他什么都不相信，除了自由<font color="#969896">（豆瓣 8.8）</font></li><li><input disabled type="checkbox"> 自由选择 ：经济学界有个“矮巨人”<font color="#969896">（豆瓣 8.9）</font></li><li><input disabled type="checkbox"> 经济学：“我写教科书，其他人拟定法律”<font color="#969896">（豆瓣 9.3）</font></li><li><input disabled type="checkbox"> 创新与企业家精神：一个“旁观者”的创新<font color="#969896">（豆瓣 8.9）</font></li><li><input disabled type="checkbox"> “竞争三部曲”：战略模型的设计大师（一）竞争战略<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> “竞争三部曲”：战略模型的设计大师（二）竞争优势<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> “竞争三部曲”：战略模型的设计大师（三）国家竞争优势<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> 乌合之众：群众是如何被发动起来的<font color="#969896">（豆瓣 8.2）</font></li></ol><h3 id="第二部分-成长的策略与秘密"><a href="#第二部分-成长的策略与秘密" class="headerlink" title="第二部分    成长的策略与秘密"></a>第二部分    成长的策略与秘密</h3><ol><li><input disabled type="checkbox"> 追求卓越：第一本卖过千万册的商业图书<font color="#969896">（豆瓣 7.7）</font></li><li><input disabled type="checkbox"> 基业长青：伟大的创业者都是“造钟”人<font color="#969896">（豆瓣 8.2）</font></li><li><input disabled type="checkbox"> 营销管理：营销学最后的大师<font color="#969896">（豆瓣 9.0）</font></li><li><input disabled type="checkbox"> 第五项修炼 ：席卷全球的学习型组织热<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> 隐形冠军 ：默默无闻的小巨人<font color="#969896">（豆瓣 7.7）</font></li><li><input disabled type="checkbox"> 定位：“有史以来对营销影响最大的观念”<font color="#969896">（豆瓣 8.2）</font></li><li><input disabled type="checkbox"> 创新者的窘境：管理越好的公司越容易失败<font color="#969896">（豆瓣 8.5）</font></li><li><input disabled type="checkbox"> 长尾理论：尾巴决定商业的未来<font color="#969896">（豆瓣 7.7）</font></li><li><input disabled type="checkbox"> 引爆流行：如何找到那个引爆点<font color="#969896">（豆瓣 8.0）</font></li></ol><h3 id="第三部分-动荡年代与潮汐的方向"><a href="#第三部分-动荡年代与潮汐的方向" class="headerlink" title="第三部分    动荡年代与潮汐的方向"></a>第三部分    动荡年代与潮汐的方向</h3><ol><li><input disabled type="checkbox"> 萧条经济学的回归和2008年经济危机：最喜欢说“不”的经济学家<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> 非理性繁荣：大股灾烧出的超级明星<font color="#969896">（豆瓣 8.1）</font></li><li><input disabled type="checkbox"> 政府为什么干预经济：为“守夜人”划定边界<font color="#969896">（豆瓣 8.0）</font></li><li><input disabled type="checkbox"> 21世纪资本论：让公平重新回到辩论的中心<font color="#969896">（豆瓣 7.7）</font></li><li><input disabled type="checkbox"> 美国大城市的死与生：家庭主妇对城市的抗议<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> 第三次浪潮：他把新世界的地图徐徐展开<font color="#969896">（豆瓣 8.4）</font></li><li><input disabled type="checkbox"> 失控：互联网世界的“预言帝”<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> 奇点临近 ：机器什么时候战胜人类<font color="#969896">（豆瓣 7.6）</font></li><li><input disabled type="checkbox"> 世界是平的：一组动听的全球化赞歌<font color="#969896">（豆瓣 7.6）</font></li><li><input disabled type="checkbox"> 未来简史 ：99% 的人将成无用之人？<font color="#969896">（豆瓣 8.4）</font></li></ol><h3 id="第四部分-无法终结的历史与思想"><a href="#第四部分-无法终结的历史与思想" class="headerlink" title="第四部分　　无法终结的历史与思想"></a>第四部分　　无法终结的历史与思想</h3><ol><li><input disabled type="checkbox"> 旧制度与大革命：如何攻陷内心的巴士底狱<font color="#969896">（豆瓣 8.9）</font></li><li><input disabled type="checkbox"> “年代四部曲”：一位欧洲共产党员的历史书写（一）革命的年代：1789～1848<font color="#969896">（豆瓣 8.5）</font></li><li><input disabled type="checkbox"> “年代四部曲”：一位欧洲共产党员的历史书写（二）资本的年代：1848～1875<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> “年代四部曲”：一位欧洲共产党员的历史书写（三）帝国的年代：1875～1914<font color="#969896">（豆瓣 8.4）</font></li><li><input disabled type="checkbox"> “年代四部曲”：一位欧洲共产党员的历史书写（四）极端的年代：1914～1991<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> 巨人 ：发明了“中美国”概念的英国人<font color="#969896">（豆瓣 7.1）</font></li><li><input disabled type="checkbox"> 历史的终结与最后的人 ：一个走不出去的“福山困境”<font color="#969896">（豆瓣 8.5）</font></li><li><input disabled type="checkbox"> 大国的兴衰：500 年视野里的美国与中国<font color="#969896">（豆瓣 8.2）</font></li><li><input disabled type="checkbox"> 枪炮、病菌与钢铁 ：一本有趣的文明进化简史<font color="#969896">（豆瓣 8.7）</font></li></ol><h3 id="第五部分-企业家书写的传奇"><a href="#第五部分-企业家书写的传奇" class="headerlink" title="第五部分　　企业家书写的传奇"></a>第五部分　　企业家书写的传奇</h3><ol><li><input disabled type="checkbox"> 影响历史的商业七巨头：为了到达顶峰，你不需要什么门票<font color="#969896">（豆瓣 7.7）</font></li><li><input disabled type="checkbox"> 谁说大象不能跳舞？：一个做饼干的如何拯救“蓝色巨人”<font color="#969896">（豆瓣 7.8）</font></li><li><input disabled type="checkbox"> 只有偏执狂才能生存：他穿越了死亡之谷<font color="#969896">（豆瓣 7.6）</font></li><li><input disabled type="checkbox"> 杰克·韦尔奇自传：“全球第一CEO”养成记<font color="#969896">（豆瓣 7.8）</font></li><li><input disabled type="checkbox"> 巴菲特致股东的信：那个种植“时间的玫瑰”的人<font color="#969896">（豆瓣 8.2）</font></li><li><input disabled type="checkbox"> 史蒂夫·乔布斯传 ：生来只是为了改变世界<font color="#969896">（豆瓣 8.7）</font></li><li><input disabled type="checkbox"> 活法：“敬天爱人”的日本商业哲学<font color="#969896">（豆瓣 8.1）</font></li></ol><h3 id="第六部分-谁来讲述中国事"><a href="#第六部分-谁来讲述中国事" class="headerlink" title="第六部分　　谁来讲述中国事"></a>第六部分　　谁来讲述中国事</h3><ol><li><input disabled type="checkbox"> 江村经济：用脚写出来的中国模式<font color="#969896">（豆瓣 9.0）</font></li><li><input disabled type="checkbox"> 美国与中国：费正清的眼睛<font color="#969896">（豆瓣 8.5）</font></li><li><input disabled type="checkbox"> 大分流：如果世界结束于 1820 年<font color="#969896">（豆瓣 7.6）</font></li><li><input disabled type="checkbox"> 万历十五年：一位少校军官的“大历史”<font color="#969896">（豆瓣 8.9）</font></li><li><input disabled type="checkbox"> 论中国 ：一位 85 次访华的政治家<font color="#969896">（豆瓣 8.6）</font></li><li><input disabled type="checkbox"> 当代中国经济改革：中国正在过大关<font color="#969896">（豆瓣 9.7）</font></li><li><input disabled type="checkbox"> 中国的经济制度 ：乱发狂生的错过与得到<font color="#969896">（豆瓣 8.0）</font></li><li><input disabled type="checkbox"> 激荡三十年：为当代中国企业立传<font color="#969896">（豆瓣 8.6）</font></li></ol>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>买基金为自己加薪笔记</title>
      <link href="2020/09/01/fund/%E4%B9%B0%E5%9F%BA%E9%87%91%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8A%A0%E8%96%AA%E7%AC%94%E8%AE%B0/"/>
      <url>2020/09/01/fund/%E4%B9%B0%E5%9F%BA%E9%87%91%E4%B8%BA%E8%87%AA%E5%B7%B1%E5%8A%A0%E8%96%AA%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="评选基金风险的指标："><a href="#评选基金风险的指标：" class="headerlink" title="评选基金风险的指标："></a>评选基金风险的指标：</h3><ol><li>标准差：代表基金过去一段时间净值的稳定程度。<br>数字越低，基金绩效的稳定度越高，越值得信赖。不过要切记一点，应该与同类型的基金比较。</li><li>ß 值：显示基金的波动程度。<br>如果 &gt; 1，就代表基金风险大于整体市场；如果 &lt; 0，就代表基金风险小于整体市场。例如，为 1.05，代表大盘涨跌幅为 1%，带动基金净值涨跌为 1.05%。</li><li>夏普指数：指的是每单位风险所带来的超额收益。<br>简单来说，如果为 0，就代表每单位风险所带来的收益和银行定存相同；如果 &gt; 0，就代表每单位风险所带来的收益优于银行定存；如果 &lt; 0，就代表每单位风险所带来的收益不如银行定存。</li></ol><h3 id="了解景气趋势-基本面"><a href="#了解景气趋势-基本面" class="headerlink" title="了解景气趋势-基本面"></a>了解景气趋势-基本面</h3><ol><li>国内生产总值，国内生产总值常被作为衡量一国经济成果的指标，如果一个国家的经济成长率增幅递减，可以预期股市大概也不会有行情。</li><li>主要经济指标，可以预测未来6~9个月的经济活动，要观察连续3个月有无升降，如果升幅或者跌幅逐渐缩小，就代表趋势逆转。值得注意的是，当主要经济指标达到最低，或达到最高时，预测就会钝化，必须搭配其他经济指标一并观察。</li><li>美国采购经理指数，这是针对美国采购经理所作的调查，显示制造业的景气状况。当美国采购经理指数上升，代表美国对外采购金额增加，未来景气可望好转，反之则代表景气走弱。而当美国采购经理指数高于50，就代表景气扩张，低于50则是景气收缩期。</li><li>消费者物价指数，是衡量通货膨胀的重要指标。当消费者物价指数维持低位，中央银行会调低利率；消费者物价指数持续高位，中央银行则会调高利率。</li><li>美联储的态度，美联储在全球金融市场会结冻，影响了全球利率走势与资金流向，从2004年6月以来，美联储持续加息，为的就是要打击通货膨胀，美联储开会前市场的看法，乃至美联储发表的声明内容，都是重要观察指标。</li><li>消费者信心指数，其高低影响市场存货，特别是美国零售业占国内生产总值的60%，若存货居高不下，美国采购经理指数就跟着下滑。当消费者信心指数维持低于100时，代表景气低迷，若消费者信心指数持续下跌，则代表消费者对未来景气看法不乐观，消费意愿可能萎缩。不过，消费者信心指数在经济扩张期变化不大，景气低迷时，消费者信心指数对景气回升有关键影响。</li><li>工业生产与产能利用率，工业生产指数衡量主要工业的实质产出，产能利用率则是衡量厂商对设备的利用程度，当工业生产指数上升时，代表经济步调加速，但是增幅过高则可能是景气过热，投资须谨慎。至于产能利用率偏高则代表需求大于供给，厂商有调高价格的能力，提升获利，进一步提升投资意愿。</li></ol><h3 id="判断进出场时点-技术面"><a href="#判断进出场时点-技术面" class="headerlink" title="判断进出场时点-技术面"></a>判断进出场时点-技术面</h3><ol><li><p>季线走向</p><p> 通常当季线持续向上时，表示中长期持续看好，反之，如果季线持续往下，表示中长期有疑虑，不过，要注意的是当季线往下时，股市通常已经下跌一阵了。</p></li><li><p>KD值，用来判断实际进出场时间点。</p><p> KD值是利用周期中的最高价、最低价和收盘价来计算未来的随机值，50是强弱势的分水岭，80以上表示趋涨，20以下表示趋跌，K线代表快速动线，D线代表慢速动线，K值大于D值表示涨势，D值大于K值表示跌势。通常当K线穿越D线，产生黄金交叉时，我会加快布局；反之，若K线跌破D线、产生死亡交叉时，我会准备卖出持股。通常我会看周KD指标，再参考日KD跟月KD。原则上，只要大环境不差，低于20时我会大力买进，当K线穿越D线，产生黄金交叉后，只要还有筹码，我都还会持续买进，直到布局完成。等到KD值到达80的超涨区时，我会开始准备卖出，此时如果死亡交叉还没产生，就可以再等一下，等K线下弯时，我才会开始分批卖出，一旦出现死亡交叉，就是我出清手上持股的时候。</p></li><li><p>搭配成交量的观察。</p><p> “量先价行”是股市里的至理名言，所以除了季线和KD值外，成交量也是观察重点，通常量缩价跌时，是进场的好时点，而“量价背离”时，则要小心市场有反转向下或持续下探的危险。</p></li></ol><h3 id="基金投资-11-戒"><a href="#基金投资-11-戒" class="headerlink" title="基金投资 11 戒"></a>基金投资 11 戒</h3><ol><li>赶流行</li><li>不论资产多寡，一律进行资产配置</li><li>崇尚品牌，只买同一家公司的基金</li><li>和基金浴血奋战，奖赏赔钱基金</li><li>惩罚让你赚钱的好基金</li><li>轻易牵手，又轻易分手</li><li>净值疑惑，对新基金莫名狂热</li><li>只买不卖</li><li>把基金当股票操作</li><li>赎回之后就让基金闲置</li><li>迷信明星基金经理人   </li></ol><h3 id="基金投资-4-原则"><a href="#基金投资-4-原则" class="headerlink" title="基金投资 4 原则"></a>基金投资 4 原则</h3><ol><li>勿以钱小而不存，节流为先</li><li>钱少不需要资产配置</li><li>增加自己的附加价值</li><li>随着年龄增长调整理财计划</li></ol><h3 id="萧老师的投资心得"><a href="#萧老师的投资心得" class="headerlink" title="萧老师的投资心得"></a>萧老师的投资心得</h3><ol><li>清出每月可扣款金额</li><li>获得第一步，挑出好基金</li><li>决定开户方式，小钱也要省</li><li>设定停利点，持续扣款，定期检视基金收益率</li><li>达到停利点，适时买回</li><li>获利金额滚入再投资</li></ol>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>定投记录表</title>
      <link href="2020/07/07/fund/%E5%AE%9A%E6%8A%95%E8%AE%B0%E5%BD%95%E8%A1%A8/"/>
      <url>2020/07/07/fund/%E5%AE%9A%E6%8A%95%E8%AE%B0%E5%BD%95%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">日期</th><th align="center">操作<br>(买/卖)</th><th align="center">交易品<br>种代码</th><th align="right">买入卖<br>出金额</th><th align="right">成交单价</th><th align="right">买入卖<br>出份额</th><th align="right">买入卖出<br>时的估值</th></tr></thead><tbody><tr><td align="center">2020-07-07</td><td align="center">买</td><td align="center">螺丝钉</td><td align="right">4000.00</td><td align="right">-</td><td align="right">-</td><td align="right">-</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>指数基金投资指南笔记二（开始定投）</title>
      <link href="2020/07/06/fund/%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%88%E5%BC%80%E5%A7%8B%E5%AE%9A%E6%8A%95%EF%BC%89/"/>
      <url>2020/07/06/fund/%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%88%E5%BC%80%E5%A7%8B%E5%AE%9A%E6%8A%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="定投的策略"><a href="#定投的策略" class="headerlink" title="定投的策略"></a>定投的策略</h2><p><em>当盈利收益率大于10%时，开始定投。当盈利收益率低于6.4%时，暂停定投。</em></p><p>我们使用盈利收益率来定投指数基金的策略是：</p><ul><li>当盈利收益率大于10%时，分批投资。</li><li>盈利收益率小于10%，但大于6.4%时，坚定持有已经买入的基 金份额。</li><li>当盈利收益率小于6.4%时，分批卖出基金。<br>（只适合于流通性比较好、盈利比较稳定的品种。国内主要是上证红利、中证红利、上 证50、基本面50、上证50AH优选、央视50、恒生指数和恒生中国企业 指数等。）</li></ul><p>盈利收益率法 + 定投（盈利稳定增长）：</p><ul><li>在盈利收益率大于10%的时候坚持定投。</li><li>盈利收益率小于10%，大于6.4%的时候暂停定投，继续持有; 可以定投其他盈利收益率大于10%的品种。</li><li>盈利收益率小于6.4%的时候卖出。</li></ul><p>博格公式法 + 定投（盈利快速增长）：</p><ul><li>在市盈率或市净率处于历史底部区域的时候坚持定投。</li><li>市盈率市净率进入正常估值，暂停定投，继续持有；可以定投其他处于底部区域的品种。</li><li>当市盈率市净率进入历史较高区域的时候卖出。</li></ul><h2 id="定期不定额"><a href="#定期不定额" class="headerlink" title="定期不定额"></a>定期不定额</h2><h3 id="定期不定额：盈利收益率法"><a href="#定期不定额：盈利收益率法" class="headerlink" title="定期不定额：盈利收益率法"></a>定期不定额：盈利收益率法</h3><p>用盈 利收益率来估值的指数基金，它的盈利收益率越高，投资价值就越高，越值得投资。所以我们可以在盈利收益率高的时候，多投入一些。</p><p>以盈利收益率首次达到10%以上(首次达到低估标准)时的投资金 额为基准。之后每个月定投的金额，可以根据下列公式来计算:</p><p>$$ 当月的定投金额 = 首次低估时的定投资金 * (\frac{当月的盈利收益率}{首次的盈利收益率})^{n} $$</p><p>来看个例子。假设我们从盈利收益率达到10%的时候开始定投，初 始定投的金额为每月1 000元，n为1。这样到了第二个月，我们发现盈利收益率达到12.5%了，指数基金投资价值变高了，我们应该多投入一些资金。</p><p>使用定期不定额公式来计算：</p><p>$$ 当月的定投金额 = 1000 * (\frac{12.5 %}{10 %})^{1} $$</p><p>也就是说，这个月的定投金额为1 250元，比初始的1 000元要高一些。这样我们就做到盈利收益率越高，买入越多了。用这种定期不定额的投资方式，可以帮助我们在相对低估的时候买入更多，相应地，在估值稍高的时候则会买入更少。</p><h3 id="定期不定额：博格公式法"><a href="#定期不定额：博格公式法" class="headerlink" title="定期不定额：博格公式法"></a>定期不定额：博格公式法</h3><p>博格公式使用的数据是市盈率，当市盈率越小的时候，指数基金的投资价值越大；博格公式的变种使用的数据是市净率，市净率越小的时候，指数基金的投资价值越大。</p><p>所以使用博格公式进行投资时，每月定投的金额可以用以下的公式这样来计算：</p><p>$$ 当月的定投金额 = 首次低估时的定投资金 * (\frac{首次的市盈率}{当月的市盈率})^{n} $$</p><p>所以使用博格公式的变种进行投资时，每月定投的金额可以用以下的公式这样来计算：</p><p>$$ 当月的定投金额 = 首次低估时的定投资金 * (\frac{首次的市净率}{当月的市净率})^{n} $$</p><p>在这些公式里都有一个n，它就是定投收益的放大器，对进一步提升我们定投的收益，起着很重要的作用。所谓放大，很好理解，即 n 越大，收益会相对越高。只要普通定期定额的定投是盈利的，那么 n 就能放大我们的收益。</p><p>定投放大器n，能够放大我们的投资收益，但是对资金的需求量会随着n的增大而越来越高，而且这种增高是呈几何倍数增长的。n的数值越大，当指数基金越低估时，要求投入的资金量就越多，因此投资者要量力而行，设置适合自己的放大器，根据自己能够承 受的资金额度来设定n的取值。从我的经验来看，设置n=1，效果就已 经不错了。有条件的、资金比较多的朋友，可以设置n=2，也就足够了。</p><h2 id="构建定投计划"><a href="#构建定投计划" class="headerlink" title="构建定投计划"></a>构建定投计划</h2><p>首先，我们可以选择自己比较熟悉的方式去投资这些指数基金，比如从银行买，用网络平台买，或是开股票账户来买等。把定投需要的账户开通好。第五章介绍过场内和场外投资指数基金的渠道和操作步骤。</p><p>其次，确定自己每月定投的时间和频率，比如，选择在发工资之后的第1个交易日进行定投。频率上，按周定投或者按月定投效果相似，选择适合自己的方式就好。</p><p>最后，计划中要把定投所遵循的定投策略，包括什么时候定投、什么时候持有、什么时候卖出，都详细地列出来，只有这样，一份完整的计划才能落实在纸面上，帮助我们在以后的执行过程中严格遵守，避免受到主观情绪的干扰。</p><p><strong><font color="#f40">为父母构建养老定投计划、为自己构建加薪定投计划、为子女构建教育定投计划。</font></strong></p><p>每次想卖出手里的指数基金时，问问自己:手里的指数基金有没有过于昂贵?如果我卖了它，是不是因为有更好的选择？</p><p>格雷厄姆的策略虽然简单，但是对人的心理素质要求较高。很多时候需要我们摒弃内心的心理干扰，像一个机器人一样去一丝不苟地执行计划，面对恐慌和贪婪也岿然不动。这一点很少有人能做到，这也是为什么我们需要将计划一一列出，落实在纸面上，这样才能保证自己不会被主观情绪干扰。</p><h2 id="定期检查优化"><a href="#定期检查优化" class="headerlink" title="定期检查优化"></a>定期检查优化</h2><p>为了做好计划的优化，在定投的时候需要我们做好定投记录，方便以后进行总结和回顾。定投记录一般包括定投指数基金的日期、指数基金的品种、操作(买或卖)、指数基金的价格、估值等信息。在定投日期一栏，还可以预先把每个月定投的时间写上，这样可以提醒、督促自己按计划来坚持执行，避免受到主观情绪的影响。</p><p>计划制订好之后，要能把这个计划给别人讲明白，讲解的内容要包括什么是指数基金、指数基金有哪些优势、为什么这样制订定投计划、依据是什么等。一套知识体系，只是看完能掌握10%的内容；看完又去实践，能掌握50%的内容；能给别人讲明白，才算是基本都掌握了。另外，给别人讲述的过程中，也能够帮助我们对自己的定投计划查漏补缺。</p><p>附1：</p><center><b>定投计划表</b></center><ol><li><p>梳理现金流<br>a. 我的家庭月收入是 __ 元，家庭月开支是 __ 元。每个月剩余资金 __ 元(剩余资金=月收入-月开支)。<br>b. 每个月的剩余资金 __ ，我打算拿出 __ % 的比例来定投 (一般50%比较合适)，也就是说，每个月我能用来定投指数基金的资金是 __ 元。</p></li><li><p>选择适合定投的指数基金<br>通过 □公众号或者 □指数网站，查找出当前处于低估、适合定投的指数基金有 __ 只，分别是：__ 。<br>□ 我的每月定投资金少于1 000元，可以选1只，我选择 __ ；<br>□ 我的每月定投资金在1000 ~ 3000元或以上，可以选2~3只，我选择 __ ，每只指数基金的定投金额分别为 __ 。</p></li><li><p>构建定投计划<br>a. 寻找适合自己的定投渠道<br>□ 我有过经验，熟悉场内操作，可以从场内入手， 券商 __ 是，使用的股票交易软件是 __ 。<br>□ 我是新人，刚开始接触定投，可以从场外开始入手，选择场外的定投平台是 __ 。<br>b. 确定每月的定投日期<br>我选择每月 __ 日作为定投日进行定投，原因是(比如这是每月发工资后的第一天)，将本月定投资金投入到低估值指数基金 上。<br>c. 列出投资策略<br>我的投资策略是：<br>在指数基金低估的时候，坚持每月定投。在指数基金恢复正常估值的时候，坚定持有基金份额。到牛市指数基金高估的时候，分批卖出获利。</p></li><li><p>做好定投记录<br>在记录定投信息的时候，主要需要记录的是：定投的时间、定投的操作（买/卖）、定投买入或卖出的品种、定投买入或卖出的总金额、成交的基金份额数量、买入或卖出的估值。可制作 <a href="https://liangxinwei.github.io/2020/07/07/other/%E5%AE%9A%E6%8A%95%E8%AE%B0%E5%BD%95%E8%A1%A8/">定投记录表</a>。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>指数基金投资指南笔记一（概念及常见基金）</title>
      <link href="2020/07/06/fund/%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%9F%BA%E9%87%91%EF%BC%89/"/>
      <url>2020/07/06/fund/%E6%8C%87%E6%95%B0%E5%9F%BA%E9%87%91%E6%8A%95%E8%B5%84%E6%8C%87%E5%8D%97%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%88%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%B8%B8%E8%A7%81%E5%9F%BA%E9%87%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>投资指数基金的核心：<strong>用价值投资的理念挑选出值得投资的指数基金，再用定投的方式去投资它。</strong></p><p>价格与价值的关系、能力圈，以及安全边际：</p><ol><li>价格与价值的关系：股票有其内在价值，股票的价格围绕其内在价值上下波动。</li><li>能力圈：要求我们对所投资的品种非常了解，能判断出它大致的内在价值是多少，而不是什么热门投资什么。</li><li>安全边际：在投资的时候，我们需要判断一下，当前股价与股票内在价值之间的关系。我们要用比价值更低的价格去买股票。</li></ol><p>场内基金在证券交易所上市，可以有“申购赎回”和“买入卖出”两套交易体系，其中买入卖出方式需要在证券交易所中进行，是通过股票交易软件来操作的。如果基金没有在证券交易所上市，那就是场外基金，它只有“申购赎回”一种交易方式。</p><h2 id="常见指数基金品种"><a href="#常见指数基金品种" class="headerlink" title="常见指数基金品种"></a>常见指数基金品种</h2><p>指数是一个选股规则，它的目的是按照某个规则挑选出一篮子股票，并反映这一篮子股票的平均价格走势。指数基金追踪指数，完全按照指数的选股规则去买入完全一样的一篮子股票。指数基金有三个独特的好处：长生不老、长期上涨、成本低。指数基金是最适合普通投资者的投资品种。</p><h2 id="指数基金的分类"><a href="#指数基金的分类" class="headerlink" title="指数基金的分类"></a>指数基金的分类</h2><ol><li>按投资的行业上区分，指数基金可以分为宽基和行业指数基金：</li></ol><ul><li>常见宽基指数基金（指数在挑选股票的时候，并不限制投资哪些行业）<br>上证50、沪深300、中证500、创业 板、红利、基本面、央视50、恒生、H股、上证50AH优选、纳斯达克 100、标普500等。</li><li>常见的行业指数基金（指数在挑选股票的时候，会要求只投资 哪些行业的股票）<br>必需消费行业的指数基金、医药行业的指数基金、可选消费行业的指数基金、养老产业的指数基金、 银行业的指数基金、证券业的指数基金、保险行业的指数基金、金融行业的指数基金、地产行业的指数基金等。</li></ul><ol start="2"><li>按照投资方向，基金可以分为：股票基金、债券基金、混合基金、货币基金。</li><li>按照投资理念，基金可以分为：主动型基金（基金经理来选择股票，并且决定股票的买入卖出）、被动型基金（其基金经理不参与选股，而是根据某一个既定的规则来挑选股票、买入卖出）。</li><li>按照销售渠道，基金可以分为：场内基金、场外基金。</li><li>按照募集对象，基金可以分为：公募基金、私募基金。</li><li>按照基金是否开放，基金可以分为：开放式基金，封闭式基金。</li></ol><h3 id="宽基指数基"><a href="#宽基指数基" class="headerlink" title="宽基指数基"></a>宽基指数基</h3><h4 id="上证50指数"><a href="#上证50指数" class="headerlink" title="上证50指数"></a>上证50指数</h4><blockquote><p>上证50指数是从上交所挑选沪市规模最大、流动性好、最具代表性的50只股票组成样本股，以综合反映沪市最具影响力的一批优质大盘企业的整体状况。这些股票基本都是关乎国计民生的大公司，一般是国家控股或在对应的行业里是数一数二的龙头公司。这种大公司也被称为蓝筹股。蓝筹这个词来自西方赌场。在西方赌场里，一般有三种颜色的筹码，其中蓝色筹码最为值钱。后来就用蓝筹股，代表规模较大、有较大影响力的公司。上证50并不是一个投资市场整体的指数，它更多的是投资大盘股。</p></blockquote><p>特点：</p><ol><li>以大盘股为主。</li><li>只有上交所的股票，没有深交所的股票。</li><li>以大盘股为主。</li></ol><h4 id="沪深300指数"><a href="#沪深300指数" class="headerlink" title="沪深300指数"></a>沪深300指数</h4><blockquote><p>沪深300指数(简称沪深300)是由中证指数公司开发的，从上交所 和深交所挑选规模最大、流动性最好的300只股票。它的成份股数目比 上证50多，也都是以大公司为主。沪深300指数所包括的公司，从市值规模上来说，占到国内股市全部规模的60%以上，比较有代表性，所以沪深300也被认为是国内股市最具代表性的指数。</p></blockquote><p>特点：</p><ol><li>以大盘股为主，兼顾上海和深圳上市公司。</li></ol><h4 id="中证500指数"><a href="#中证500指数" class="headerlink" title="中证500指数"></a>中证500指数</h4><blockquote><p>将全部沪深300指数的300家公司排除，然后将最近一年日均总市值排名前300名的企业也排除，这样可以最大限度地避免选入大公司。在剩下的公司中，选择日均总市值排名前500名的企业，这就是中证500指数。中证500指数跟沪深300没有重合，是国内中型公司的代表。</p></blockquote><p>特点：</p><ol><li>以中型上市公司为主，从定位上，它与沪深300和上证50重合度很低。</li></ol><h4 id="创业板指数"><a href="#创业板指数" class="headerlink" title="创业板指数"></a>创业板指数</h4><blockquote><p>创业板相关的指数有两个，一个是创业板综指，另一个是创业板指数。创业板综指是为了衡量创业板所有上市公司的股价平均表现而设立的，代码是399102。它包括创业板全部的500多家企业。而创业板指数是为了衡量创业板最主要的100家企业的平均表现而设立的，代码是399006。创业板指数限制了成份股的数量，只从创业板上市公司中，挑选出规模最大、流动性最好的100只股票。</p></blockquote><p>特点：</p><ol><li>创业板指数整体公司规模较小，属于以中小型公司为主的指数。并且这些公司大多盈利没有进入稳定期，所以创业板的整体盈利数字比较 低；公司开展新业务也更容易导致盈利大起大落。小公司+盈利没有进入稳定期，创业板指数相比之前介绍的指数，更容易暴涨暴跌，投资时要有心理准备。</li></ol><h4 id="红利指数"><a href="#红利指数" class="headerlink" title="红利指数"></a>红利指数</h4><blockquote><p>我们都知道股票是会发放股息的，也就是现金分红业绩比较好的公司，会每年从净利润中拿出一部分，以现金分红的形式回馈股东。这就是股票的现金分红，也叫股息。有研究表明，能实现高现金分红的股票，长期持有的平均收益率高于现金分红低的股票。这也很好理解，因为能够长期发放高现金分红，至少就能够说明企业的盈利和财务状况良好。所以我们可以通过持有几十只现金分红最高的股票，来获取更高的 收益。这就是红利指数的来源。</p></blockquote><p>特点：</p><ol><li>高股息率，在熊市更有优势。</li><li>能持续发放现金股息的公司，盈利能力和财务健康状况 好的概率越高。</li><li>提供分红现金流。</li></ol><h5 id="上证红利指数"><a href="#上证红利指数" class="headerlink" title="上证红利指数"></a>上证红利指数</h5><blockquote><p>最老牌的一个红利指数，也是非常出名的一个红利指数。这个指数挑选了上交所过去两年平均现金股息率最高的50只股票，指数代码为 000015。A股的第一个红利指数基金就是围绕上证红利指数开发的。</p></blockquote><p>特点：</p><ol><li>以大盘股为主。</li></ol><h5 id="中证红利指数"><a href="#中证红利指数" class="headerlink" title="中证红利指数"></a>中证红利指数</h5><blockquote><p>中证红利指数由中证指数公司编制，同时从上交所和深交所挑选过去两年平均现金股息率最高的股票，成份股数量扩大到100只。</p></blockquote><h5 id="深证红利指数"><a href="#深证红利指数" class="headerlink" title="深证红利指数"></a>深证红利指数</h5><blockquote><p>深证红利指数与上证红利指数对应，专门投资深交所的高现金股息率的股票，不过成份股只有40只。</p></blockquote><h5 id="红利机会指数"><a href="#红利机会指数" class="headerlink" title="红利机会指数"></a>红利机会指数</h5><blockquote><p>这是标普公司围绕A股开发的红利指数。红利机会指数在传统红利指数的基础上增加了一些筛选条件。传统的红利指数，一般只是挑选高股息率的股票，没有其他的要求。但是红利机会指数有3个要求:过去3年盈利增长必须为正；过去12 个月的净利润必须为正；每只股票权重不超过3%，单个行业不超过 33%。这样筛选出来的股票，长期分红能力会更强。另外盈利增速高也会带来更好的收益。</p></blockquote><h4 id="基本面指数"><a href="#基本面指数" class="headerlink" title="基本面指数"></a>基本面指数</h4><blockquote><p>基本面覆盖了一个公司的运营的各 个方面，比如说营业收入、现金流、净资产、分红等。通过基本面来选 股，也就是说，谁的基本面更好，谁占的权重更高。目前一般从4个维度去 衡量:营业收入，现金流，净资产和分红。而基本面指数也正是从这4 个维度去挑选股票的。</p></blockquote><h5 id="中证基本面50指数"><a href="#中证基本面50指数" class="headerlink" title="中证基本面50指数"></a>中证基本面50指数</h5><blockquote><p>按照4个基本面指标，挑选出综合排名前50的公司。具体来说，是从上市公司过去5年的年报数据中，计算4个基本面指标。</p><ul><li>营业收入：公司过去5年营业收入的平均值。</li><li>现金流：公司过去5年现金流的平均值。</li><li>净资产：公司在定期调整时的净资产。</li><li>分红：公司过去5年分红总额的平均值。</li></ul></blockquote><p>特点：</p><ol><li>这种按照占总规模百分比来排名得分的方式，很明显公司规模越大，越占优势。所以基本面50指数挑选出来的，往往也是大盘股。从定位上来说，基本面50指数跟上证50指数很相似。不过因为它综合考虑了 收入、盈利、净资产等基本面因素，所以挑选股票时会考虑得更全面一些。</li></ol><h4 id="港股指数基金"><a href="#港股指数基金" class="headerlink" title="港股指数基金"></a>港股指数基金</h4><blockquote><p>而投资于中国香港、美国等市场的基金品种，我们把它们称为 QDII 基金。QDII的意思是合格境内机构投资者。我们可以把这种基金理解成一种“代购”。这些境外市场用的都是非人民币交易，所以可以在一定程度上抵御 人民币汇率风险。如果人民币相对美元贬值，将人民币换为美元资产可以分散这种风险。但反过来，如果人民币 相对美元升值，持有美元资产也会受到损失。这是一把双刃剑。</p></blockquote><h5 id="恒生指数"><a href="#恒生指数" class="headerlink" title="恒生指数"></a>恒生指数</h5><blockquote><p>恒生指数投资的是所有在中国香港上市的公司中规模最大的50家企业。</p></blockquote><p>特点：</p><ol><li>历史悠久，成熟开放。</li><li>跟内地紧密相关，但投资者以境外投资者为主。</li><li>“老千股”导致个股投资风险巨大，普通投资者投资港股的最好方式——港股指数基金。</li><li>历史悠久，成熟开放。</li></ol><h4 id="H股指数"><a href="#H股指数" class="headerlink" title="H股指数"></a>H股指数</h4><blockquote><p>如果一家公司在内地注册，但是在香港地区上市，这样的公司就是H股了。内地公司到香港上市的有很多，从1993年青岛啤酒到香港上市至今，已经有160多家企业到香港上市。为了衡量这些公司股票的表现，恒生指数公司编制了恒生中国企业指数，也就是通常说的国企指数，简称为H股指数。</p></blockquote><p>特点：</p><ol><li>内地公司在境外的“代言人”。</li><li>与内地经济紧密相关，但仍然是以境外投资者为主。</li><li>H股与A股指数的亲密关系。</li></ol><h4 id="纳斯达克100指数"><a href="#纳斯达克100指数" class="headerlink" title="纳斯达克100指数"></a>纳斯达克100指数</h4><blockquote><p>投资的是纳斯达克规模最大的100家大型企业。</p></blockquote><h4 id="标普500指数"><a href="#标普500指数" class="headerlink" title="标普500指数"></a>标普500指数</h4><blockquote><p>标普500指数是美国影响力最大的一个股票指数，是美国传统经济的代表，定位上类似于国内的沪深300指数。不过要想入选标普500，得是一个行业排在前面的领导者。所以标普500是一个附带主观判断的蓝筹股指数，有些类似于前面提到过的由 专家选股的央视50指数。标普500指数倾向于选择行业的领导者、长期盈利更好的公司。</p></blockquote><h4 id="上证综指"><a href="#上证综指" class="headerlink" title="上证综指"></a>上证综指</h4><blockquote><p>上证综指是国内历史最悠久的一个指数，指数代码为000001。从这个代码也可以看出它的重要性。我们平时在新闻里听到的上证3000点、 6000点，其实说的就是这个上证综指。综指指的是综合指数，上证综指包括了上交所全部的上市公司，目的是反映上交所所有股票的走势。</p></blockquote><h3 id="行业指数基金"><a href="#行业指数基金" class="headerlink" title="行业指数基金"></a>行业指数基金</h3><h4 id="目前必需消费行业的指数主要是以下4只："><a href="#目前必需消费行业的指数主要是以下4只：" class="headerlink" title="目前必需消费行业的指数主要是以下4只："></a>目前必需消费行业的指数主要是以下4只：</h4><ul><li>上证消费指数：从上交所挑选必需消费行业公司。</li><li>上证消费80指数：从上交所挑选80家规模最大的必需消费行业公司。</li><li>中证消费指数：从中证800，即沪深300和中证500中挑选必需消费行业公司。</li><li>全指消费指数：从所有上市公司中挑选必需消费行业公司，覆盖范围最广。</li></ul><h4 id="医药行业的指数主要有以下几种"><a href="#医药行业的指数主要有以下几种" class="headerlink" title="医药行业的指数主要有以下几种:"></a>医药行业的指数主要有以下几种:</h4><ul><li>中证医药指数：又称中证800医药指数，是从中证800指数中挑选医药行业。</li><li>中证医药100指数：挑选了100家大型医药股，每只股票买入相同的金额。</li><li>上证医药指数：只投资上交所的医药行业公司。</li><li>全指医药指数：从整个A股中挑选医药行业，它覆盖的医药公司是最全的。</li><li>细分医药指数：挑选了医药行业细分领域的主要公司。 </li><li>300医药指数：挑选了沪深300指数里的医药行业公司。</li><li>500医药指数：挑选了中证500指数里的医药行业公司。</li></ul><h4 id="可选消费有如下几个特点："><a href="#可选消费有如下几个特点：" class="headerlink" title="可选消费有如下几个特点："></a>可选消费有如下几个特点：</h4><ol><li>需求比必需消费弱，有一定周期性。</li><li>受益于人口红利，特别是人均消费金额的提升。</li><li>可选消费的升级换代特性。</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="什么是联接基金？"><a href="#什么是联接基金？" class="headerlink" title="什么是联接基金？"></a>什么是联接基金？</h3><p>联接基金是基金公司开发的特殊品种。场内基金投资需要开股票账户，具体操作在步骤上也比较麻烦，也没有自动定投的功能。所以基金公司就开发了一个联接基金，方便从场外来投资。</p><p>联接基金是一种场外基金，通过申购赎回来交易。但它并不直接投 资股票，而是通过投资对应的场内指数基金来实现复制指数的目的，也是指数基金的一种。</p><p>很多基金公司成立ETF基金(交易型开放式指数基金)的时候，大多数也会成立对应的ETF联接基金。ETF联接基金是投资到对应的ETF基金上的，一般不会再单独收取基金管理费，因为ETF已经收取了基金管理费，若再对ETF联接基金收取费用则会导致双重收费。所以联接基金不再单独收费，整体费率跟对应的ETF基金一样。</p><h3 id="什么是市值加权、策略加权"><a href="#什么是市值加权、策略加权" class="headerlink" title="什么是市值加权、策略加权?"></a>什么是市值加权、策略加权?</h3><p>市值加权比较好理解，就是股票规模越大，权重越高。<br>例如一只指数包含50只股票，总市值2万亿，其中有一只市值1 000亿，另一只800亿。那1000亿市值的股票，在这个指数中占比就是5%；而800亿的股票，在这个指数中占比就是4%。这个4%、5%就是权重，这就是市值加权。</p><p>而策略加权，则是按照别的方式来决定个股权重。<br>例如红利指数，就是按照股息率来决定权重，哪个股票的股息率越高，这个股票的权重就越大。所以有的股票市值规模虽然小，但股息率高，可能在红利指数中占比反而更高一些。</p><h3 id="什么是等权重指数呢"><a href="#什么是等权重指数呢" class="headerlink" title="什么是等权重指数呢?"></a>什么是等权重指数呢?</h3><p>像上证50指数、沪深300指数等是市值加权的指数，也就是按照市 值规模来挑选股票，谁市值越大谁占的权重就越高。而红利指数是根据 股息率加权的指数，股息率越高所占的权重就越大。</p><p>而等权重指数则是分配给每个成份股完全相同的权重。</p><p>开始的时候每个成份股都是相同的权重，但是由于各个成份股的涨 跌幅度和速度都不同，就导致一段时间后它们的权重也不同了。所以等权重指数一般每隔一段时间会强制再平衡一次，一般是一年一次。</p><p>这种指数的好处是避免了部分股票在指数中的占比过高。有的指数中，部分成份股占比比较高，几个成份股就占据了指数40%~50%的权重，这样相当于指数的成份股被某几只股票“绑架了”，而等权重指数是最分散的一种指数，每个成份股都是均匀买入的。</p><p>不过，等权重指数也有缺点，就是流动性比较差，它的流动性取决于流动性最差的那个成份股。所以等权重指数基金的规模天生受限，主要是一些小型指数基金采用。</p><h3 id="什么是港股通"><a href="#什么是港股通" class="headerlink" title="什么是港股通?"></a>什么是港股通?</h3><p>港股通是互联互通的一部分，也是中国金融业的一次大创新。在港股通之前，境外投资者很难直接投资A股市场，内地投资者想要走出去也困难重重。港股通于2014年成立，开通港股通后，个人投资者可以很方便地投 资中国香港股票市场的股票。港股通初期以恒生指数和恒生中国企业指 数的成份股为主，因为这些指数的成份股相对可靠，遇到风险的概率较小，后期也逐渐扩展到香港中小盘股。基金公司也通过港股通，成立了很多投资中国香港股票市场的基金品种。</p><h3 id="常见的估值指标"><a href="#常见的估值指标" class="headerlink" title="常见的估值指标"></a>常见的估值指标</h3><ol><li><p>市盈率（公司市值/公司盈利，即 PE=P/E，其中P代表公司市值，E代表公司盈利）</p><blockquote><p>市盈率背后的信息：</p><ol><li>市盈率反映了我们愿意为获取1元的净利润付出多少代价。<br>例如某个公司的市盈率是10，就代表我们愿意为这个公司的1元盈利付出10元。</li><li>估算市值。<br>一个公司一年赚100亿元净利润，市盈率是10，其市值就是1000亿元。</li><li>市盈率的适用范围:流通性好、盈利稳定的品种。<br>应用市盈率的前提<ol><li>流通性好</li><li>盈利稳定</li></ol></li></ol></blockquote></li><li><p>盈利收益率</p><blockquote><p>盈利收益率是市盈率的变种。市盈率是用公司市值除以盈利，而盈利收益率则是用公司盈利除以公司市值。也就是盈利收益率=E/P。它所代表的意义是，假如我们把一家公司全部买下来，这家公司一年的盈利能够带给我们的收益率，就是盈利收益率。</p><p>盈利收益率也是有适用条件的，市盈率所要求的流通性好、盈利稳定，盈利收益率也同样要求。</p></blockquote></li><li><p>市净率</p><blockquote><p>市净率指的是每股股价与每股净资产的比率，也就是我们说的账面价值。市净率的定义是：PB=P/B(其中P代表公司市值，B代表公司净资产)。 </p><p>影响市净率的因素有哪些?</p><ol><li>企业运作资产的效率：ROE（净利润 / 净资产），ROE越高的企业，资产运作效率越高，市净率也就越高。</li><li>资产的价值稳定性。资产价值越稳定，市净率的有效性越高。</li><li>无形资产。</li><li>负债大增或亏损。</li></ol><p>当企业的资产大多是比较容易衡量价值的有 形资产，并且是长期保值的资产时，比较适合用市净率来估值。比如 前文介绍的强周期性行业的指数基金，它们的盈利不稳定或盈利呈周期 性变化，因此市盈率和盈利收益率都无法用在它们上面，但可以用市净 率来估值。像证券、航空、航运、能源等都很适合用市净率估值。</p></blockquote></li><li><p>股息率</p><blockquote><p>股息，是投资者在不减少所持有的股权资产的前提下，仍然可以直接分享企业业绩增长的最佳方式。我们都知道，有的股票是会分红的。如果我们用过去一年，公司的现金分红除以公司的市值，得到的就是股息率了。股息率衡量的，就是现金分红的收益率。</p></blockquote></li></ol><h3 id="股息率、分红率"><a href="#股息率、分红率" class="headerlink" title="股息率、分红率"></a>股息率、分红率</h3><p>股息率、分红率这两个概念很像，但实际上是不同的。分红率也叫 作派息率、分红比例。</p><p>简单来说，股息率是企业过去一年的现金派息额除以公司的总市值，而分红率是企业过去一年的现金派息额除以公司的总净利润。这两 个比率，分子一样，但是分母一个是公司市值，一个是公司当年净利润。(当然细节上还有一些不同，例如分红还要扣税等，但大体上可以 这么理解。)</p><p>分红率一般是公司预先就设置好了，并且连续多年都不会有什么改变。而股息率则会随着股价波动：股价越低，股息率就越高。</p><p>股息率和盈利收益率之间有很大的关系。股息率=股息/市值，而盈利收益率=盈利/市值，分红率=股息/盈利，所以股息率=盈利收益 率*分红率。分红率往往在很长时间里都不会变。所以对同一个指数来说，往往盈利收益率高的时候，也是股息率高的时候。这就是盈利收益率与股息率之间的关系。</p><p>我们发现绝大多数指数基金，假如选择在盈利收益率高的时候开始定投，长期收益会相当不错；反之如果在盈利收益率低的时候开始定投，长期收益会很一般。</p><p>有三个因素直接影响了我们投资指数基金的收益：第一个是初始投资时刻指数基金的股息率，它影响了我们的分红收益；第二个是投资期内指数基金的市盈率变化；第三个是投资期内指数基金的盈利增长率；最后这两项影响我们的资本利得收益。</p><p><em>指数基金未来的年复合收益率，等于指数基金的投资初期股息率，加上指数基金每年的市盈率变化率，再加上指数基金的每年的盈利变化率。</em></p>]]></content>
      
      
      <categories>
          
          <category> fund </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS世界笔记一：流、元素与基本尺寸</title>
      <link href="2020/06/26/css/CSS%E4%B8%96%E7%95%8C%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E6%B5%81%E3%80%81%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%B0%BA%E5%AF%B8/"/>
      <url>2020/06/26/css/CSS%E4%B8%96%E7%95%8C%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E6%B5%81%E3%80%81%E5%85%83%E7%B4%A0%E4%B8%8E%E5%9F%BA%E6%9C%AC%E5%B0%BA%E5%AF%B8/</url>
      
        <content type="html"><![CDATA[<h2 id="块级元素"><a href="#块级元素" class="headerlink" title="块级元素"></a>块级元素</h2><p>块级元素对应的英文是 block-level element，常见的块级元素有 <code>&lt;div&gt;、&lt;li&gt;和&lt;table&gt;</code> 等。需要注意是，块级元素和 <code>display</code> 为 <code>block</code> 的元素”不是一个概念。例如，<code>&lt;li&gt;</code>元 素默认的 <code>display</code> 值是 <code>list-item</code>，<code>&lt;table&gt;</code>元素默认的 <code>display</code> 值是 <code>table</code>，但是它们 均是块级元素，因为它们都符合块级元素的基本特征，也就是一个水平流上只能单独显示一 个元素，多个块级元素则换行显示。正是由于块级元素具有换行特性，因此理论上它都可以配合 clear 属性来清除浮动 带来的影响。例如:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    display: table; // 也可以是 block，或者是 list-item</span><br><span class="line">    <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="深藏不露的-width-auto"><a href="#深藏不露的-width-auto" class="headerlink" title="深藏不露的 width:auto"></a>深藏不露的 width:auto</h2><p>width 的默认值是 auto，它至少包含了以下 4 种不同的宽度表现:</p><ol><li>充分利用可用空间。比方说，<div>、<p>这些元素的宽度默认是 100%于父级容器的。</p></div></li><li>收缩与包裹。典型代表就是浮动、绝对定位、inline-block 元素或 table 元素， 英文称为 shrink-to-fit，CSS3 中的 fit-content 指的就是这种宽度表现。</li><li>收缩到最小。这个最容易出现在 table-layout 为 auto 的表格中，如下图3-4：<br><img src="/images/f9ac8a81e75af.png" alt="图3-4 table-layout:auto的表格的一柱擎天现象"></li><li>超出容器限制。除非有明确的 width 相关设置，否则上面 3 种情况尺寸都不会主动超过父级容器宽度的，但是存在一些特殊情况。例如，内容很长的连续的英文和数字，或者内联元素被设置了 white-space:nowrap，则表现为“恰似一江春水向东流，流到断崖也不回头”。例如，看一下下面的 CSS 代码:<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#cd0000</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f0f3f9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p><img src="/images/5869b0247becb.png" alt="图3-5 nowrap 不换行超出容器限制"><br>子元素既保持了 inline-block 元素的收缩特性，又同时让内容宽度最大，直接无视父级容器的宽度限制。这种现象后来有了专门的属性值描述，这个属性值叫作 max-content。</p><h2 id="关于-height-100"><a href="#关于-height-100" class="headerlink" title="关于 height:100%"></a>关于 height:100%</h2><p>对于 height 属性，如果父元素height 为 auto，只要子元素在文档流中，其百分比值完全就被忽略了。例如，某小白想要在页面插入一个<div>，然后满屏显示背景图，就写了如下 CSS：</div></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* 这是多余的 */</span></span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>; <span class="comment">/* 这是无效的 */</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#d9d9d9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后他发现这个<div>高度永远是 0，哪怕其父级<body>塞满了内容也是如此。事实上，他需要如下设置才行：</body></div></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且仅仅设置<body>也是不行的，因为此时的<body>也没有具体的高度值：</body></body></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 子元素 height:100%依旧无效 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何让元素支持 height:100%效果？</p><ol><li>设定显式的高度值</li><li>使用绝对定位。例如：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>此时的 height:100% 就会有计算值，即使祖先元素的 height 计算为 auto 也是如此。 需要注意的是，绝对定位元素的百分比计算和非绝对定位元素的百分比计算是有区别的，区别 在于绝对定位的宽高百分比计算是相对于 padding box 的，也就是说会把 padding 大小值计算 在内，但是，非绝对定位元素则是相对于 content box 计算的，如下示例：</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>高度100px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box rel"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span>高度160px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#beceeb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#cd0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rel</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.rel</span> &gt; <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果图<br><img src="/images/WX20200628-094934.png" alt="图3-25 绝对定位和非绝对定位元素百分比值计算区别"></p><h2 id="任意高度元素的展开收起动画技术"><a href="#任意高度元素的展开收起动画技术" class="headerlink" title="任意高度元素的展开收起动画技术"></a>任意高度元素的展开收起动画技术</h2><p>很多时候，我们展 开的元素内容是动态的，换句话说高度是不固定的，因此，height 使用的值是默认的 auto， 应该都知道的 auto 是个关键字值，并非数值，正如 height:100%的 100%无法和 auto 相计 算一样，从 0px 到 auto 也是无法计算的，因此无法形成过渡或动画效果。</p><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"check"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>个人觉得，...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"element"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>display:table-cell其他...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check"</span> <span class="attr">class</span>=<span class="string">"check-in"</span>&gt;</span>更多↓<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"check"</span> <span class="attr">class</span>=<span class="string">"check-out"</span>&gt;</span>收起↑<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">transition</span>: max-height .<span class="number">25s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:checked</span> ~ <span class="selector-class">.element</span> &#123;</span><br><span class="line">  <span class="attribute">max-height</span>: <span class="number">666px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://demo.cssworld.cn/3/3-2.php" target="_blank" rel="noopener">点此链接查看效果</a></p><p>其中展开后的 max-height 值，我们只需要设定为保证比展开内容高度大的值就可以，因为 max-height 值比 height 计算值大的时候，元素的高度就是 height 属性的计算高度，在本交互中，也就是 height:auto 时候的高度值。于是，一个高度 不定的任意元素的展开动画效果就实现了。但是，使用此方法也有一点要注意，即虽然说从适用范围讲，max-height 值越大使用场景越多，但是，如果 max-height 值太大，在收起的时候可能会有<strong>效果延迟</strong>的问题，比方说，我们展开的元素高度是 100px，而 max-height 是 1000px，动画时间 是 250ms，假设我们动画函数是线性的，则前 225ms 我们是看不到收起效果的，因为 max-height 从 1000px 到 100px 变化这段时间，元素不会有区域被隐藏，会给人动画延迟 225ms 的感觉，相信这不是你想看到的。因此，建议 max-height 使用足够安全的最小值，这样，收起时即使有延迟，也会因为时间很短，很难被用户察觉，并不会影响体验。</p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git 更改提交信息</title>
      <link href="2020/05/26/git/Git%20%E6%9B%B4%E6%94%B9%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/"/>
      <url>2020/05/26/git/Git%20%E6%9B%B4%E6%94%B9%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<p>如果提交消息中包含不明确、不正确或敏感的信息，您可以在本地修改它，然后将含有新消息的新提交推送到 GitHub。</p><h2 id="提交尚未推送上线"><a href="#提交尚未推送上线" class="headerlink" title="提交尚未推送上线"></a>提交尚未推送上线</h2><ol><li>在命令行上，导航到包含要修改的提交的仓库。</li><li>键入 <code>git commit --amend -m &quot;new commit message&quot;</code>，然后按 Enter 键。</li></ol><h2 id="提交已经推送上线"><a href="#提交已经推送上线" class="headerlink" title="提交已经推送上线"></a>提交已经推送上线</h2><p>按上面两步操作完之后，</p><ol start="3"><li>使用 <code>push --force</code> 命令强制推送经修改的旧提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force [origin] [branch]   # 多个账户下如：git push github master</span><br></pre></td></tr></table></figure></li></ol><h2 id="修改多个提交或旧提交的消息"><a href="#修改多个提交或旧提交的消息" class="headerlink" title="修改多个提交或旧提交的消息"></a>修改多个提交或旧提交的消息</h2><p>如果需要修改多个提交或旧提交的消息，您可以使用交互式变基，然后强制推送以更改提交历史记录。</p><ol><li>在命令行上，导航到包含要修改的提交的仓库。</li><li>使用 <code>git rebase -i HEAD~n</code> 命令在默认文本编辑器中显示最近 n 个提交的列表。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3 # 显示当前分支上最后 3 次提交的列表</span><br></pre></td></tr></table></figure></li></ol><p>此列表将类似于以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">pick e499d89 Delete CNAME</span><br><span class="line">pick 0c39034 Better README</span><br><span class="line">pick f7fde4a Change the commit message but push the same commit.</span><br><span class="line"></span><br><span class="line"># Rebase 9fdb3bd..f7fde4a onto 9fdb3bd</span><br><span class="line">#</span><br><span class="line"># Commands:</span><br><span class="line"># p, pick = use commit</span><br><span class="line"># r, reword = use commit, but edit the commit message</span><br><span class="line"># e, edit = use commit, but stop for amending</span><br><span class="line"># s, squash = use commit, but meld into previous commit</span><br><span class="line"># f, fixup = like &quot;squash&quot;, but discard this commit&apos;s log message</span><br><span class="line"># x, exec = run command (the rest of the line) using shell</span><br><span class="line">#</span><br><span class="line"># These lines can be re-ordered; they are executed from top to bottom.</span><br><span class="line">#</span><br><span class="line"># If you remove a line here THAT COMMIT WILL BE LOST.</span><br><span class="line">#</span><br><span class="line"># However, if you remove everything, the rebase will be aborted.</span><br><span class="line">#</span><br><span class="line"># Note that empty commits are commented out</span><br></pre></td></tr></table></figure><ol start="3"><li><p>在要更改的每个提交消息的前面，用 <code>reword</code> 替换 <code>pick</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pick e499d89 Delete CNAME</span><br><span class="line">reword 0c39034 Better README</span><br><span class="line">reword f7fde4a Change the commit message but push the same commit.</span><br></pre></td></tr></table></figure></li><li><p>保存并关闭提交列表文件</p></li><li><p>在每个生成的提交文件中，键入新的提交消息，保存文件，然后关闭它。</p></li><li><p>强制推送修改后的提交。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --force</span><br></pre></td></tr></table></figure></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>有几个命令需要注意一下：</p><ul><li>p, pick = use commit</li><li>r, reword = use commit, but edit the commit message</li><li>e, edit = use commit, but stop for amending</li><li>s, squash = use commit, but meld into previous commit</li><li>f, fixup = like “squash”, but discard this commit’s log message</li><li>x, exec = run command (the rest of the line) using shell</li><li>d, drop = remove commit</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://help.github.com/cn/github/committing-changes-to-your-project/changing-a-commit-message#amending-older-or-multiple-commit-messages" target="_blank" rel="noopener">更改提交消息 - GitHub 帮助</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SourceTree设置多个账户</title>
      <link href="2020/04/26/git/SourceTree%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%B4%A6%E6%88%B7/"/>
      <url>2020/04/26/git/SourceTree%E8%AE%BE%E7%BD%AE%E5%A4%9A%E4%B8%AA%E8%B4%A6%E6%88%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>一台电脑同时登录两个账号：公司的 gitlab 账号，自己的 github 账号，提交的时候，分别提交对应的账号。</p><h2 id="取消git全局设置"><a href="#取消git全局设置" class="headerlink" title="取消git全局设置"></a>取消git全局设置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset user.name</span><br><span class="line">git config --global --unset user.email</span><br></pre></td></tr></table></figure><h2 id="SSH配置"><a href="#SSH配置" class="headerlink" title="SSH配置"></a>SSH配置</h2><p>1、生成 <em>gitlab</em> id_rsa 私钥、id_rsa.pub 公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;公司邮箱&quot;</span><br></pre></td></tr></table></figure><p>2、生成 <em>github</em> id_rsa 私钥、id_rsa.pub 公钥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh</span><br><span class="line">ssh-keygen -t rsa -C &quot;github邮箱&quot;  # 之后会提示输入文件名，我的是 id_rsa_github.pub</span><br></pre></td></tr></table></figure><p>3、github 添加公钥 id_rsa_github.pub（你命名的文件名）</p><p>4、添加 ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 使用 -K 可以将私钥添加到钥匙串，不用每次开机后还要再次输入这条命令了</span><br><span class="line">ssh-add -K ~/.ssh/id_rsa</span><br><span class="line">ssh-add -K ~/.ssh/id_rsa_github</span><br><span class="line"></span><br><span class="line"># 可以在添加前使用下面命令删除所有的key</span><br><span class="line">ssh-add -D</span><br><span class="line"></span><br><span class="line"># 最后可以通过下面命令，查看key的设置</span><br><span class="line">ssh-add -l</span><br></pre></td></tr></table></figure><p>5、设置 ssh config 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/.ssh/</span><br><span class="line">vim config</span><br></pre></td></tr></table></figure><p>输入以下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># gitlab</span><br><span class="line">Host gitlab</span><br><span class="line">HostName xxx.xxx.xxx（公司的 gitlab 域名，如 git.spacebox.fun）</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line"># github</span><br><span class="line">Host github</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github</span><br></pre></td></tr></table></figure><p><strong>通过如上设置，即可设置多账户。接下来，就可以愉快的玩耍啦～</strong></p><h3 id="如何新建-git-项目"><a href="#如何新建-git-项目" class="headerlink" title="如何新建 git 项目"></a>如何新建 git 项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir project &amp;&amp; cd project</span><br><span class="line">git init</span><br><span class="line">git config user.name &quot;***&quot;</span><br><span class="line">git config user.email &quot;***&quot;</span><br><span class="line"># $giturl 代表的是项目的 git clone 的 url 地址，github 即为上面设置的 Host</span><br><span class="line">git remote add github $giturl</span><br></pre></td></tr></table></figure><h3 id="如何克隆-git-项目"><a href="#如何克隆-git-项目" class="headerlink" title="如何克隆 git 项目"></a>如何克隆 git 项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git clone，github 即为上面设置的 Host</span><br><span class="line">git clone *** --origin github</span><br></pre></td></tr></table></figure><h3 id="如何设置在-SourceTree-已经存在的项目中"><a href="#如何设置在-SourceTree-已经存在的项目中" class="headerlink" title="如何设置在 SourceTree 已经存在的项目中"></a>如何设置在 SourceTree 已经存在的项目中</h3><p>1、打开右上角设置<br><img src="/images/WX20200426-121200@2x.png" alt="项目设置"><br>2、设置新的 origin<br><img src="/images/WX20200426-121304@2x.png" alt="origin"><br>3、设置 username<br><img src="/images/WX20200426-121341@2x.png" alt="username"><br>4、点击右边的刷新，通过新的 origin 拉取/提交<br><img src="/images/WX20200426-121701@2x.png" alt="拉取/提交"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://tmyam.github.io/blog/2014/05/07/duo-githubzhang-hu-she-zhi/" target="_blank" rel="noopener">一个客户端设置多个github账号 - tmyam’s blog</a></li><li><a href="https://blog.csdn.net/wzy_1988/article/details/19967465" target="_blank" rel="noopener">Git多账号登陆</a></li><li><a href="https://git-scm.com/docs/git-clone/" target="_blank" rel="noopener">Git - git-clone Documentation</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记（一）</title>
      <link href="2020/04/22/mysql/MySQL%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>2020/04/22/mysql/MySQL%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="引擎"><a href="#引擎" class="headerlink" title="引擎"></a>引擎</h2><ol><li>InnoDB 是一个可靠的事务处理引擎，它不支持全文本搜索</li><li>MEMORY在功能等同于MyISAM，但由于数据存储在内存(不是磁盘) 中，速度很快(特别适合于临时表)</li><li>MyISAM是一个性能极高的引擎，它支持全文本搜索(参见第18章)， 但不支持事务处理。</li><li>外键不能跨引擎混用引擎类型有一个大缺陷。外键(用于强制实施引用完整性)不能跨引擎，即使用一 个引擎的表不能引用具有使用不同引擎的表的外键。</li></ol><h2 id="使用-REGEXP："><a href="#使用-REGEXP：" class="headerlink" title="使用 REGEXP："></a>使用 REGEXP：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// shop_name 是测试数据，包含 --，比如 商家--1</span><br><span class="line">SELECT `shop_name` FROM business WHERE `shop_name` REHEXP &apos;--1|--2&apos;;</span><br><span class="line">SELECT `shop_name` FROM business WHERE `shop_name` REHEXP &apos;--[0-9]&apos;;</span><br></pre></td></tr></table></figure><h2 id="Concat-拼接串，即把多个串连接起来形成一个较长的串"><a href="#Concat-拼接串，即把多个串连接起来形成一个较长的串" class="headerlink" title="Concat() 拼接串，即把多个串连接起来形成一个较长的串"></a>Concat() 拼接串，即把多个串连接起来形成一个较长的串</h2><p>Trim() 删除数据多余的空格，RTrim() 函数去掉值右边的所有空格，LTrim() 去掉串左边的空格<br>常见的情景：报表中的名字按照name(location)的格式，而表中数据存储在两个列name和country中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT Concat(Trim(`shop_name`), Trim(&apos; ( &apos;), Trim(`mail_type`), &apos; )&apos;) AS format_title</span><br><span class="line">FROM business;</span><br><span class="line">// 标题--1(中通)</span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>但是拼接串它没有名字，它只是一个值，客户机没有办法引用它（一个未命名的列），解决办法是<em>别名(alias)</em>，是一个字段或值的替换名。别名用AS关键字赋予。</p><h2 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT `shop_name`, `mail_type`， `distance`, `service_time`, `service_time` * `distance` as `total_price`</span><br><span class="line">FROM business</span><br><span class="line">WHERE `mail_type` LIKE &apos;_通&apos;</span><br><span class="line">ORDER BY `distance`</span><br><span class="line">DESC;</span><br><span class="line">// 标题--9 中通 980 59 57820</span><br></pre></td></tr></table></figure><h2 id="常用的文本处理函数："><a href="#常用的文本处理函数：" class="headerlink" title="常用的文本处理函数："></a>常用的文本处理函数：</h2><ol><li>Left() 返回串左边的字符，Right() 返回串右边的字符</li><li>Length() 返回串的长度</li><li>Locate() 找出串的一个子串</li><li>Lower() 将串转换为小写，Upper() 将串转换为大写</li><li>LTrim() 去掉串左边的空格，RTrim() 去掉串右边的空格</li><li>Soundex() 返回串的SOUNDEX值（SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法，如：Y.Lee -&gt; Y.Lie，<br><code>SELECT shop_name FROM business WHERE Soundex(shop_name) = Soundex(&#39;Y.Lie&#39;)</code>）</li><li>SubString() 返回子串的字符</li></ol><h2 id="常用的日期处理函数"><a href="#常用的日期处理函数" class="headerlink" title="常用的日期处理函数"></a>常用的日期处理函数</h2><ol><li>AddDate() 增加一个日期(天、周等)</li><li>AddTime()增加一个时间(时、分等) </li><li>CurDate()返回当前日期</li><li>CurTime()返回当前时间 </li><li>Date()返回日期时间的日期部分</li><li>DateDiff()计算两个日期之差</li><li>Date_Add()高度灵活的日期运算函数</li><li>Date_Format()返回一个格式化的日期或时间串</li><li>Day()返回一个日期的天数部分</li><li>DayOfWeek()对于一个日期，返回对应的星期几</li><li>Hour()返回一个时间的小时部分</li><li>Minute()返回一个时间的分钟部分</li><li>Month()返回一个日期的月份部分 </li><li>Now()返回当前日期和时间</li><li>Second()返回一个时间的秒部分</li><li>Time()返回一个日期时间的时间部分</li><li>Year()返回一个日期的年份部分</li></ol><h2 id="聚焦函数"><a href="#聚焦函数" class="headerlink" title="聚焦函数"></a>聚焦函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-- street 的行数</span><br><span class="line">SELECT COUNT(*) AS `street_count` FROM street;</span><br><span class="line">-- 最大值</span><br><span class="line">SELECT MAX(`distance`) AS max_distance,</span><br><span class="line">-- 最小值</span><br><span class="line">MIN(`distance`) AS min_distance,</span><br><span class="line">-- 平均值</span><br><span class="line">AVG(`distance`) AS avg_distance,</span><br><span class="line">-- 所有值的和</span><br><span class="line">SUM(`distance`) AS total_distance,</span><br><span class="line">-- 所有不同值的和（去重）</span><br><span class="line">SUM(DISTINCT `distance`) AS total_distance_distinct</span><br><span class="line">FROM business;</span><br></pre></td></tr></table></figure><h2 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h2><ol><li>GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套， 为数据分组提供更细致的控制。</li><li>如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上进行汇总。换句话说，在建立分组时，指定的所有列都一起计算(所以不能从个别的列取回数据)。</li><li>GROUP BY子句中列出的每个列都必须是检索列或有效的表达式(但不能是聚集函数)。如果在SELECT中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</li><li>除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子 句中给出。</li><li>如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列 中有多行NULL值，它们将分为一组。</li><li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li><li>使用WITH ROLLUP关键字，可以得到每个分组以 及每个分组汇总级别(针对每个分组)的值<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT `mail_type`, COUNT(*) AS `num_mail_type`</span><br><span class="line">FROM `business`</span><br><span class="line">GROUP BY `mail_type`;</span><br><span class="line"></span><br><span class="line">SELECT `mail_type`, COUNT(*) AS `num_mail_type`</span><br><span class="line">FROM `business`</span><br><span class="line">GROUP BY `mail_type`</span><br><span class="line">WITH ROLLUP;</span><br></pre></td></tr></table></figure></li></ol><h2 id="HAVING和WHERE的差别"><a href="#HAVING和WHERE的差别" class="headerlink" title="HAVING和WHERE的差别:"></a>HAVING和WHERE的差别:</h2><p>WHERE过滤指定的是行而不是分组。事实上，WHERE没有分组的概念。WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重要的区别，WHERE排除的行不包括在分组中。这可能会改变计算值，从而影响HAVING子句中基于这些值过滤掉的分组。</p><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 在联结两个表时，你实际上做的是将第一个表中的每一行与第二个表中的每一行配对。</span><br><span class="line">// WHERE子句作为 过滤条件，它只包含那些匹配给定条件(这里是联结条件)的行。</span><br><span class="line">// 没有WHERE子句，第一个表中的每个行将与第二个表中的每个行配对，而不管它们逻辑上是否可以配在一起。</span><br><span class="line">SELECT p.name, c.name, d.name, s.name</span><br><span class="line">FROM `province` p, `city` c, `district` d, `street` s</span><br><span class="line">WHERE s.parent_code = d.code</span><br><span class="line">AND d.parent_code = c.code</span><br><span class="line">AND c.parent_code = p.code</span><br><span class="line">AND p.name = &apos;山西省&apos;</span><br><span class="line">ORDER BY c.name;</span><br></pre></td></tr></table></figure><h2 id="UNION操作符来组合数条SQL查询，将它们的结果组合成单个结果集。规则："><a href="#UNION操作符来组合数条SQL查询，将它们的结果组合成单个结果集。规则：" class="headerlink" title="UNION操作符来组合数条SQL查询，将它们的结果组合成单个结果集。规则："></a>UNION操作符来组合数条SQL查询，将它们的结果组合成单个结果集。规则：</h2><ol><li>UNION必须由两条或两条以上的SELECT语句组成，语句之间用关 键字UNION分隔</li><li>UNION中的每个查询必须包含相同的列、表达式或聚集函数(不过各个列不需要以相同的次序列出)。</li><li>列数据类型必须兼容:类型不必完全相同，但必须是DBMS可以隐含地转换的类型(例如，不同的数值类型或不同的日期类型)。</li><li>UNION ALL返回所有匹配行，不取消重复的行<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">// 查询 `distance` &lt; 400 ｜｜ `mail_type` IN (&apos;顺丰&apos;, &apos;圆通&apos;)</span><br><span class="line">SELECT `shop_name`, `distance`</span><br><span class="line">FROM `business`</span><br><span class="line">WHERE `distance` &lt; 400</span><br><span class="line">UNION</span><br><span class="line">SELECT `shop_name`, `distance`</span><br><span class="line">FROM `business`</span><br><span class="line">WHERE `mail_type` IN (&apos;顺丰&apos;, &apos;圆通&apos;)</span><br><span class="line">ORDER BY `distance`;</span><br></pre></td></tr></table></figure></li></ol><h2 id="更新表："><a href="#更新表：" class="headerlink" title="更新表："></a>更新表：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UPDATE `business`</span><br><span class="line">SET `service_time` = round(rand() * 100)</span><br><span class="line">WHERE `service_time` &lt; 60;</span><br></pre></td></tr></table></figure><h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM mysql.user;</span><br><span class="line">—- `hotdog`@`%`：用户名 hotdog，% 表示允许任何ip地址，IDENTIFIEDBY 指定的口令为纯文本，MySQL 将在保存到user表之前对其进行加密。</span><br><span class="line">CREATE USER `hotdog`@`%` IDENTIFIED BY ‘123456’;</span><br><span class="line">—- 配置权限：对 hotdog 数据库有所有权限，不能访问其他数据库，GRANT 的反操作为 REVOKE</span><br><span class="line">GRANT ALL PRIVILEGES ON hotdog.* TO `hotdog`@`%` IDENTIFIED BY &apos;123456&apos;;</span><br><span class="line">—- 删除用户</span><br><span class="line">DROP USER `hotdog`@`localhost`;</span><br><span class="line">—- 配置完权限之后刷新MySQL的系统权限相关表方可生效</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line">—- 删除用户</span><br><span class="line">DROP USER `username`;</span><br><span class="line">—- 查看赋予用户账号的权限</span><br><span class="line">SHOW GRANT FOR `username`;</span><br><span class="line">—- 更改口令，新口令必须传递到Password()函 数进行加密。</span><br><span class="line">SET PASSWORD FOR `username` = Password(`new_password`)</span><br></pre></td></tr></table></figure><h2 id="created-at字段与updated-at字段关于自动更新与自动插入时间戳"><a href="#created-at字段与updated-at字段关于自动更新与自动插入时间戳" class="headerlink" title="created_at字段与updated_at字段关于自动更新与自动插入时间戳"></a>created_at字段与updated_at字段关于自动更新与自动插入时间戳</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE `user` ADD COLUMN `create_at` TIMESTAMP NOT NULL;</span><br><span class="line">ALTER TABLE `user` ADD COLUMN `update_at` TIMESTAMP NOT NULL;</span><br><span class="line">—- TIMESTAMP DEFAULT CURRENT_TIMESTAMP 表示插入的时候自动获取当前时间（格式为YY-mm-dd HH:ii:ss）</span><br><span class="line">ALTER TABLE `user` MODIFY `create_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL;</span><br><span class="line">—- TIMESTAMP ON UPDATE CURRENT_TIMESTAMP 表示更新的时候自动获取当前时间（格式为YY-mm-dd HH:ii:ss）</span><br><span class="line">ALTER TABLE `user` MODIFY `update_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP NOT NULL;</span><br></pre></td></tr></table></figure><h2 id="新增外键"><a href="#新增外键" class="headerlink" title="新增外键"></a>新增外键</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER  TABLE `products` ADD CONSTRAINT `fk_orders_customs` FOREIGN KEY (vend_id) REFERENCES `vendors` (vend_id);</span><br></pre></td></tr></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><ol><li>规则和限制<ol><li>与表一样，视图必须唯一命名(不能给视图取与别的视图或表相 同的名字)。</li><li>对于可以创建的视图数目没有限制。</li><li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造一个视图。</li><li>ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也含有ORDER BY，那么该视图中的ORDER BY将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值。</li><li>视图可以和表一起使用。例如，编写一条联结表和视图的SELECT语句。</li></ol></li><li>性能问题：因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一个检索。如果你用多个联结和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</li><li>一些常见应用<ol><li>重用SQL语句。</li><li>简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节。</li><li>使用表的组成部分而不是整个表。</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ol></li></ol><h2 id="数据库维护"><a href="#数据库维护" class="headerlink" title="数据库维护"></a>数据库维护</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 1. 用来检查表键是否正确</span><br><span class="line">ANALYZE TABLE `table_name`;</span><br><span class="line">// 2. CHECK TABLE用来针对许多问题对表进行检查。在MyISAM表上还对 索引进行检查。CHECK TABLE支持一系列的用于MyISAM表的方式。 CHANGED检查自最后一次检查以来改动过的表。EXTENDED执行最 彻底的检查，FAST只检查未正常关闭的表，MEDIUM检查所有被删 除的链接并进行键检验，QUICK只进行快速扫描。如下所示，CHECK TABLE发现和修复问题</span><br><span class="line">CHECK TABLE `table_name`;</span><br><span class="line">// 3. 如果从一个表中删除大量数据，应该使用OPTIMIZE TABLE来收回所用的空间，从而优化表的性能。</span><br><span class="line">OPTIMIZE TABLE `table_name`;</span><br></pre></td></tr></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 查看所支持的字符集完整列表</span><br><span class="line">SHOW CHARACTER SET;</span><br><span class="line">// 查看所支持校对的完整列表</span><br><span class="line">SHOW COLLATION;</span><br><span class="line">SHOW FULL COLUMNS FROM `village`;</span><br><span class="line">SHOW VARIABLES LIKE &apos;%char%&apos;;</span><br></pre></td></tr></table></figure><h2 id="改善性能"><a href="#改善性能" class="headerlink" title="改善性能"></a>改善性能</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1. 但过一段时间后你可能需要调整内存分配、缓冲区大 小等。查看当前设置：</span><br><span class="line">SHOW VARIABLES;</span><br><span class="line">SHOW STATUS;</span><br><span class="line">2. 显示所有活动进程(以及它们的线程ID和执行时间)</span><br><span class="line">SHOW PROCESSLIST；</span><br><span class="line">3. KILL命令终结某个特定的进程(使用这个命令需要作为管理员登录)。</span><br><span class="line">4. LIKE很慢。一般来说，最好是使用FULLTEXT而不是LIKE。</span><br><span class="line">5. 索引改善数据检索的性能，但损害数据插入、删除和更新的性能。如果你有一些表，它们收集数据且不经常被搜索，则在有必要之前不要索引它们。(索引可根据需要添加和删除。)</span><br></pre></td></tr></table></figure><ol start="21"><li>MySQL不允许对变长列(或一个列的可变部分)进行索引</li><li>MySQL中没有专门存储货币的数据类型，一般情况下使用DECIMAL(8, 2)</li></ol><h2 id="MySQL-数据类型"><a href="#MySQL-数据类型" class="headerlink" title="MySQL 数据类型"></a>MySQL 数据类型</h2><ol><li>串数据类型<br><img src="/images/7EA9F5A0D8F1.png" alt="串数据类型"></li><li>数值数据类型<br><img src="/images/5D37349650BC.png" alt="数值数据类型"></li><li>日期和时间数据类型<br><img src="/images/5BC46C7A9A76.png" alt="日期和时间数据类型"></li><li>二进制数据类型<br><img src="/images/7058C7294EBE.png" alt="二进制数据类型"></li></ol><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><blockquote><p>想要某条语句（或某些语句）在事件发生时自动执行。MySQL响应以下任意语句而 自动执行的一条MySQL语句(或位于BEGIN和END语句之间的一组语 句):DELETE; NSERT; UPDATE。</p><p>只有表才支持触发器，每个表最多支持6个触发器（每条INSERT、UPDATE 和DELETE的之前和之后），单一触发器不能与多个事件或多个表关联。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 触发器将在INSERT语句成功执行后执行。从 NEW.order_num 取得这个值并返回它，此触发器必须按照AFTER INSERT执行</span><br><span class="line">CREATE TRIGGER `new_order` AFTER INSERT ON `orders` FOR EACH ROW SELECT NEW.order_num;</span><br><span class="line">// 删除触发器</span><br><span class="line">DROP TRIGGER `new_product`;</span><br></pre></td></tr></table></figure><ol><li><p><em>INSERT触发器</em>（在INSERT语句执行之前或之后执行）：</p><ol><li>在INSERT触发器代码内，可引用一个名为NEW的虚拟表，访问被 插入的行;</li><li>在BEFORE INSERT触发器中，NEW中的值也可以被更新(允许更改 被插入的值);</li><li>对于AUTO_INCREMENT列，NEW在INSERT执行之前包含0，在INSERT 执行之后包含新的自动生成值。</li></ol></li><li><p><em>DELETE触发器</em>（在DELETE语句执行之前或之后执行）：</p><ol><li>在DELETE触发器代码内，你可以引用一个名为OLD的虚拟表，访 问被删除的行;</li><li>OLD中的值全都是只读的，不能更新。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 在任意订单被删除前将执行此触发器。它使用一条INSERT语句将OLD中的值(要被删除的订单)</span><br><span class="line">// 保存到一个名为archive_ orders的存档表中</span><br><span class="line">CREATE TRIGGER `delete_order` BEFORE DELETE ON `orders` FOR EACH ROW</span><br><span class="line">BEGIN</span><br><span class="line">    INSERT INTO `archive_orders`(`order_num`, `order_date`, `cust_id`)</span><br><span class="line">    VALUES(OLD.order_num, OLD.order_date, OLD.cust_id);</span><br><span class="line">END;</span><br></pre></td></tr></table></figure></li></ol></li><li><p><em>UPDATE触发器</em>（在UPDATE语句执行之前或之后执行）：</p><ol><li>在UPDATE触发器代码中，你可以引用一个名为OLD的虚拟表访问 以前(UPDATE语句前)的值，引用一个名为NEW的虚拟表访问新更新的值;</li><li>在BEFORE UPDATE触发器中，NEW中的值可能也被更新(允许更改 将要用于UPDATE语句中的值);</li><li>OLD中的值全都是只读的，不能更新。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 保证州名缩写总是大写</span><br><span class="line">CREATE TRIGGER `upper_vendor` BEFORE UPDATE ON `vendors` FOR EACH ROW</span><br><span class="line">SET NEW.vend_state = Upper(NEW.vend_state);</span><br></pre></td></tr></table></figure></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020Flag</title>
      <link href="2020/01/01/other/2020Flag/"/>
      <url>2020/01/01/other/2020Flag/</url>
      
        <content type="html"><![CDATA[<h2 id="业余项目"><a href="#业余项目" class="headerlink" title="业余项目"></a>业余项目</h2><ul><li><input checked disabled type="checkbox"> Icon 独立为项目（React、Vue）各一份、便于代码复用   DDL：2020-04-30</li><li><input checked disabled type="checkbox"> 学习 TypeScript 并能有配套练习项目   DDL：2020-06-30</li><li><input checked disabled type="checkbox"> 学习 Node.js 后台并能有配套练习项目   DDL：2020-12-31，2020-06-30 完成 70%</li><li><input checked disabled type="checkbox"> 学习 MySQL 并能有配套练习项目   DDL：2020-12-31，2020-06-30 完成 70%</li></ul><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p>技术书籍、设计书籍、产品书籍，DDL：2020-12-31 一个月一本</p><p>计算机</p><ul><li><input checked disabled type="checkbox"> Node.js高级编程</li><li><input disabled type="checkbox"> CSS世界</li><li><input disabled type="checkbox"> 计算机网络</li><li><input disabled type="checkbox"> 软件工程</li><li><input disabled type="checkbox"> Linux+Shell编程从入门到精通（第2版）<font color="#f40">（进行中）</font></li><li><input disabled type="checkbox"> 正则指引</li></ul><p>设计</p><ul><li><input checked disabled type="checkbox"> 简约至上</li><li><input checked disabled type="checkbox"> dont make me think</li><li><input disabled type="checkbox"> 写给大家看的设计书</li><li><input disabled type="checkbox"> 点石成金</li><li><input disabled type="checkbox"> 启示录：打造用户喜爱的产品</li></ul><p>产品</p><ul><li><input disabled type="checkbox"> 《幕后产品》王诗沐</li><li><input disabled type="checkbox"> 《有效需求分析》徐锋</li></ul><p>理财</p><ul><li><input checked disabled type="checkbox"> 指数基金投资指南</li><li><input checked disabled type="checkbox"> 定投十年财务自由-银行螺丝钉</li><li><input checked disabled type="checkbox"> 买基金为自己加薪</li><li><input checked disabled type="checkbox"> 理财不用懂太多</li><li><input disabled type="checkbox"> 手把手教你读财报 唐朝</li><li><input disabled type="checkbox"> 投资第一课<font color="#f40">（进行中）</font></li><li><input disabled type="checkbox"> 期权期货及其他衍生产品第七版本</li><li><input disabled type="checkbox"> 一个投资家的20年</li></ul><p>其他</p><ul><li><input disabled type="checkbox"> 区块链技术指南</li><li><input disabled type="checkbox"> 图解物联网</li><li><input disabled type="checkbox"> 创业维艰-如何完成比难更难的事</li><li><input disabled type="checkbox"> 大败局</li><li><input disabled type="checkbox"> 史蒂夫·乔布斯传</li><li><input disabled type="checkbox"> 史玉柱自述： 我的营销心得</li><li><input disabled type="checkbox"> 参与感</li><li><input disabled type="checkbox"> 创业小败局</li><li><input disabled type="checkbox"> 从0到1</li><li><input disabled type="checkbox"> 从为什么开始乔布斯让APPLE红遍世界的黄金圈法则</li><li><input disabled type="checkbox"> 海底捞你学不会</li><li><input disabled type="checkbox"> 黑客与画家</li><li><input disabled type="checkbox"> 基业长青珍藏版</li><li><input disabled type="checkbox"> 精益创业 美 埃里克 莱斯</li><li><input disabled type="checkbox"> 商业模式新生代</li><li><input disabled type="checkbox"> 商战</li><li><input disabled type="checkbox"> 原则</li><li><input disabled type="checkbox"> 重来_更为简单有效的商业思维 - 贾森•弗里德</li><li><input disabled type="checkbox"> 卓有成效的管理者</li></ul><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li><input checked disabled type="checkbox"> 搭建自己的GitHub Pages博客</li><li><input disabled type="checkbox"> 练字，达到字迹美观工整、笔力苍劲<font color="#f40">（进行中）</font></li><li><input disabled type="checkbox"> 读一些哲学方面的书</li><li><input disabled type="checkbox"> 健身，年中能有8块腹肌</li><li><input disabled type="checkbox"> 学英语，单词量20000，不看字母能听懂英文电影<font color="#f40">（进行中）</font></li><li><input disabled type="checkbox"> 学习理财相关的知识，开始钱生钱<font color="#f40">（进行中）</font></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019年终总结</title>
      <link href="2019/12/31/other/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
      <url>2019/12/31/other/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>今天是2019年12月31日，眨眼间，2019年过去了。</p><p>时间总是过的很快，尤其是走出象牙塔进入社会之后，刚毕业那会怀揣着简历到处面试的情景仍然记忆犹新。</p><p>这次的年终总结算是2018年到2019年的总结，从我入职现在的公司开始到现在，与我而言，算是很有收获的2年。</p><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>这应该是挑战与机遇并存的2年，之前的工作中，我一直是只负责某一部分具体的业务，入职之后，刚开始是写C端小程序、H5活动页面，然后逐步负责公司整个B端相关系统的前端方面的工作，期间遇到过困难、经历过挑战。刚接手B端系统的时候，前同事写的比较随意，代码格式各不一样，维护起来很吃力，不过还好那会业务不算很忙，总算抽出时间重构了最核心的一部分逻辑，并且将打包时间从之前的恐怖的动辄20-30min缩短到2min之内，将webpack版本性能3升级到4，为此领导特意请我喝了一周的☕️，个人感觉还是挺有成就感的一件事。</p><p>团队中也有了新鲜的血液，不同同事之间的代码风格各不一样，如何保证代码质量就成了必须要考虑的一件事，所以我们商讨了一份内部使用的 <code>ESLint</code> 规则，以及<code>code review</code>，有利于以后的维护。</p><p>公司扩张之后，相应的，业务也随之而来，期间和另一位同事（大神）配合搭建起了针对线下各个门店的视频监控系统。第一次涉足视频领域，感觉挺不错。</p><h2 id="工作外围"><a href="#工作外围" class="headerlink" title="工作外围"></a>工作外围</h2><p>随着公司的扩张，随之而来的招人和带新人就成了我工作之余的另一件事，慢慢的学会了怎么样面试别人，在这里特别感谢我的领导，总是在恰当的时间的提点我，令我感觉成长了很多，获益良多。</p><p>另外，得益于用户对移动端办公的迫切需求和小程序的急速发展，公司的B端系统也同步到了小程序上，我作为唯一的开发人员、测试人员、产品人员、UI，从申请小程序到上线第一版以及之后的版本迭代，期间未出现过重大BUG，被领导称做「全干工程师」😓。这样的经历也让我对前端开发有了更深一步的认识与理解，作为最接近用户的程序员，我们应该时刻站在用户的角度思考怎么样能让所开发的产品更易用、更简洁、交互更合理、操作更简单，并且在产品上线之后主动了解用户的反馈，并针对反馈做相应的改进，然后再上线、跟踪反馈、优化，达到整个流程的闭环。这种一个人负责所有的事情对我虽然是第一次，但是开发过程中下意识的思考UI、产品，开发完的测试，上线之后的跟踪反馈，让我耳目一新，原来前端开发人员还可以这样，为此还特意买了设计相关的书籍、B端产品相关的书籍，边看书边开发，美美哒。</p><p>前端团队成长方面，我组织公司的前端同事搭建起了前端团队的自我成长体系，并付诸于行动，每周（最长不超过2周）开一次前端分享（交流）会，包括并不限于JavaScript、CSS、React、Vue、产品、设计相关，相互督促学习，并实践与公司的项目中。以目前的反馈来看，效果挺好。通过学习，我相信不只是我，团队中的任何一位同事，都会在各个方面都有所成长。</p><h2 id="情感上"><a href="#情感上" class="headerlink" title="情感上"></a>情感上</h2><p>今年顺利收获女朋友一枚，工作也有了更大的动力。想给她更好的生活，就得更努力赚钱，努力工作，努力学习，一直成长。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最近因为一些原因，公司也开始了传说中的内部优化，虽然没有波及到研发部门，但是日渐空阔的办公室还是实时提醒着我，<strong>凛冬将至</strong>，这更让我觉得提升自己的能力才是最重要的，在这里告诫大家，一定要有危机意识，居安思危。</p><h2 id="2020年目标"><a href="#2020年目标" class="headerlink" title="2020年目标"></a>2020年目标</h2><p>明天又是新的一年，在这里立几个小目标：</p><ol><li>前端技术方面有大的突破（多阅读源码）</li><li>学习Node.js、MongoDB、MySQL，并能有相应的后台练习项目</li><li>学习产品相关的知识</li><li>学习理财相关的知识，开始钱生钱</li><li>健身，年中能有8块腹肌</li><li>练字，达到字迹美观工整、笔力苍劲</li><li>学习英语，单词量能达到20000，慢英语能听懂</li></ol><h2 id="最后想说"><a href="#最后想说" class="headerlink" title="最后想说"></a>最后想说</h2><p>现在看来，那件事（前端团队的自我成长体系）到现在才运行起来，带给我的教训：<br><strong>要做成一件看起来很难的事，只是缺乏立即去做的决心，和坚持下去的恒心，仅此而已。</strong></p><p>今年对自己整体的评价：<br>技术方面，刚及格，主要是业务太繁忙，又刚交女朋友，学习的时间太少，<br>其他方面，比如UI意识、产品意识等等，还算是比较满意，不再仅仅是前端开发，眼界开阔了不少，业余还看了一些理财方面的书籍，打算来年继续学习。</p><p>2020年，29岁了，希望能有更好的成长。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>B端产品经理长成读书笔记</title>
      <link href="2019/09/12/other/B%E7%AB%AF%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E9%95%BF%E6%88%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2019/09/12/other/B%E7%AB%AF%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E9%95%BF%E6%88%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>PMBOK：项目管理知识体系 Project Management Body Of Knowledge</p><p>产品的规则设计：<br>1、精神理念：什么最重要<br>2、目标：产品要达成什么目标<br>3、谁更重要：多方冲突时保护谁<br>4、鼓励什么：什么事再产品中会受到认可和激励<br>5、拒绝什么：什么事不能在产品中做？禁止和惩罚什么？</p><p>方案出错，90%是问题出错了<br>问题-拆解-方案-结论 原则<br>1、定义问题，2、拆解问题，3、导出方案，4、评估得出结论</p><p>更高的时间和行动成本会拉低用户对产品的需求</p><p>RFM模型<br>RFM是最经典的客户消费行为特征分析模型，RFM代表Recency（最近一次消费时间），Frequency（某一个时间范围内的消费频次），Monetary（某一个时间范围内的平均客单价或累计交易额）。根据公司实际数据情况，将这三个指标划分成几档，可以形成多种组合（假设每个指标分五档，则可产生5x5x5个组合），对这些组合进行聚类分析，提炼出行为模式类似的多个群体，实现对客户消费特征的群体细分。</p><p>数据集市 DM Data Mart<br>数据仓库 DW Data Warehouse<br>BI Business Intelligence</p><p>数据仓库和大数据是两个完全不同的概念,它们在理念、技术方案、应用领域方面都完全不同,具体如下。<br>·理念:数据仓库源于交易数据,对数据的准确性要求高,适合做离线分析;大数据源于日志的行为数据,对数据准确性要求不高,适合做自动化策略。<br>技术方案:数据仓库采用传统的、经典的数据分析思路,即抽样、分析、预测;大数据基于海量数据和运算能力,不做抽样而做全量研究,不做分析而做模型应用。<br>应用领域:数据仓库主要用来做企业经营分析;大数据主要用来做各种业务自动化应用。</p><p><img src="/images/141031.png" alt="典型的企业级应用架构图"></p><p><img src="/images/142247.png" alt="支持企业客户销售管理的应用架构图"></p><p><img src="/images/IMG_1982.PNG" alt></p><p><img src="/images/IMG_1983.PNG" alt="战略层"></p><p><img src="/images/IMG_1984.PNG" alt="战略分析工具"></p><p><img src="/images/IMG_1985.PNG" alt="展示层"></p><p><img src="/images/IMG_1986.PNG" alt="执行层-管理层"></p><p><img src="/images/IMG_1987.PNG" alt="执行层-运营层"></p><p><img src="/images/140128.png" alt></p><p><img src="/images/131302.png" alt></p><p><img src="/images/135026.png" alt></p><p><img src="/images/140428.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>九败一胜读书笔记</title>
      <link href="2019/08/19/other/%E4%B9%9D%E8%B4%A5%E4%B8%80%E8%83%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>2019/08/19/other/%E4%B9%9D%E8%B4%A5%E4%B8%80%E8%83%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>获取的长期经验不是最重要的，快速学习能力是决定一个人发展现状及未来前景的重要因素。</p><p>总重契约精神，总重大家共同制订好的游戏规则，没有这个，创业就无从谈起。</p><p>CEO不可被人代替的指责是：设计公司整体愿景和所有战略，确保传达给所有利益相关方，不仅是管理层，包括所有员工，不仅是公司内部人，包括股东、消费者、商户和所有合作伙伴；招到并留住最优秀的人；确保公司要有足够的资金。</p><p>以身作则不是塑造公司价值观的最好办法，而是唯一办法。</p><p>把所有东西考虑清楚再去讨论能不能做。</p><p>2004-2009校内网给他们的经验和教训：</p><ol><li>创业团队必须分工明确，CEO必须解放出来，关注整个业界、时代、社会发展的潮流。</li><li>快速推广很重要。</li><li>没有盲目地自我创新，快速学习别人的优点。比如模仿Facebook，在节省成本的同时，让用户有了当时一流的UI体验。</li><li>对资本的看法太过理想化了。应该更早的接触资本，降低姿态，做一些妥协。</li><li>必须和信任的人一起创业。唯有信任才能在遇到低潮的情况下让团队依旧坚持稳固。</li></ol><p>O2O 线上线下：线上交易，线下消费</p><p>保持对未知的世界充满好奇，先把更多的会放进自己的视，才有抉择的余地。</p><p>对于社会能产生真实价值的东西，是事业最稳定的基石。不管这种东西是解决人与人的关系，还是解决人与物的关系。</p><p>互联网时代是”产品为王”的时代，是完美主义者有着系统性优势的时代。只有完美主义的人，才能把产品打磨的那么出色，产品出色，整个公司就赢了。</p><p>任何一个部门，一年只要做对一件事就能获得成功</p><p>招聘进来的人的水准应该比现有团队50%的人高，整个团队才会越来越强</p><p>对未来越有信心，对现在越有耐心。</p><p>一家老有新闻的企业并非好事，在那些枯燥，平凡的日常管理细节里，每天前进一点，日积月累，短期内看不出公司发生了多少变化，把观察时间放长一点，三五年，你就会发现这家公司可能已经脱胎换骨了。这同样适用于每个人。</p><p>未来是不确定的，只能战战兢兢，如履薄冰。</p><p>一如既往的好奇心，超强的学习能力。</p><p>免费的根本问题在于真正的免费如何盈利。</p><p>想要构建产品壁垒，就最好做自己擅长的部分。</p><p>无数平庸的细节堆积出来的，就是平庸的产品。</p><p>如果你希望在一个好的创业公司一路高歌猛进的话，每一年都是关键的一年。</p><p>小公司做起来的关键是抓住了一个机会，中等公司的关键是有一批比较强的高管，大公司的关键是要有正确的流程和价值观。</p><p>企业创始人的价值观决定整个企业其他人对待整个市场的方式。美团网价值观的排序是：消费者第一、商家第二、员工第三、股东第四、王兴第五。</p><p>核心价值观的渗透度越高，整个企业的人员稳定性才越强。公司的使命、愿景、价值观，这些看起来是虚无缥缈的东西，确是团队精神生长的坚实土地。</p><p>CEO履行好自己的指责，其他事情都应该找最专业、最好的人来做。</p><p>团队的组件原则：招进来的人，水准应该比现有团队50%的人高。只要按照这个标准，整个团队会越来越强。</p><p>公司越来越大，为了保障公司的正常运转，需要一套行之有效的组织架构和严密的流程。系统和流程保障了分工明确、权责到位，不易出差错；另一方面却让跨部门合作变得越来越困难，效率在沟通中损耗，创新的热情和机会就有可能在这些损耗中溜掉。</p><p><img src="/images/124117.png" alt="企业家精神"></p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 垃圾收集</title>
      <link href="2019/07/08/js/JavaScript%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/"/>
      <url>2019/07/08/js/JavaScript%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>JavaScript 具有自动垃圾收集机制，也就是说，执行环境会负责管理代码执行过程中使用的内存。而在 C 和 C++ 之类的语言中，开发人员的一项基本任务就是手工跟踪内存的使用情况，这是造成许多问题的一个根源。在编写 JavaScript 程序时，开发人员不用再关心内存使用问题，所需内存的分配以及无用内存的回收完全实现了自动管理。这种垃圾收集机制的原理其实很简单：找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间）周期性地执行这一操作。</p><p>下面我们来分析一下函数中局部变量的正常生命周期。局部变量只在函数执行的过程中存在。而在这个过程中，会为局部变量在栈（或堆）内存上分配相应的空间，以便存储它们的值。然后在函数中使用这些变量，直至函数执行结束。此时，局部变量就没有存在的必要了，因此可以释放它们的内存以供将来使用。在这种情况下，很容易判断变量是否还有存在的必要；但并非所有情况下都这么容易就能得出结论。垃圾收集器必须跟踪哪个变量有用哪个变量没用，对于不再有用的变量打上标记，以备将来收回其占用的内存。用于标识无用变量的策略可能会因实现而异，但具体到浏览器中的实现，则通常有两个策略。</p><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>Javascript中最常用的垃圾收集方式是<em>标记清除</em>（mark-and-swep）。当变量进入环境（例如，在函数中声明一个变量）时，就将这个变量标记为“进入环境”。从逻辑上讲，永远不能释放进入环境的变量所占用的内存，因为只要执行流进入相应的环境，就可能会用到它们。而当变量离开环境时，则将其标记为“离开环境”。</p><p>可以使用任何方式来标记变量。比如，可以通过翻转某个特殊的位来记录一个变量何时进入环境，或者使用一个“进入环境的”变量列表及一个“离开环境的”变量列表来跟踪哪个变量发生了变化。说到底，如何标记变量其实并不重要，关键在于采取什么策略。</p><p>垃圾收集器在运行的时候会给存储在内存中的所有变量都加上标记（当然，可以使用任何标记方式）。然后，它会去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量，原因是环境中的变量已经无法访问到这些变量了。最后，垃圾收集器完成<em>内存清除</em>工作，销毁那些带标记的值并回收它们所占用的内存空间。</p><p>到2008年为止，IE、 Firefox、 Opera、 Chrome 和 Safari 的  JavaScript 实现使用的都是标记清除式的垃圾收集策略（或类似的策略），只不过垃圾收集的时间间隔互有不同。</p><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>另一种不太常见的垃圾收集策略叫做<em>引用计数</em>（ reference counting）。引用计数的含义是跟踪记录每个值被引用的次数。当声明了一个变量并将一个引用类型值赋给该变量时，则这个值的引用次数就是1。如果同一个值又被赋给另一个变量，则该值的引用次数加1。相反，如果包含对这个值引用的变量又取得了另外一个值，则这个值的引用次数减1。当这个值的引用次数变成0时，则说明没有办法再访问这个值了，因而就可以将其占用的内存空间回收回来。这样，当垃圾收集器下次再运行时，它就会释放那些引用次数为零的值所占用的内存。</p><p>Netscape Navigator3.0 是最早使用引用计数策略的浏览器，但很快它就遇到了一个严重的问题：循环引用。<em>循环引用</em>指的是对象 A 中包含一个指向对象 B 的指针，而对象 B 中也包含一个指向对象 A 的引用。请看下面这个例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function problem() &#123;</span><br><span class="line">    var objectA = new Object();</span><br><span class="line">    var objectB = new Object();</span><br><span class="line">    objectA.someOtherobject = objectB;</span><br><span class="line">    objectB.anotherobject = objectA;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中， objectA 和 objectB 通过各自的属性相互引用；也就是说，这两个对象的引用次数都是2。在采用标记清除策略的实现中，由于函数执行之后，这两个对象都离开了作用域，因此这种相互引用不是个问题。但在采用引用计数策略的实现中，当函数执行完毕后，objectA 和 objectB 还将继续存在，因为它们的引用次数永远不会是。假如这个函数被重复多次调用，就会导致大量内存得不到回收。为此，Netscape 在 Navigator4.0 中放弃了引用计数方式，转而采用标记清除来实现其垃圾收集机制。可是，引用计数导致的麻烦并未就此终结。</p><p>我们知道，IE中有一部分对象并不是原生 JavaScript 对象。例如，其 BOM 和 DOM 中的对象就是使用 C++ 以 COM（ Component Object Model，组件对象模型）对象的形式实现的，而 COM 对象的垃圾收集机制采用的就是引用计数策略。因此，即使 IE 的 JavaScript 引擎是使用标记清除策略来实现的，但 JavaScript 访问的 COM 对象依然是基于引用计数策略的。换句话说，只要在 IE 中涉及 COM 对象，就会存在循环引用的回题。下面这个简单的例子，展示了使用 COM 对象导致的循环引用问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var element= document.getElementById(&quot;some element&quot;)</span><br><span class="line">var myobject = new Object();</span><br><span class="line">myobject.element = element;</span><br><span class="line">element.someObject = myobject;</span><br></pre></td></tr></table></figure><p>这个例子在一个 DOM 元素（element）与一个原生 JavaScript 对象（myObject）之间创建了循环引用。其中，变量 myobject 有一个名为 element 的属性指向 element 对象；而变量 element 也有一个属性名叫 someObject 回指 myobject，由于存在这个循环引用，即使将例子中的 DOM 从页面中移除，它也永远不会被回收。为了避免类似这样的循环引用问题，最好是在不使用它们的时候手工断开原生 JavaScript 对象与 DOM 元素之间的连接。例如，可以使用下面的代码消除前面例子创建的循环引用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myobject.element= null;</span><br><span class="line">element.someobject = null;</span><br></pre></td></tr></table></figure><p>将变量设置为 null 意味着切断变量与它此前引用的值之间的连接。当垃圾收集器下次运行时，就会删除这些值并回收它们占用的内存。<br>为了解决上述问题，IE9 把 BOM 和 DOM 对象都转换成了真正的 JavaScript 对象。这样，就避免了两种垃圾收集算法并存导致的问题，也消除了常见的内存泄漏现象。</p><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><p>垃坂收集器是周期性运行的，而且如果为变量分配的内存数量很可观，那么回收工作量也是相当大的。在这种情况下，确定垃圾收集的时间间隔是一个非常重要的问题。说到垃圾收集器多长时间运行次，不禁让人联想到IE因此而声名狼藉的性能问题。IE的垃圾收集器是根据内存分配量运行的，具体点说就是256个变量、4096个对象（或数组）字面量和数组元素（slot）或者64KB的字符串。达到上述任何一个临界值，垃圾收集器就会运行。这种实现方式的问题在于，如果一个脚本中包含那么多变量，那么该脚本很可能会在其生命周期中一直保有那么多的变量。而这样一来，垃圾收集器就不得不频繁地运行。结果，由此引发的严重性能问题促使IE重写了其垃圾收集例程。</p><p>随着IE7的发布，其 JavaScript 引擎的垃圾收集例程改变了工作方式：触发垃圾收集的变量分配、字面量和（或）数组元素的临界值被调整为动态修正。IE7中的各项临界值在初始时与IE6相等。如果垃圾收集例程回收的内存分配量低于15%，则变量、字面量和（或）数组元素的临界值就会加倍。如果例程回收了85%的内存分配量，则将各种临界值重置回默认值。这一看似简单的调整，极大地提升了在运行包含大量 JavaScript 的页面时的性能。</p><p>事实上，在有的浏览器中可以触发垃圾收集过程，但我们不建议读者这样做。在 IE 中，调用 window.CollectGarbage() 方法会立即执行垃圾收集。在 Opera7 及更高版本中，调用 window.opera.collect() 也会启动垃圾收集例程。</p><h2 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h2><p>使用具备垃圾收集机制的语言编写程序，开发人员一般不必操心内存管理的问题。但是，JavaScript 在进行内存管理及垃圾收集时面临的问题还是有点与众不同。其中最主要的一个问题，就是分配给Web浏览器的可用内存数量通常要比分配给桌面应用程序的少。这样做的目的主要是出于安全方面的考虑，目的是防止运行 JavaScript 的网页耗尽全部系统内存而导致系统崩溃。内存限制问题不仅会影响给变量分配内存，同时还会影响调用栈以及在一个线程中能够同时执行的语句数量。</p><p>因此，确保占用最少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。旦数据不再有用，最好通过将其值设置为 null 来释放其引用————这个做法叫做<em>解除引用</em>（ dereferencing）。这一做法适用于大多数全局变量和全局对象的属性。局部变量会在它们离开执行环境时自动被解除引用，如下面这个例子所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function createPerson(name) &#123;</span><br><span class="line">    var localPerson = new Object();</span><br><span class="line">    localPerson.name = name;</span><br><span class="line">    return localPerson;</span><br><span class="line">&#125;</span><br><span class="line">var globalPerson = createPerson(&quot;Nicholas”);</span><br><span class="line">// 手工解除 globalPerson 的引用</span><br><span class="line">globalPerson = null;</span><br></pre></td></tr></table></figure><p>在这个例子中，变量 globalPerson 取得了 createPerson() 函数返回的值。在 createPerson() 函数内部，我们创建了一个对象并将其赋给局部变量 localPerson，然后又为该对象添加了一个名为 name 的属性。最后，当调用这个函数时，localPerson 以函数值的形式返回并赋给全局变量 globalPerson。由于 localPerson 在 createPerson() 函数执行完毕后就离开了其执行环境，因此无需我们显式地去为它解除引用。但是对于全局变量 globalPerson 而言，则需要我们在不使用它的时候手工为它解除引用，这也正是上面例子中最后一行代码的目的。</p><p>不过，解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>roadhog 1.3.X 打包慢的解决办法</title>
      <link href="2019/06/11/frontend/roadhog-1-3-X-%E6%89%93%E5%8C%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2019/06/11/frontend/roadhog-1-3-X-%E6%89%93%E5%8C%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>背景：公司的后台管理系统项目基于 Antd Pro 早期版本，使用的脚手架是 <a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a>，虽然接入了 dva 等框架，方便了我们把工作重心集中在业务上，但是随着项目的庞大，问题随之而来，首当其冲的就是线上部署的时候打包慢的问题。因为 road 的扩展不太灵活，其本身的初衷就是尽可能减少webpack的配置，所以如何降低打包的速度就成了亟需解决的问题。</p><p>项目依赖58个，打包之后140个文件。</p><p>网上搜了一圈，发现没有令人满意的解决方案，只好自己来解决。仔细缕了一遍思路后发现，还是有解决办法的。</p><p>以下改动仅适用于公司的后台管理系统项目。</p><blockquote><ol><li>删除项目中没有用到或废弃的代码</li><li>利用好 roadhog 支持的 webpack 配置项</li><li>自己改 roadhog 的源码，然后发布为 npm 包，替换掉 roadhog</li></ol></blockquote><p>第一项不用说。</p><p>第二项是设置 webpack 的 externals，由于项目中用到了 g2、d3、echarts、@antv/data-set、moment、g-cloud、g2-plugin-slider、cal-heatmap 等 js 库，所以把它们都配置到 externals 下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"entry"</span>: <span class="string">"src/index.js"</span>,</span><br><span class="line">  <span class="attr">"extraBabelPlugins"</span>: [</span><br><span class="line">    <span class="string">"transform-runtime"</span>,</span><br><span class="line">    <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">    <span class="string">"transform-class-properties"</span>,</span><br><span class="line">    [<span class="string">"import"</span>, &#123; <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>, <span class="attr">"libraryDirectory"</span>: <span class="string">"es"</span>, <span class="attr">"style"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"development"</span>: &#123;</span><br><span class="line">      <span class="attr">"extraBabelPlugins"</span>: [</span><br><span class="line">        <span class="string">"dva-hmr"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"externals"</span>: &#123;</span><br><span class="line">    <span class="attr">"g2"</span>: <span class="string">"G2"</span>,</span><br><span class="line">    <span class="attr">"echarts"</span>: <span class="string">"echarts"</span>,</span><br><span class="line">    <span class="attr">"@antv/data-set"</span>: <span class="string">"DataSet"</span>,</span><br><span class="line">    <span class="attr">"moment"</span>: <span class="string">"moment"</span>,</span><br><span class="line">    <span class="attr">"g-cloud"</span>: <span class="string">"Cloud"</span>,</span><br><span class="line">    <span class="attr">"g2-plugin-slider"</span>: <span class="string">"G2.Plugin.slider"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ignoreMomentLocale"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"theme"</span>: <span class="string">"./src/theme.js"</span>,</span><br><span class="line">  <span class="attr">"hash"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"multipage"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 .eslint.js 将其配置为全局变量：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"globals": &#123;</span><br><span class="line">  "CalHeatMap": true,</span><br><span class="line">  "DataSet": true,</span><br><span class="line">  "moment": true,</span><br><span class="line">  "echarts": true,</span><br><span class="line">  "G2": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上注意：</p><ol><li>配置 <code>&quot;multipage&quot;: true</code> 后，roadhog 才会把超过2次引用的依赖打为 common 包</li><li>“dva-hmr” 设置在 development 才会避免生产环境下将其打包，因为生产环境下不会用到</li><li>将这些 js 库文件（不用包涵g-cloud、g2-plugin-slider）下载下来，放到项目根目录下 public/js 下，roadhog 作者约定 public 目录下的文件会在 server 和 build 时被自动 copy 到输出目录（默认是 ./dist）下。所以可以在这里存放 favicon, iconfont, html, html 里引用的图片等。</li><li>手动在 index.ejs 里面将其引入</li></ol><p>第三项</p><p>主要改动的地方：</p><ol><li>common.js 下 HtmlWebpackPlugin 插件配置的地方，给它配置 public 下的所有 js 文件和 css 文件的路径和环境变量：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (existsSync(join(paths.appSrc, <span class="string">'index.ejs'</span>))) &#123;</span><br><span class="line">    <span class="keyword">const</span> scripts = glob.sync(path.resolve(paths.appPublic) + <span class="string">'/js/*.js'</span>).map(<span class="function"><span class="params">filePath</span> =&gt;</span> path.basename(filePath));</span><br><span class="line">    <span class="keyword">const</span> stylesheets = glob.sync(path.resolve(paths.appPublic) + <span class="string">'/stylesheets/*.css'</span>).map(<span class="function"><span class="params">filePath</span> =&gt;</span> path.basename(filePath));</span><br><span class="line">    ret.push(<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'src/index.ejs'</span>,</span><br><span class="line">        inject: <span class="literal">true</span>,</span><br><span class="line">        scripts,</span><br><span class="line">        stylesheets,</span><br><span class="line">        env: <span class="built_in">JSON</span>.stringify(NODE_ENV)</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在你的项目的 index.ejs 中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">stylesheets</span> = <span class="string">htmlWebpackPlugin.options.stylesheets</span> || [] %&gt;</span></span><br><span class="line">  &lt;% for(var i = 0; i &lt; stylesheets.length; i++) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= 'stylesheets/' + stylesheets[i] %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">scripts</span> = <span class="string">htmlWebpackPlugin.options.scripts</span> || [] %&gt;</span></span><br><span class="line">  &lt;% for(var i = 0; i &lt; scripts.length; i++) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%= 'js/' + scripts[i] %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改 webpack.config.prod.js</li></ol><p>替换 webpack.optimize.UglifyJsPlugin 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...(debug ? [] : [<span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    sourceMap: <span class="literal">false</span>,</span><br><span class="line">    parallel: <span class="literal">true</span>,</span><br><span class="line">&#125;)]),</span><br></pre></td></tr></table></figure><p>UglifyJsPlugin 的好处不必多说，大家自己 google。</p><p>删掉 webpack.optimize.CommonsChunkPlugin 配置，参考 vue-cli2 的配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.multipage) &#123;</span><br><span class="line">    <span class="comment">// Support hash</span></span><br><span class="line">    <span class="keyword">const</span> name = config.hash ? <span class="string">'common.[hash]'</span> : <span class="string">'common'</span>;</span><br><span class="line">    <span class="comment">// ret.push(new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   name: 'common',</span></span><br><span class="line">    <span class="comment">//   filename: `$&#123;name&#125;.js`,</span></span><br><span class="line">    <span class="comment">// &#125;));</span></span><br><span class="line">    ret = ret.concat([</span><br><span class="line">      <span class="comment">// split vendor js into its own file</span></span><br><span class="line">      <span class="comment">// 将所有从node_modules中引入的js提取到vendor.js，即抽取库文件</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'vendor'</span>,</span><br><span class="line">        minChunks(<span class="built_in">module</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="regexp">/\.js$/</span>.test(<span class="built_in">module</span>.resource) &amp;&amp; <span class="built_in">module</span>.resource.indexOf(paths.appNodeModules) === <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">      <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">      <span class="comment">// 从vendor中提取出manifest，原因如上</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'manifest'</span>,</span><br><span class="line">        minChunks: <span class="literal">Infinity</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class="line">      <span class="comment">// in a separate chunk, similar to the vendor chunk</span></span><br><span class="line">      <span class="comment">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name,</span><br><span class="line">        <span class="keyword">async</span>: <span class="string">'vendor-async'</span>,</span><br><span class="line">        children: <span class="literal">true</span>,</span><br><span class="line">        minChunks: <span class="number">3</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，运行 <code>npm run test</code>，<code>npm run build</code>，编译好之后，发布到 npm 仓库如 <a href="https://www.npmjs.com/package/liangxinwei_roadhog" target="_blank" rel="noopener">liangxinwei_roadhog</a>。</p><p>最后，删掉项目下的 package.json 里面 roadhog 相关的依赖，替换为  <code>&quot;liangxinwei_roadhog&quot;: &quot;^1.0.0&quot;</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">  - "roadhog": "^1.3.1",</span><br><span class="line">  - "roadhog-api-doc": "^0.1.0",</span><br><span class="line">  + "liangxinwei_roadhog": "^1.0.0",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>修改启动和打包命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"node --max_old_space_size=4096 node_modules/liangxinwei_roadhog/lib/server.js"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"node --max_old_space_size=4096 node_modules/liangxinwei_roadhog/lib/build.js"</span></span><br></pre></td></tr></table></figure><p>经过我前后的数据比对，修改第二项之后，打包时间由原来的 20-30min 缩减到 5-6min，修改第三项之后，初次打包时间为 3-4min，再次打包时间缩减到 1min 之内。大功告成！</p><p>前端开发长路漫漫，大家且行且珍惜。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack各配置项全解析</title>
      <link href="2019/01/30/frontend/webpack%E5%90%84%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
      <url>2019/01/30/frontend/webpack%E5%90%84%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%85%A8%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>以下内容摘自<strong>【深入浅出webpack】</strong>，包含每一项的具体配置。</p><h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><p>表示入口, Webpack 执行构建的第一步将从 Entry 开始,可抽象成输入，类型可以是 string、 object、 array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 只有 1 个入口,入口只有 1 个文件</span><br><span class="line">entry: &apos; ./app/entry&apos;,</span><br><span class="line">// 只有1个入口,入口有两个文件</span><br><span class="line">entry: [</span><br><span class="line">    &apos;./app/entry1&apos;,</span><br><span class="line">    &apos;./app/entry2&apos;</span><br><span class="line">],</span><br><span class="line">// 有两个入口</span><br><span class="line">entry: &#123;</span><br><span class="line">    a: &apos;./app/entry-a&apos;,</span><br><span class="line">    b: [&apos;./app/entry-bl&apos;, &apos;./app/entry-b2&apos;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>如何输出结果 : 在 Webpack 经过一系列处理后,如何输出最终想要的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 输出文件存放的目录,必须是 string 类型的绝对路径</span><br><span class="line">    path: path.resolve(dirname, &apos; dist &apos;),</span><br><span class="line">    // 输出文件的名称</span><br><span class="line">    // 完整的名称</span><br><span class="line">    filename: &apos; bundle.js&apos;,</span><br><span class="line">    // 在配置了多个 entry 时,通过名称模板为不同的 entry 生成不同的文件名称</span><br><span class="line">    filename: &apos; [name].js&apos;,</span><br><span class="line">    // 根据文件内容的 Hash 值生成文件的名称, 用于 浏览器长时间缓存文件</span><br><span class="line">    filename: &apos; [chunkhash].js&apos;,</span><br><span class="line">    // 放到指定目录下</span><br><span class="line">    // 发布到线上的所有资源的 URL 前缀,为 string 类型</span><br><span class="line">    publicPath: &apos;/assets/&apos;,</span><br><span class="line">    // 放到根目录下</span><br><span class="line">    publicPath: &apos;&apos;,</span><br><span class="line">    // 放到 CDN 上 // 导出库的名称 , 为 string 类型, 不填它时,默认的输出格式是匿名的立即执行函数</span><br><span class="line">    publicPath: &apos;https://cdn.example.com/&apos;,</span><br><span class="line">    library: &apos; MyLibrary &apos;,</span><br><span class="line">    // 导出库的类型,为枚举类型,默认是 var</span><br><span class="line">    // 可以是umd、 umd2、 commonjs2、 commonjs、 amd、 this、 var、 assign、 window、global、jsonp</span><br><span class="line">    libraryTarget: &apos;umd&apos;,</span><br><span class="line">    // 是否包含有用的文件路径信息到生成的代码里 ,为 boolean 类型</span><br><span class="line">    pathinfo: true,</span><br><span class="line">    // 附加 Chunk 的文件名称</span><br><span class="line">    chunkFilename: &apos;[id].js&apos;,</span><br><span class="line">    chunkFilename: &apos;[chunkhash].js&apos;,</span><br><span class="line">    // JSONP 异步加载资源时的回调函数名称,需要和服务端搭配使用</span><br><span class="line">    jsonpFunction: &apos;myWebpackJsonp&apos;,</span><br><span class="line">    // 生成的 Source Map 文件的名称</span><br><span class="line">    // 浏览器开发者工具里显示的源码模块名称</span><br><span class="line">    sourceMapFilename: &apos;[file].map&apos;,</span><br><span class="line">    // 异步加载跨域的资源时使用的方式</span><br><span class="line">    devtoolModuleFilenameTemplate: &apos;webpack:lll[resource-path]&apos;,</span><br><span class="line">    crossOriginLoading: &apos;use-credentials&apos;,</span><br><span class="line">    crossOriginLoading: &apos;anonymous&apos;,</span><br><span class="line">    crossOriginLoading: false</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>配置模块相关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 不用解析和处理的模块，Webpack忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能</span><br><span class="line">    // 注意，被忽略掉的文件里不应该包含 import、 require、 define 等模块化语句，</span><br><span class="line">    // 不然会导致在构建出的代码中包含无法在浏览器环境下执行的模块化语句。</span><br><span class="line">    // 单独、完整的 、react.min.js、文件没有采用模块化，忽略对 、react.min.js、文件 的递归解析处理</span><br><span class="line">    noParse: [/react\.min\.js$/],</span><br><span class="line">    // 配置 Loader</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 正则匹配命中要使用 Loader 的文件</span><br><span class="line">        test: /\.jsx$/,</span><br><span class="line">        // 只会命中这里面的文件</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, &apos;src&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 忽略这里面的文件</span><br><span class="line">        exclude: [</span><br><span class="line">          path.resolve(__dirname, &apos;node_modules&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 使用哪些 Loader,有先后次序,从后向前执行</span><br><span class="line">        use: [</span><br><span class="line">          // style-loader会将 css代码转换成字符串后，注入 JavaScript代码中，通过 JavaScript 向 DOM 增加样式。 如果我们想将 css 代码提取到一个单独的文件中，而不是和 JavaScript 混在 一 起，则可以使用 ExtractTextPlugin</span><br><span class="line">          &apos;style-loader&apos;,</span><br><span class="line">          // css-loader 会找出 css 代码中 eimport 和 url ()这样的导入语句，告诉 Webpack 依赖这些资源 。 同时支持 CSS Modules、压缩 css 等功能 。处理完后再将结果交给 style-loader处理。</span><br><span class="line">          &apos;css-loader&apos;,</span><br><span class="line">          // 通过 sass-loader将 scss 源码转换为 css 代码，再将 css 代码交给 css-loader处理。</span><br><span class="line">          &apos;sass-loader&apos;,</span><br><span class="line">          // 直接使用 Loader 的名称</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &apos;css-loader&apos;,</span><br><span class="line">            // 向 html-loader 传一些参数</span><br><span class="line">            options: &#123;&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        // 不用解析和处理的模块，Webpack忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能</span><br><span class="line">        noParse: [</span><br><span class="line">          // 用正则匹配</span><br><span class="line">          /special-library\.js$/</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    /**</span><br><span class="line">     * 配置插件</span><br><span class="line">     */</span><br><span class="line">    plugins: [],</span><br><span class="line">    /**</span><br><span class="line">     * 配置寻找模块的规则</span><br><span class="line">     */</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        // 寻找模块的根目录,为 array 类型,默认以 node_modules 为根目录</span><br><span class="line">        // 可以指明存放第三方模块的绝对路径，以减少寻找， dirname 表示当前工作目录</span><br><span class="line">        modules: [path.resolve(__dirname, &apos;node_modules&apos;)],</span><br><span class="line">        modules: [</span><br><span class="line">            &apos;node modules &apos;,</span><br><span class="line">             path.resolve(__dirname, &apos;app&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 模块的后缀名，后缀尝试列表要尽可能小，频率出现最高的文件后缀要优先放在最前面</span><br><span class="line">        extensions: [&apos;.js&apos;, &apos;json&apos;, &apos;jsx&apos;, &apos;.css&apos;],</span><br><span class="line">        // 模块别名配置,用于映射模块，从而跳过耗时的递归解析操作。</span><br><span class="line">        alias: &#123;</span><br><span class="line">          // 将 &apos;module&apos;映射成&apos;new-module&apos; ,同样, &apos;module/path/file&apos;也会被映射 成&apos;new-module/path/file&apos;</span><br><span class="line">          &apos;module&apos;: &apos;new-module&apos;,</span><br><span class="line">          // 使用结尾符号$后 ,将 &apos;only-module&apos; 映射成 &apos;new-module&apos;, // 但是不像上面的 ,&apos; module/path/file &apos;不会被映射成&apos; new-module/path/file</span><br><span class="line">          &apos;only-module$&apos;: &apos;new-modules&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // alias 还支持使用数组来更详细地进行配置</span><br><span class="line">        alias: [</span><br><span class="line">            &#123;</span><br><span class="line">              // 老模块</span><br><span class="line">              name: &apos;module&apos;,</span><br><span class="line">              // 新模块</span><br><span class="line">              alias: &apos;new-module &apos;,</span><br><span class="line">              // 是否只映射模块,如果是 true, 则只有&apos; module &apos;会被映射:如果是 false,则&apos;module/inner/path &apos;也会被映射</span><br><span class="line">              onlyModule: true,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        // 是否跟随文件的软链接去搜寻模块的路径</span><br><span class="line">        symlinks: true,</span><br><span class="line">        // 模块的描述文件</span><br><span class="line">        descriptionFiles: [&apos; package.json &apos;],</span><br><span class="line">        // 模块的描述文件里描述入口的文件的字段名</span><br><span class="line">        mainFields: [&apos; main &apos;],</span><br><span class="line">        // 是否强制导入语句写明文件后缀</span><br><span class="line">        enforceExtension: false</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 输出文件的性能检查配置</span><br><span class="line">     */</span><br><span class="line">    performance: &#123;</span><br><span class="line">        // 有性能问题时输出警告</span><br><span class="line">        hints: &apos;warning &apos;,</span><br><span class="line">        // 有性能问题时输出错误</span><br><span class="line">        hints: &apos;error &apos;,</span><br><span class="line">        // 关闭性能检查</span><br><span class="line">        hints: false,</span><br><span class="line">        // 最大文件的大小(单位为 bytes)</span><br><span class="line">        maxAssetSize: 200000,</span><br><span class="line">        // 最大入口文件的大小 (单位为 bytes)</span><br><span class="line">        maxEntrypointSize: 400000,</span><br><span class="line">        // 过滤要检查的文件</span><br><span class="line">        assetFilter: function (assetFilename) &#123;</span><br><span class="line">            return assetFilename.endsWith(&apos; .css &apos;) || assetFilename.endsWith(&apos;.js&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 配置 source-map 类型</span><br><span class="line">    devtool: &apos; source-map &apos;,</span><br><span class="line">    // Webpack 使用的根目录, string 类型必须是绝对路径 //  配置输出代码的运行环境</span><br><span class="line">    context: __dirname,</span><br><span class="line">    // 浏览器,默认</span><br><span class="line">    target: &apos;web&apos;,</span><br><span class="line">    // WebWorker</span><br><span class="line">    target: &apos;webworker&apos;,</span><br><span class="line">    // Node.js,使用 、require、语句加载 Chunk代码 target:&apos;async-node&apos;, II Node.js,异步加载 Chunk代码</span><br><span class="line">    target: &apos;node&apos;,</span><br><span class="line">    // nw.js</span><br><span class="line">    target: &apos;node-webkit&apos;,</span><br><span class="line">    // electron,主线程</span><br><span class="line">    target: &apos;electron-main&apos;,</span><br><span class="line">    // electron,渲染线程</span><br><span class="line">    target: &apos;electron-renderer&apos;,</span><br><span class="line">    // 使用来自 JavaScript 运行环境提供的全局变量</span><br><span class="line">    externals: &#123;</span><br><span class="line">        jquery: &apos;jQuery&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 控制台输出日志控制</span><br><span class="line">     */</span><br><span class="line">    stats: &#123;</span><br><span class="line">      assets: true,</span><br><span class="line">      colors: true,</span><br><span class="line">      errors: true,</span><br><span class="line">      errorDetails: true,</span><br><span class="line">      hash: true</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * DevServer 相关的配置</span><br><span class="line">     */</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        // 代理到后端服务接口</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &apos;/api&apos;: &apos;http:// localhost:3000&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置 DevServer HTTP 服务器的文 件根目录</span><br><span class="line">        contentBase: path.join(__dirname, &apos;public&apos;),</span><br><span class="line">        // 是否开启 Gzip 压缩</span><br><span class="line">        compress: true,</span><br><span class="line">        // 是否开发 HTMLS History API 网页</span><br><span class="line">        historyApiFallback: true,</span><br><span class="line">        // 是否开启模块热替换功能</span><br><span class="line">        hot: true,</span><br><span class="line">        // 是否开启 HTTPS 模式</span><br><span class="line">        https: false,</span><br><span class="line">        // 是否捕捉 Webpack构建的性能信息,用于分析是什么原因导致构建性能不佳</span><br><span class="line">        profile: true,</span><br><span class="line">        // 是否启用缓存来提升构建速度</span><br><span class="line">        cache: false,</span><br><span class="line">        // 是否开始</span><br><span class="line">        watch: true,</span><br><span class="line">        // 监听模式选项</span><br><span class="line">        // 不监听的文件或文件夹,支持正则匹配。默认为空</span><br><span class="line">        watchOptions: &#123;</span><br><span class="line">            ignored: /node modules/,</span><br><span class="line">            // 监听到变化发生后,等 300ms 再执行动作,截流,防止文件更新太快导致重新编 译频率太快。默认为 300ms</span><br><span class="line">            aggregateTimeout: 300,</span><br><span class="line">            // 不停地询问系统指定的文件有没有发生变化,默认每秒询问 1000 次</span><br><span class="line">            poll: 1000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级程序设计笔记五：对象的属性</title>
      <link href="2018/11/18/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
      <url>2018/11/18/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%94%EF%BC%9A%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>ECMAScript 有两种属性：数据属性和访问器属性。</p><h2 id="1、数据属性"><a href="#1、数据属性" class="headerlink" title="1、数据属性"></a>1、数据属性</h2><p>数据属性包含一个数据值的位置。在这个位置可以读取和写入值。数据属性有4个描述其行为的特性。</p><ul><li>[Configurable]：表示能否通过 delete 删除属性从而重新定义属性，或者能否把属性修改为访问器属性。默认值为true。</li><li>[Enumerable]：表示能否通过 for-i 循环返回属性。对于直接在变量上定义的属性，默认值是 true。</li><li>[Writable]：表示能否修改属性的值，默认值为true。</li><li>[value]：包含这个属性的数据值。读取属性值的时候，从这个位置读；写入属性值的时候，把新值保存在这个位置。这个特性的默认值为 undefined。</li></ul><p>要修改属性默认的特性，必须使用 ECMAScript 的 Object.defineProperty() 方法。这个方法接收三个参数：属性所在的对象、属性的名字和一个描述符对象。其中，描述符（descriptor）对象的属性必须是：configurable、 enumerable、 writable 和 value。设置其中的一或多个值，可以修改对应的特性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const obj = &#123;&#125;;</span><br><span class="line">// 设置 a 只读，一旦设置 configurable 就不能再修改了</span><br><span class="line">Object.defineProperty(obj, &apos;a&apos;, &#123;</span><br><span class="line">    configurable: false,</span><br><span class="line">    value: 123</span><br><span class="line">&#125;);</span><br><span class="line">// obj: &#123;a: 123&#125;</span><br><span class="line">delete a.a                          // false</span><br><span class="line">a.a = 345                           // 345, obj: &#123;a: 123&#125;</span><br><span class="line">Object.defineProperty(a, &apos;a&apos;, &#123;</span><br><span class="line">    configurable: true,</span><br><span class="line">    value: 222</span><br><span class="line">&#125;)</span><br><span class="line">// 抛出错误：VM3638:1 Uncaught TypeError: Cannot redefine property: a at Function.defineProperty</span><br></pre></td></tr></table></figure><h2 id="2、对象的访问器属性"><a href="#2、对象的访问器属性" class="headerlink" title="2、对象的访问器属性"></a>2、对象的访问器属性</h2><p>访问器属性不包含数据值，他们包含一对儿 getter 和 setter 函数（都不是必需的）。在读取访问器属性时，会调用 getter 函数，这个函数负责返回有效的值；在写入访问器属性时，会调用 setter 函数并传入新值，这个函数负责决定如何处理数据。访问器属性有如下4个特性：</p><ul><li>[Configurable]：表示能否通过 delete 删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为数据属性。对于直接在对象上定义的属性，这个特性的默认值为 true。</li><li>[Enumerable]：表示能否通过for-in循环返回属性。对于直接在对象上定义的属性，这个特性的默认值为true。</li><li>[get]：在读取属性时调用的函数。默认值为 undefined。</li><li>[set]：在写入属性时调用的函数。默认值为 undefined。</li></ul><p>访问器属性不能直接定义，必须使用 object.defineProperty() 来定义。请看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">    _year: 2004,</span><br><span class="line">    edition: 1</span><br><span class="line">&#125;;</span><br><span class="line">Object.defineProperty(book, &quot;year&quot;, &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        return this._year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set(newValue) (</span><br><span class="line">        if(newValue &gt; 2004) &#123;</span><br><span class="line">            this._year = newValue;</span><br><span class="line">            this.edition = newValue - 2004;</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br><span class="line">book.year = 2005;</span><br><span class="line">alert(book.edition); // 2</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript高级程序设计笔记四：创建对象的几种方式</title>
      <link href="2018/11/17/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>2018/11/17/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%9A%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>虽然 Object 构造函数或对象字面量都可以用来创建单个对象，但这些方式有个明显的缺点：使用同个接口创建很多对象，会产生大量的重复代码。</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式是软件工程领域一种广为人知的设计模式，这种模式抽象了创建具体对象的过程，考虑到在ECMAScript中无法创建类，开发人员就发明了一种函数，用函数来封装以特定接口创建对象的细节，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    o.name = name;</span><br><span class="line">    o.job = job;</span><br><span class="line">    o.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>工厂模式虽然解决了创建多个相似对象的问题，但却没有解决对象识别的问题（即怎样知道一个对象的类型）。</p><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>ECMAScript中的构造函数可用来创建特定类型的对象。像 Object 和 Array 这样的原生构造函数，在运行时会自动出现在执行环境中。此外，也可以创建自定义的构造函数，从而定义自定义对象类型的属性和方法。例如，可以使用构造函数模式将前面的例子重写如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"Greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>我们注意到， Person() 中的代码除了与 createPerson() 中相同的部分外，还存在以下不同之处:</p><ul><li>没有显式地创建对象;</li><li>直接将属性和方法赋给了this对象;</li><li>没有 return语句</li></ul><p>此外，还应该注意到函数名 Person 使用的是大写字母P。按照惯例，构造函数始终都应该以一个大写字母开头，而非构造函数则应该以一个小写字母开头，主要是为了区别于 ECMAScript 中的其他函数；因为构造函数本身也是函数，只不过可以用来创建对象而已。要创建 Person 的新实例，必须使用 new 操作符，实际上会经历以下4个步骤:</p><ol><li>创建一个新对象;</li><li>将构造函数的作用域赋给新对象（因此 this 就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ol><p>p1 和 p2 分别保存着 Person 的一个不同的实例，这两个对象都有一个 constructor（构造函数）属性，该属性指向 Person，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(p1.constructor === Person); <span class="comment">// true</span></span><br><span class="line">alert(p2.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>对象的 constructor 属性最初是用来标识对象类型的。但是，提到检测对象类型，还是 instanceof 操作符要更可靠一些。我们在这个例子中创建的所有对象既是 Object 的实例，同时也是 Person 的实例，这一点通过 instanceof 操作符可以得到验证：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(p1 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">alert(p1 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br><span class="line">alert(p2 <span class="keyword">instanceof</span> <span class="built_in">Object</span>); <span class="comment">// true</span></span><br><span class="line">alert(p2 <span class="keyword">instanceof</span> Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>将构造函数当作函数</strong><br>构造函数与其他函数的唯一区别，就在于调用它们的方式不同。不过，构造函数也是函数，不存在定义构造函数的特殊语法。任何函数，只要通过 new 操作符来调用，那它就可以作为构造函数；而任何函数，如果不通过 new 操作符来调用，它跟普通函数也不会有什么两样。<br><strong>构造函数的问题</strong><br>构造函数模式虽然好用，但也并非没有缺点。使用构造函数的主要问题，就是每个方法都要在每个实例上重新创建一遍。在前面的例子中，p1 和 p2 都有一个名为 sayName() 的方法，但那两个方法不是同一个 Function 的实例。不要忘了 ECMAScript 中的函数是对象，因此每定义一个函数，也就是实例化了一个对象。从逻辑角度讲，此时的构造函数也可以这样定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"alert(this.name)"</span>) <span class="comment">// 与声明函数在逻辑上是等价的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从这个角度上来看构造函数，更容易明白每个 Person 实例都包含一个不同的 Function实例（以显示name属性）的本质。说明白些，以这种方式创建函数，会导致不同的作用域链和标识符解析，但创建 Function 新实例的机制仍然是相同的。因此，不同实例上的同名函数是不相等的，以下代码可以证明这一点：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(p1.sayName === p2.sayName); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>然而，创建两个完成同样任务的 Function 实例的确没有必要；况且有 this 对象在，根本不用在执行代码前就把函数绑定到特定对象上面。因此，大可像下面这样，通过把函数定义转移到构造函数外部来解决这个问题：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job =job;</span><br><span class="line">    <span class="keyword">this</span>.sayName = sayName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br></pre></td></tr></table></figure><p>在这个例子中，我们把 sayName() 函数的定义转移到了构造函数外部。而在构造函数内部，我们将 sayName 属性设置成等于全局的 sayName 函数。这样一来，由于 sayName 包含的是一个指向函数的指针，因此 p1 和 p2 对象就共享了在全局作用域中定义的同一个 sayName() 函数。这样做确实解决了两个函数做同一件事的问题，可是新问题又来了：在全局作用域中定义的函数实际上只能被某个对象调用，这让全局作用域有点名不副实。而更让人无法接受的是：如果对象需要定义很多方法，那么就要定义很多个全局函数，于是我们这个自定义的引用类型就丝毫没有封装性可言了。</p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>我们创建的每个函数都有一个 prototype（原型属性），这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。如果按照字面意思来理解，那么 prototype 就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处是可以让所有对象实例共享它所包含的属性和方法。换句话说，不必在构造函数中定义对象实例的信息，而是可以将这些信息直接添加到原型对象中，如下面的例子所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name =<span class="string">"Nicholas"</span>;</span><br><span class="line">Person.prototype.age = <span class="number">29</span>;</span><br><span class="line">Person.prototype.job = <span class="string">"Software Engineer"</span>;</span><br><span class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>. name)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line">alert(p1.sayName === p2.sayName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>在此我们将 sayName() 方法和所有属性直接添加到 Person 的 prototype 中，构造函数变成了空函数。即使如此，也仍然可以通过调用构造函数来创建新对象，而且新对象还会具有相同的属性和方法。但与构造函数不同的是，新对象的这些属性和方法是由所有实例共享的。换句话说，p1 和 p2 访问的都是同一组属性和同一个 sayName() 函数。<br><strong>原型模式继承的问题</strong><br>原型中所有属性是被很多实例共享的，对于基本值，可以通过在实例上添加同名属性以隐藏原型中的对应属性，但是当原型中包含引用类型的属性时，问题就比较突出了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person,</span><br><span class="line">    name: 'Bob',</span><br><span class="line">    age: 23,</span><br><span class="line">    friends: ['Court', 'Shelby']</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var p1 = new Person();</span><br><span class="line">var p2 = new Person();</span><br><span class="line"></span><br><span class="line">p1.friends.push('Van');</span><br><span class="line"></span><br><span class="line">alert(p1.friends); // 'Court'， 'Shelby'， 'Van'</span><br><span class="line">alert(p2.friends); // 'Court'， 'Shelby'， 'Van' 此处会有问题</span><br><span class="line"></span><br><span class="line">alert(p1.friends === p2.friends); // true</span><br></pre></td></tr></table></figure><h2 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h2><p>前者用于定义实例属性，后者定义方法和共享的属性，这样每个实例都有自己的一份实例属性副本，但同时又共享着对方法的引用，最大限度地节省内存。如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age;</span><br><span class="line">  <span class="keyword">this</span>.job = job;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">'Court'</span>, <span class="string">'Shelby'</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">    <span class="keyword">constructor</span>: Person,</span><br><span class="line">    sayName() &#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">"Nicholas"</span>, <span class="number">29</span>, <span class="string">"Software Engineer"</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">"greg"</span>, <span class="number">27</span>, <span class="string">"Doctor"</span>);</span><br><span class="line"></span><br><span class="line">p1.friends.push(<span class="string">'Van'</span>);</span><br><span class="line"></span><br><span class="line">alert(p1.friends); <span class="comment">// 'Court', 'Shelby', 'Van'</span></span><br><span class="line">alert(p2.friends); <span class="comment">// 'Court', 'Shelby'</span></span><br><span class="line">alert(p1.sayName === p2.sayName); <span class="comment">// false</span></span><br><span class="line">alert(p1.friends === p2.friends); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高级程序设计笔记三：URI编码方法</title>
      <link href="2018/11/06/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9AURI%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>2018/11/06/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%89%EF%BC%9AURI%E7%BC%96%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="URI编码方法"><a href="#URI编码方法" class="headerlink" title="URI编码方法"></a>URI编码方法</h2><p>Global对象的<code>encodeURI()</code>和<code>encodeURIComponent()</code>方法可以对URI(Uniform Resource Identifiers，通用资源标识符)进行编码，以便发送给浏览器。有效的URI中不能包含某些字符，例如空格。而这两个URI编码方法就可以对URI进行编码，它们用特殊的UTF-8编码替换所有无效的字符，从而让浏览器能够接受和理解。其中， <code>encodeURI()</code>主要用于整个 URI (例如：<a href="http://www.wrox.com/illegal" target="_blank" rel="noopener">http://www.wrox.com/illegal</a> value. htm)，而 <code>encodeURIComponent()</code>主要用于对URI中的某一段(例如前面URL中的 illegal value.htm)进行编码。它们的主要区别在于，<code>encodeURI()</code><strong>不会对本身属于URL的特殊字符进行编码</strong>，例如冒号正斜杠、问号和井字号；而<code>encodeURIComponent()</code>则会对它发现的任何非标准字符进行编码。来看下面的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var uri = &quot;http://www.wrox.com/illegal value.htm&quot;;</span><br><span class="line">alert(encodeURI(uri));</span><br><span class="line">// &quot;http://www.wrox.com/illegal%20value.htm&quot;</span><br><span class="line">alert(encodeURIComponent(uri));</span><br><span class="line">// &quot;http%3A%2F%2Fwww.wrox.com%2Fillegal%20value.htm&quot;</span><br></pre></td></tr></table></figure><p>使用<code>encodeURI()</code>编码后的结果是除了空格之外的其他字符都原封不动，只有空格被替换成了 %20。而<code>encodeURIComponent()</code>方法则会使用对应的编码替换所有非字母数字字符。这也正是可以对整个URI使用<code>encodeURI()</code>，而只能对附加在现有URI后面的字符串使用<code>encodeURIComponent()</code>的原因所在。一般来说，我们使用<code>encodeURIComponent()</code>方法的时候要比使用<code>encodeURI()</code>更多，因为在实践中更常见的是对查询字符串参数而不是对基础URL进行编码。与<code>encodeURI()</code>和<code>encodeURIComponent()</code>方法对应的两个方法分别是<code>decodeURI()</code>和<code>decodeURIComponent()</code>.其中，<code>decodeURI()</code>只能对使用<code>encodeURI()</code>替换的字符进行解码。例如，它可将%20替换成一个空格，但不会对%23作任何处理，因为%23表示井字号（#），而井字号不是使用<code>encodeURI()</code>替换的。同样地， <code>decodeURIComponent()</code>能够解码使用<code>encodeURIComponent()</code>编码的所有字符。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高级程序设计笔记二：基本包装类型</title>
      <link href="2018/10/26/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/"/>
      <url>2018/10/26/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%8C%EF%BC%9A%E5%9F%BA%E6%9C%AC%E5%8C%85%E8%A3%85%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>为了便于操作基本类型值，ECMAScript还供了3个特殊的引用类型: Boolean、 Number 和 String。这些类型与其他引用类型相似，但同时也具有与各自的基本类型相应的特殊行为。实际上，每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象，从而让我们能够调用一些方法来操作这些数据。来看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var s1 = &quot;some text&quot;;</span><br><span class="line">var s2 = s1.substring(2);</span><br></pre></td></tr></table></figure><p>这个例子中的变量s1包含一个字符串，字符串当然是基本类型值。而下一行调用了s1的 substring()方法，并将返回的结果保存在了s2中。我们知道，基本类型值不是对象，因而从逻辑上讲它们不应该有方法(尽管如我们所愿，它们确实有方法)。其实，为了让我们实现这种直观的操作，后台已经自动完成了一系列的处理。当第二行代码访问s1时，访问过程处于一种读取模式，也就是要从内存中读取这个字符串的值。而在读取模式中访问字符串时，后台都会自动完成下列处理。</p><ol><li>创建 string类型的一个实例</li><li>在实例上调用指定的方法</li><li>销毁这个实例。</li></ol><p>可以将以上三个步骤想象成是执行了下列 ECMAScript代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 = new String(&quot;some text&quot;);</span><br><span class="line">var s2 = s1.substring(2);</span><br><span class="line">s1 = nu11;</span><br></pre></td></tr></table></figure><p>经过此番处理，基本的字符串值就变得跟对象一样了。而且，上面这三个步骤也分别适用于Boolean 和 Number类型对应的布尔值和数字值。引用类型与基本包装类型的主要区别就是对象的生存周期。使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码的执行瞬间，然后立即被销毁。这意味着我们不能在运行时为基本类型值添加属性和方法。来看下面的例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var s1 = &quot;some text&quot;;</span><br><span class="line">s1.color = &quot;red&quot;;</span><br><span class="line">alert(s1.color); // undefined</span><br></pre></td></tr></table></figure><p>在此，第二行代码试图为字符串s1添加一个 color属性。但是，当第三行代码再次访问s1时，其 color 属性不见了。问题的原因就是第二行创建的 string对象在执行第三行代码时已经被销毁了。第三行代码又创建自己的 String对象，而该对象没有 color属性。当然，可以显式地调用 Boolean、 Number和 String 来创建基本包装类型的对象。不过，应该在绝对必要的情况下再这样做，因为这种做法很容易让人分不清自己是在处理基本类型还是引用类型的值。对基本包装类型的实例调用 typeof 会返回 “object”，而且所有基本包装类型的对象都会被转换为布尔值true。<br>Object 构造函数也会像工厂方法一样，根据传入值的类型返回相应基本包装类型的实例。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = new Object (&quot;some text&quot;);</span><br><span class="line">alert(obj instanceof string); // true</span><br></pre></td></tr></table></figure><p>把字符串传给 Object构造函数，就会创建 String 的实例；而传入数值参数会得到 Number 的实例，传入布尔值参数就会得到 Boolean的实例。要注意的是，使用 new 调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的。例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var value =&quot;25&quot;;</span><br><span class="line">var number = Number(value);          // 转型函数</span><br><span class="line">alert(typeof number);                // &quot;number&quot;</span><br><span class="line">var obj = new Number(value);         // 构造函数</span><br><span class="line">alert(typeof obj)                    // &quot;object&quot;</span><br></pre></td></tr></table></figure><p>在这个例子中，变量 number 中保存的是基本类型的值25，而变量obj中保存的是 Number 的实例。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小程序和h5页面之间的互相跳转</title>
      <link href="2018/10/23/miniprogram/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%92%8Ch5%E9%A1%B5%E9%9D%A2%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B7%B3%E8%BD%AC/"/>
      <url>2018/10/23/miniprogram/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%92%8Ch5%E9%A1%B5%E9%9D%A2%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B7%B3%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="小程序跳转到-h5-页面"><a href="#小程序跳转到-h5-页面" class="headerlink" title="小程序跳转到 h5 页面"></a>小程序跳转到 h5 页面</h2><p>小程序代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;url: &apos;/pages/webview?url=&apos; + encodeURIComponent(&apos;h5页面的 url&apos;)&#125;);</span><br></pre></td></tr></table></figure><p>webview.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-view src=&quot;&#123;&#123;url&#125;&#125;&quot; bindmessage=&quot;handlePostMessage&quot;&gt;&lt;/web-view&gt;</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line"> this.setData(&#123;</span><br><span class="line">   url: decodeURIComponent(options.url),</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 接收 h5 页面传递过来的参数</span><br><span class="line">handlePostMessage: function (e) &#123;</span><br><span class="line">  const data = e.detail;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>h5 页面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">···</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;https://res.wx.qq.com/open/js/jweixin-1.3.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>记得把 url 的 host 添加到后台的合法域名中。</p><h2 id="h5-页面跳回小程序"><a href="#h5-页面跳回小程序" class="headerlink" title="h5 页面跳回小程序"></a>h5 页面跳回小程序</h2><p>在 h5 页面的任何点击事件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-disable */</span><br><span class="line"> wx.miniProgram.getEnv(function (res) &#123;</span><br><span class="line">   if (res.miniprogram) &#123;</span><br><span class="line">     wx.miniProgram.switchTab(&#123;url: &apos;/pages/home/home&apos;&#125;);</span><br><span class="line"> wx.miniProgram.postMessage(&#123;data: &#123;id: &apos;1234&apos;&#125;&#125;); // 传的参数</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> /* eslint-enable */</span><br></pre></td></tr></table></figure><p>请注意，<strong>是wx.miniProgram，不是 window.wx.miniProgram</strong></p>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 高级程序设计笔记一：简介、script 标签</title>
      <link href="2018/09/30/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E7%AE%80%E4%BB%8B%E3%80%81script%20%E6%A0%87%E7%AD%BE/"/>
      <url>2018/09/30/js/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%80%EF%BC%9A%E7%AE%80%E4%BB%8B%E3%80%81script%20%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<p>一个完整的JavaScript实现应该由下列三个不同的部分组成：</p><p><strong>1. 核心（ECMAScript）</strong></p><p>由ECMA-262定义的ECMAScript与Web浏览器没有依赖关系，Web浏览器只是ECMAScript实现可能的宿主环境之一（其他如Node、Adobe Flash），宿主环境不仅提供基本的ECMAScript实现，同时也会提供该语言的扩展，以便与环境之间对接交互。它规定了这门语言的下列组成部分：语法、类型、语句、关键字、保留字、操作符、对象。</p><p><strong>2. 文档对象模型（DOM）</strong></p><p>文档对象模型（DOM，Document Object Model）是针对 XML 但经过扩展用于HTML的应用程序编程接口（API，Application Programming Interface）。DOM 把整个页面映射为一个多层节点结构。HTML和XML页面中的每个组成部分都是某种类型的节点，这些节点又包含着不同类型的数据。通过DOM创建的这个表示文档的树结构，开发人员获得了控制页面内容和结构的主动权。</p><p>DOM级别：</p><p>DOM1级（DOM Level 1）由两个模块组成：DOM Core（规定了如何映射基于XML的文档结构）和DOM HTML（在 Core 的基础上加以扩展，添加了针对HTML的对象和方法）。</p><p>DOM2级扩充了鼠标和用户界面事件、范围、遍历等细分模块，而且通过对象接口增加了对CSS的支持。</p><p>DOM3级引入了以统一方式加载和保存文档的方法——在DOM加载和保存（DOM Load and Save）模块中定义；新增了验证文档的方法——在DOM验证（DOM Validation）模块中定义。</p><p><strong>3. 浏览器对象模型（BOM）</strong></p><p>浏览器对象模型（BOM，Browser Object Model）只处理浏览器窗口和框架，如 window， location， navigator， screen， 对 cookies 的支持、像 XMLHttpRequest 这样的自定义对象。</p><p><strong>script 标签的属性：</strong></p><ol><li>async：表示应该立即下载脚本，但不应该妨碍页面中的其他操作，比如下载其他资源或等待加载其他脚本，一定在页面的Load事件前执行，但可能会在DOMContentLoaded事件触发之前或之后执行。</li><li>charset：代码的字符集</li><li>defer：告诉浏览器立即下载，但是延迟执行（遇到标签之后再执行），HTML5规范要求脚本按照他们出现的先后顺序执行（先于DOMContentLoaded事件），</li><li><del>language：用于表示编写代码使用的脚本语言，已弃用</del></li><li>src：表示包含要执行外部代码的文件</li><li>type：可以看成是 language 的替代属性看，</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>微信订阅号开发之获取网页授权</title>
      <link href="2018/09/17/miniprogram/%E5%BE%AE%E4%BF%A1%E8%AE%A2%E9%98%85%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
      <url>2018/09/17/miniprogram/%E5%BE%AE%E4%BF%A1%E8%AE%A2%E9%98%85%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<p>题记：项目（Vue）是h5页面，主要用于公众号里面的活动，目的是增加公众号关注人数，达到推广的目的，其中涉及到获取用户的昵称、头像、unionid等基本信息。<br>由于微信公众号改版成订阅号之后，并没有获取用户信息的接口，服务号才有，详情可查看<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842" target="_blank" rel="noopener">官方文档</a>。<br>所以目前想到的思路是借用和订阅号关联的服务号获取 code，然后利用获取到的code 发送给后端再请求用户信息。</p><p>首先，route.js 里面配置 needUnionId，通过 checkUnionId HOC 加工页面使其先获取 unionid，然后再通过 unionid 请求数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Util&#125; <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store'</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'./store/module/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;checkUnionId&#125; <span class="keyword">from</span> <span class="string">'./hoc'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamicImport = <span class="function">(<span class="params">path</span>) =&gt;</span> <span class="keyword">async</span> (resolve) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./pages/<span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">  resolve(<span class="built_in">module</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置项：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * meta:</span></span><br><span class="line"><span class="comment"> *    title:                页面标题</span></span><br><span class="line"><span class="comment"> *    checkUnionId:         如果需要一进入页面就发请求并携带参数 unionid，则接入 checkUnionId</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：以下的 component 为 dynamicImport 类型的，dynamicImport 的参数都有 ../pages/ 前缀，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> routerList = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/wx-login'</span>,</span><br><span class="line">    name: <span class="string">'WXLogin'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      needUnionId: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: dynamicImport(<span class="string">'login/wx-login'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'login'</span>,</span><br><span class="line">    component: dynamicImport(<span class="string">'login/login'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    name: <span class="string">'not-found'</span>,</span><br><span class="line">    component: dynamicImport(<span class="string">'exception/not-found'</span>),</span><br><span class="line">    meta: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">machiningRouter</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> needUnionId = (v.meta || &#123;&#125;).needUnionId === <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (v.component &amp;&amp; needUnionId) &#123;</span><br><span class="line">      v.component = checkUnionId(v.component);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!needUnionId &amp;&amp; v.children) &#123;</span><br><span class="line">      machiningRouter(v.children);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">machiningRouter(routerList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// mode: 'history',</span></span><br><span class="line">  <span class="comment">// base: '/',</span></span><br><span class="line">  routes: routerList</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> metaData = to.meta || &#123;&#125;;</span><br><span class="line">  !metaData.hidden &amp;&amp; http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  metaData.title &amp;&amp; Util.setDocumentTitle(metaData.title);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">router.afterEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> metaData = route.meta || &#123;&#125;;</span><br><span class="line">  !metaData.hidden &amp;&amp; http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>先看 wx-login.vue 的使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Url, Util&#125; <span class="keyword">from</span> <span class="string">'@/utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;WeChat, closeWindow&#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'WXLogin'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()  &#123;</span><br><span class="line">        <span class="comment">// 不需要</span></span><br><span class="line">        <span class="comment">// this.requestData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 适用于一进入页面就请求数据，checkUnionId 会自动调用，不需要在 created 里面手动调用</span></span><br><span class="line">        <span class="keyword">async</span> requestData() &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 适用于点击按钮才请求数据，此时 checkUnionId 已经获取到了 unionid</span></span><br><span class="line">        <span class="keyword">async</span> handleLogin() &#123;</span><br><span class="line">        <span class="keyword">const</span> param = &#123;</span><br><span class="line">          unionid: <span class="keyword">this</span>.$parent.unionId,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(Url.PMS_QR_CODE_LOGIN, param);</span><br><span class="line">        <span class="keyword">this</span>.$toast(<span class="string">'扫码登录成功'</span>);</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'success'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，checkUnionId.js 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions, mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;getUnionId, WeChat&#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验 openId 是否为 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (component) =&gt; (&#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'unionId'</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  props: component.props,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(component, &#123;</span><br><span class="line">      on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">      attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line">      props: <span class="keyword">this</span>.$props</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.requestUnionId();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'setLoading'</span>]),</span><br><span class="line">    <span class="keyword">async</span> requestUnionId() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.unionId) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'local unionId:'</span>, <span class="keyword">this</span>.unionId);</span><br><span class="line">          <span class="keyword">this</span>.afterRequestUnionId();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.$toast(<span class="string">'获取信息中···'</span>);</span><br><span class="line">          <span class="keyword">await</span> getUnionId();</span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">new</span> WeChat().init();</span><br><span class="line">          <span class="keyword">this</span>.afterRequestUnionId();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'check-unionid requestUnionId:'</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    afterRequestUnionId() &#123;</span><br><span class="line">      <span class="comment">// fixme: mounted 先于子组件的 mounted 执行，所以不在 setTimeout 里执行的话，this.$children 获取不到，因为页面是按需加载，不是全量加载</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$children.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!v.requestData || <span class="built_in">Object</span>.prototype.toString.call(v) !== <span class="string">'[object Function]'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'用 checkUnionId 装饰的页面中，如果需要一进入页面就立即发送带 union_id 的请求，那么 methods 中必须有 requestData function 用于获取初始数据，否则，请忽略此条。'</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v.requestData();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wechat.js 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/store'</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'@/store/module/user'</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'@/store/module/http'</span>;</span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'./util'</span>;</span><br><span class="line"><span class="keyword">import</span> axiosInstance <span class="keyword">from</span> <span class="string">'./axios-instance'</span>;</span><br><span class="line"><span class="keyword">import</span> Url <span class="keyword">from</span> <span class="string">'./url'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> APP_ID = <span class="string">'APP_ID'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_DATA = &#123;</span><br><span class="line">  appId: APP_ID,</span><br><span class="line">  apiList: [</span><br><span class="line">    <span class="string">'checkJsApi'</span>,</span><br><span class="line">    <span class="string">'closeWindow'</span>,</span><br><span class="line">    <span class="string">'hideAllNonBaseMenuItem'</span></span><br><span class="line">  ],</span><br><span class="line">  errorType: [</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'1'</span>, <span class="attr">msg</span>: <span class="string">'分享成功'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'2'</span>, <span class="attr">msg</span>: <span class="string">'微信客户端版本过低，请升级最新版本'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'3'</span>, <span class="attr">msg</span>: <span class="string">'获取接口的签名失效，请重新调用方法获取API授权签名'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'4'</span>, <span class="attr">msg</span>: <span class="string">'微信分享失败，请重新分享'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'5'</span>, <span class="attr">msg</span>: <span class="string">'接口访问失败'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'6'</span>, <span class="attr">msg</span>: <span class="string">'jsApi配置成功'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信 api 全局管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.hasInit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.hasInit) &#123;</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// const config = await axiosInstance.post(Url.SIGNATURE, &#123;url: location.origin&#125;);</span></span><br><span class="line">        <span class="keyword">const</span> config = &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> registerData = &#123;</span><br><span class="line">          debug: <span class="literal">false</span>,</span><br><span class="line">          appId: DEFAULT_DATA.appId,</span><br><span class="line">          timestamp: config.timestamp,</span><br><span class="line">          nonceStr: config.noncestr,</span><br><span class="line">          signature: config.signature,</span><br><span class="line">          jsApiList: DEFAULT_DATA.apiList</span><br><span class="line">        &#125;;</span><br><span class="line">        wx.config(registerData);</span><br><span class="line">        wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'wx.ready'</span>);</span><br><span class="line">          wx.hideAllNonBaseMenuItem &amp;&amp; wx.hideAllNonBaseMenuItem();</span><br><span class="line">          <span class="keyword">if</span> (!localStorage.getItem(<span class="string">'userUnionId'</span>)) &#123;</span><br><span class="line">            closeWindow();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unionid is null'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.hasInit = <span class="literal">true</span>;</span><br><span class="line">          resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        wx.error(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          wx.hideAllNonBaseMenuItem &amp;&amp; wx.hideAllNonBaseMenuItem();</span><br><span class="line">          <span class="comment">// Vue.$toast('请退出去重新进入');</span></span><br><span class="line">          <span class="comment">// closeWindow();</span></span><br><span class="line">          <span class="comment">// throw res;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">typeof</span> wx !== <span class="string">'undefined'</span> &amp;&amp; wx.closeWindow &amp;&amp; wx.closeWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 code</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">encodeURIComponent</span>(location.href);</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=<span class="subst">$&#123;APP_ID&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;url&#125;</span>&amp;response_type=code&amp;scope=snsapi_userinfo&amp;connect_redirect=1&amp;state=<span class="subst">$&#123;Util.getRandomKey()&#125;</span>#wechat_redirect`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 user unionId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnionId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> existedUnionId = localStorage.getItem(<span class="string">'userUnionId'</span>);</span><br><span class="line">    <span class="keyword">if</span> (existedUnionId) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'缓存中的 onion_id:'</span>, existedUnionId, <span class="string">', 不发请求'</span>);</span><br><span class="line">        http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">        user.actions.setOpenId(store, existedUnionId);</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> code = Util.getUrlSearchParameter().code;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code:'</span>, code);</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axiosInstance.get(Url.USER_INFO, &#123;<span class="attr">params</span>: &#123;code&#125;&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            closeWindow();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;);</span><br><span class="line">        result.telephone &amp;&amp; user.actions.setTelephoneNumber(store, result.telephone);</span><br><span class="line">        result.openid &amp;&amp; user.actions.setOpenId(store, result.openid);</span><br><span class="line">        result.unionid &amp;&amp; user.actions.setUnionId(store, result.unionid);</span><br><span class="line">        result.nickname &amp;&amp; user.actions.setNickname(store, result.nickname);</span><br><span class="line">        result.headimgurl &amp;&amp; user.actions.setHeadImgUrl(store, result.headimgurl);</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有 code，微信即将重定向···'</span>);</span><br><span class="line">        getCode();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  WeChat,</span><br><span class="line">  getUnionId,</span><br><span class="line">  closeWindow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>wechat.js 里面涉及到的 Util 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生成唯一的 key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRandomKey</span>(<span class="params">len = <span class="number">6</span></span>) </span>&#123;</span><br><span class="line">    len = <span class="built_in">Object</span>.prototype.toString.call(len) === <span class="string">'[object Number]'</span> ? len : <span class="number">6</span>;</span><br><span class="line">    len = <span class="built_in">Math</span>.abs(len) || <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substr(-len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取 URL 的 search 参数值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlSearchParameter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search.replace(<span class="string">'?'</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> searchList = search.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">const</span> searchObj = &#123;&#125;;</span><br><span class="line">    searchList.length &gt; <span class="number">0</span> &amp;&amp; searchList.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> list = v.split(<span class="string">'='</span>);</span><br><span class="line">      <span class="keyword">if</span> (list.length === <span class="number">2</span>) &#123;</span><br><span class="line">        searchObj[list[<span class="number">0</span>]] = list[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> searchObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小程序 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>浏览器/iframe 全屏、退出全屏</title>
      <link href="2018/08/15/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8-iframe-%E5%85%A8%E5%B1%8F%E3%80%81%E9%80%80%E5%87%BA%E5%85%A8%E5%B1%8F/"/>
      <url>2018/08/15/frontend/%E6%B5%8F%E8%A7%88%E5%99%A8-iframe-%E5%85%A8%E5%B1%8F%E3%80%81%E9%80%80%E5%87%BA%E5%85%A8%E5%B1%8F/</url>
      
        <content type="html"><![CDATA[<p>外面的 html 文件 index.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;fullScreen&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;iframe allowfullscreen src=&quot;iframe.html&quot; frameborder=&quot;0&quot; style=&quot;width: 500px;height: 500px;background:#aaa&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>里面嵌套的 iframe.html 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;iframe&lt;/h1&gt;</span><br><span class="line">    &lt;button id=&quot;button&quot;&gt;全屏&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 判断是否允许全屏</span><br><span class="line">        var fullscreenEnabled =</span><br><span class="line">            document.fullscreenEnabled ||</span><br><span class="line">            document.mozFullScreenEnabled ||</span><br><span class="line">            document.webkitFullscreenEnabled ||</span><br><span class="line">            document.msFullscreenEnabled;</span><br><span class="line">        // 全屏</span><br><span class="line">        function launchFullscreen(element) &#123;</span><br><span class="line">            if (element.requestFullscreen) &#123;</span><br><span class="line">                element.requestFullscreen();</span><br><span class="line">            &#125; else if (element.mozRequestFullScreen) &#123;</span><br><span class="line">                element.mozRequestFullScreen();</span><br><span class="line">            &#125; else if (element.msRequestFullscreen) &#123;</span><br><span class="line">                element.msRequestFullscreen();</span><br><span class="line">            &#125; else if (element.webkitRequestFullscreen) &#123;</span><br><span class="line">                element.webkitRequestFullScreen();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 退出全屏</span><br><span class="line">        function exitFullscreen() &#123;</span><br><span class="line">            if (document.exitFullscreen) &#123;</span><br><span class="line">                document.exitFullscreen();</span><br><span class="line">            &#125; else if (document.msExitFullscreen) &#123;</span><br><span class="line">                document.msExitFullscreen();</span><br><span class="line">            &#125; else if (document.mozCancelFullScreen) &#123;</span><br><span class="line">                document.mozCancelFullScreen();</span><br><span class="line">            &#125; else if (document.webkitExitFullscreen) &#123;</span><br><span class="line">                document.webkitExitFullscreen();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var btn = document.querySelector(&apos;#button&apos;);</span><br><span class="line">        if (fullscreenEnabled) &#123;</span><br><span class="line">            btn.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class="line">                var fullscreenElement =</span><br><span class="line">                    document.fullscreenElement ||</span><br><span class="line">                    document.mozFullScreenElement ||</span><br><span class="line">                    document.webkitFullscreenElement;</span><br><span class="line">                if (fullscreenElement) &#123;</span><br><span class="line">                    exitFullscreen();</span><br><span class="line">                    btn.innerHTML = &apos;全屏&apos;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    launchFullscreen(document.documentElement);</span><br><span class="line">                    btn.innerHTML = &apos;退出全屏&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, false);</span><br><span class="line">        &#125;</span><br><span class="line">        // 监听全屏事件</span><br><span class="line">        document.addEventListener(&apos;webkitfullscreenchange&apos;, function fullscreenChange() &#123;</span><br><span class="line">            if (document.fullscreenEnabled ||</span><br><span class="line">                document.webkitIsFullScreen ||</span><br><span class="line">                document.mozFullScreen ||</span><br><span class="line">                document.msFullscreenElement) &#123;</span><br><span class="line">                console.log(&apos;enter fullscreen&apos;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&apos;exit fullscreen&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, false);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javaweb常见HTTP状态码</title>
      <link href="2017/12/23/frontend/javaweb%E5%B8%B8%E8%A7%81HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>2017/12/23/frontend/javaweb%E5%B8%B8%E8%A7%81HTTP%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>404 -Not Found 代表客户端错误，指的是服务器端无法找到所请求的资源</li><li>400 -请求无效，服务器不理解请求的语法</li><li>403 - 禁止访问 ，服务器拒绝请求</li><li>405 - 资源被禁止，禁用请求中指定的方法</li><li>406 - 无法接受 ，无法使用请求的内容特性响应请求的网页</li><li>407 - 要求代理身份验证 ，此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408 - 请求超时，服务器等候请求时发生超时</li><li>409 - 冲突，服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息</li><li>410 - 已删除，如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411 - 需要有效长度， 服务器不接受不含有效内容长度标头字段的请求。</li><li>412 - 未满足前提条件， 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413 - 请求实体过大，服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414 - 请求的 URI 过长， 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415 - 不支持的媒体类型， 请求的格式不受请求页面的支持。</li><li>416 - 请求范围不符合要求，如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417 - 未满足期望值，服务器未满足”期望”请求标头字段的要求</li><li>500 - 内部服务器错误，无法完成请求</li><li>501 - 未实现 ，服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502 - 网关错误 ，服务器作为网关或代理，从上游服务器收到无效响应</li><li>503 - 服务不可用，服务器目前无法使用，通常，这只是暂时状态</li><li>504 - 网关超时， 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505 - HTTP 版本不受支持， 服务器不支持请求中所用的 HTTP 协议版本</li></ol><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li>2xx - 客户端请求已成功。 <ol><li>200 - 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页</li><li>201 - 已创建，请求成功并且服务器创建了新的资源</li><li>202 - 已接受，但尚未处理</li><li>203 - 非权威性信息，服务器已成功处理了请求，但返回的信息可能来自另一来源</li><li>204 - 无内容，服务器成功处理了请求，但没有返回任何内容</li><li>205 - 重置内容，服务器成功处理了请求，但没有返回任何内容</li><li>206 - 部分内容，服务器成功处理了部分 GET 请求</li></ol></li><li>3xx - 重定向 <ol><li>302 - 对象已移动</li><li>304 - 未修改</li><li>307 - 临时重定向</li></ol></li></ol><p><strong>附上全部状态码：</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">HTTP response codes</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>javascript循环与闭包</title>
      <link href="2017/11/08/js/javascript%E5%BE%AA%E7%8E%AF%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
      <url>2017/11/08/js/javascript%E5%BE%AA%E7%8E%AF%E4%B8%8E%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p>下面我们来看一段代码，清晰地展示了闭包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function bar() &#123;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    return bar;</span><br><span class="line">&#125;</span><br><span class="line">var baz = foo();</span><br><span class="line">baz(); // 2 —— 这就是闭包的效果。</span><br></pre></td></tr></table></figure><p>函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。在 foo() 执行后，其返回值（也就是内部的 bar() 函数）赋值给变量 baz 并调用 baz() ，实际上只是通过不同的标识符引用调用了内部的函数 bar() 。bar() 显然可以被正常执行。但是在这个例子中，它<strong>在自己定义的词法作用域以外的地方执行</strong>。在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很自然地会考虑对其进行回收。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 bar() 本身在使用。拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><p>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p><p>要说明闭包， for 循环是最常见的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, i * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，我们对这段代码行为的预期是分别输出数字 1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次 6。</p><p>仔细想一下，延迟函数的回调会在循环结束时才执行。事实上，当定时器运行时即使每个迭代中执行的是 setTimeout(.., 0) ，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</p><p><strong>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i 。</strong></p><p>我们来试一下通过声明并立即执行一个函数来创建作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(i);</span><br><span class="line">        &#125;, i * 1000);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不行。但是为什么呢？我们现在显然拥有更多的词法作用域了。的确每个延迟函数都会将 IIFE（立即执行函数表达式） 在每次迭代中创建的作用域封闭起来。如果作用域是空的，那么仅仅将它们进行封闭是不够的。仔细看一下，我们的 IIFE 只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。它需要有自己的变量，用来在每个迭代中储存 i 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        var j = i;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(j);</span><br><span class="line">        &#125;, j * 1000);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行了！它能正常工作了！。</p><p>可以对这段代码进行一些改进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function (j) &#123;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(j);</span><br><span class="line">        &#125;, j * 1000);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p><p>仔细思考我们对前面的解决方案的分析。我们使用 IIFE 在每次迭代时都创建一个新的作用域。换句话说，每次迭代我们都需要一个块作用域。 let 声明，可以用来劫持块作用域，并且在这个块作用域中声明一个变量。本质上这是将一个块转换成一个可以被关闭的作用域。因此，下面的代码可以正常运行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    let j = i; // 是的，闭包的块作用域！</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(j);</span><br><span class="line">    &#125;, j * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这还不是全部！for 循环头部的 let 声明还会有一个特殊的行为。这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, i * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，问题解决了！</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>记一次管理系统和路由系统的整合</title>
      <link href="2017/09/28/frontend/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>2017/09/28/frontend/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="需求：整合管理系统和路由系统"><a href="#需求：整合管理系统和路由系统" class="headerlink" title="需求：整合管理系统和路由系统"></a>需求：整合管理系统和路由系统</h2><h2 id="UI："><a href="#UI：" class="headerlink" title="UI："></a>UI：</h2><p>同 <a href="https://preview.pro.ant.design/" target="_blank" rel="noopener">Ant Design Pro</a> </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于左侧管理菜单内容在运行时才能确定，而且点击菜单要和右侧内容区联动，地址栏也要有相应的改变，而目前已有的路由系统都是要运行之前要确定具体的路由组建，因此采用 h5 的 history 和 传统的 document.location 结合的方式实现路由系统；整个项目的数据管理则因为考虑到左侧菜单对应的组件可能会使用包括 redux/mbox/dva/kao 之类的框架，如果也使用框架的话，可能会引起冲突，故通过 react 的 context 来实现。</p><h2 id="路由系统-router-js"><a href="#路由系统-router-js" class="headerlink" title="路由系统 router.js"></a>路由系统 router.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">undefined</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            <span class="keyword">this</span>.history = <span class="built_in">window</span>.history;</span><br><span class="line">            <span class="keyword">this</span>.location = <span class="built_in">window</span>.location;</span><br><span class="line">            instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goBack = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.back();</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goForward = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.forward();</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    go = <span class="function">(<span class="params">num, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.go(num);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushState = <span class="function">(<span class="params">url, state, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        url = url || <span class="string">''</span>;</span><br><span class="line">        <span class="comment">// 加 #，以 hash 的方式改变 url；如果不加，直接以 '/abc' 更改，刷新会报错，请求不到资源（js,css,···）</span></span><br><span class="line">        url = url[<span class="number">0</span>] === <span class="string">'/'</span> ? <span class="string">`#<span class="subst">$&#123;url&#125;</span>`</span> : <span class="string">`/#<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">this</span>.history.pushState(state || <span class="literal">null</span>, <span class="string">''</span>, url);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    replaceState = <span class="function">(<span class="params">url, state, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        url = url || <span class="string">'/'</span>;</span><br><span class="line">        url = url[<span class="number">0</span>] === <span class="string">'/'</span> ? <span class="string">`#<span class="subst">$&#123;url&#125;</span>`</span> : <span class="string">`/#<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">this</span>.history.replaceState(state || <span class="literal">null</span>, <span class="string">''</span>, url);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.history.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">this</span>.location.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span> (url[<span class="number">0</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">            url = url.replace(<span class="string">'/'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rootUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    originUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fullUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.href;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    historyLength = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.history.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器 拦截读写权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Setting the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProperty(target, key) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Deleting the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProperty (target, key, descriptor) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Defining the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    setPrototypeOf (target, proto) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Changing the prototype is forbidden'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerInstance = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> Router(), handler);</span><br></pre></td></tr></table></figure><h2 id="路由装饰函数-withRouter-js"><a href="#路由装饰函数-withRouter-js" class="headerlink" title="路由装饰函数 withRouter.js"></a>路由装饰函数 withRouter.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withRouter = <span class="function">(<span class="params">config = &#123;&#125;</span>) =&gt;</span> <span class="function">(<span class="params">WrapComponent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                data: &#123;&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            config.listenPopState === <span class="literal">true</span> &amp;&amp; <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="keyword">this</span>.handlePopState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handlePopState = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">data</span>: data&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentWillUnmount() &#123;</span><br><span class="line">            config.listenPopState === <span class="literal">true</span> &amp;&amp; <span class="built_in">window</span>.removeEventListener(<span class="string">'popstate'</span>, <span class="keyword">this</span>.handlePopState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> router = &#123;</span><br><span class="line">                go: routerInstance.go,</span><br><span class="line">                goBack: routerInstance.goBack,</span><br><span class="line">                fullUrl: routerInstance.fullUrl,</span><br><span class="line">                rootUrl: routerInstance.rootUrl,</span><br><span class="line">                originUrl: routerInstance.originUrl,</span><br><span class="line">                goForward: routerInstance.goForward,</span><br><span class="line">                pushState: routerInstance.pushState,</span><br><span class="line">                currentUrl: routerInstance.currentUrl,</span><br><span class="line">                replaceState: routerInstance.replaceState,</span><br><span class="line">                currentState: routerInstance.currentState,</span><br><span class="line">                historyLength: routerInstance.historyLength</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> React.createElement(WrapComponent, &#123;</span><br><span class="line">                routerData: <span class="keyword">this</span>.state.data,</span><br><span class="line">                router: <span class="keyword">new</span> <span class="built_in">Proxy</span>(router, handler),<span class="comment">// handler 上面定义的拦截器</span></span><br><span class="line">                ...this.props</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="入口组建-App-js"><a href="#入口组建-App-js" class="headerlink" title="入口组建 App.js"></a>入口组建 App.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Layout&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> GYSider <span class="keyword">from</span> <span class="string">'./GYSider'</span>;</span><br><span class="line"><span class="keyword">import</span> GYHeader <span class="keyword">from</span> <span class="string">'./GYHeader'</span>;</span><br><span class="line"><span class="keyword">import</span> GYContent <span class="keyword">from</span> <span class="string">'./GYContent'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_1 <span class="keyword">from</span> <span class="string">'../app/Test_1'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_2 <span class="keyword">from</span> <span class="string">'../app/Test_2'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_3 <span class="keyword">from</span> <span class="string">'../app/Test_3'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_1_1_1 <span class="keyword">from</span> <span class="string">'../app/Test_1_1_1'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'../util/router'</span>;</span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'../util/Util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Header, Sider, Content&#125; = Layout;</span><br><span class="line"></span><br><span class="line">@withRouter()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">const</span> propsState = props.initialState || &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> initialState = &#123;</span><br><span class="line">            menuList: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_1'</span>,</span><br><span class="line">                    icon: <span class="string">'user'</span>,</span><br><span class="line">                    text: <span class="string">'test_1'</span>,</span><br><span class="line">                    component: Test_1,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'test_1/test_1_1'</span>,</span><br><span class="line">                            text: <span class="string">'test_1_1'</span>,</span><br><span class="line">                            children: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    path: <span class="string">'test_1/test_1_1/test_1_1_1'</span>,</span><br><span class="line">                                    component: Test_1_1_1,</span><br><span class="line">                                    text: <span class="string">'test_1_1_1'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_2'</span>,</span><br><span class="line">                    icon: <span class="string">'setting'</span>,</span><br><span class="line">                    text: <span class="string">'test_2'</span>,</span><br><span class="line">                    component: Test_2</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_3'</span>,</span><br><span class="line">                    icon: <span class="string">'logout'</span>,</span><br><span class="line">                    text: <span class="string">'test_3'</span>,</span><br><span class="line">                    component: Test_3</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            store: &#123;</span><br><span class="line">                menuList: initialState.menuList.concat(propsState.menuList || [])</span><br><span class="line">            &#125;,</span><br><span class="line">            collapsed: <span class="literal">false</span>,</span><br><span class="line">            currentPath: <span class="string">''</span>,</span><br><span class="line">            currentComponent: GYContent</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.getAllComponent(<span class="keyword">this</span>.state.store.menuList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存所有的路由对应的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getAllComponent = <span class="function">(<span class="params">menuList = []</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.allComponent = <span class="keyword">this</span>.allComponent || <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        menuList.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.path &amp;&amp; Util.isReactComponent(val.component)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.allComponent.set(val.path, val.component);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Util.isArray(val.children)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.getAllComponent(val.children);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object,</span><br><span class="line">        onClickAction: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object.isRequired,</span><br><span class="line">        onClickAction: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子组件获取 store</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            store: <span class="keyword">this</span>.state.store,</span><br><span class="line">            onClickAction: <span class="keyword">this</span>.handleClickAction</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 store 时需要返回合并之后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    handleClickAction = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="built_in">Object</span>.assign(<span class="keyword">this</span>.state, data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="comment">// 刷新浏览器，跳转到相应页面</span></span><br><span class="line">        <span class="keyword">const</span> currentPath = <span class="keyword">this</span>.state.currentPath;</span><br><span class="line">        <span class="keyword">const</span> documentHref = <span class="keyword">this</span>.props.router.currentUrl();</span><br><span class="line">        <span class="keyword">if</span> (currentPath !== documentHref &amp;&amp; <span class="keyword">this</span>.allComponent.has(documentHref)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                currentComponent: <span class="keyword">this</span>.allComponent.get(documentHref)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onToggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            collapsed: !<span class="keyword">this</span>.state.collapsed</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onCollapse = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCollapse'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> Component = <span class="keyword">this</span>.state.currentComponent;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Layout className=<span class="string">'gy-app-view'</span>&gt;</span><br><span class="line">                &lt;Sider</span><br><span class="line">                    collapsible</span><br><span class="line">                    breakpoint=<span class="string">"md"</span></span><br><span class="line">                    width=&#123;<span class="number">256</span>&#125;</span><br><span class="line">                    collapsed=&#123;<span class="keyword">this</span>.state.collapsed&#125;</span><br><span class="line">                    trigger=&#123;<span class="literal">null</span>&#125;</span><br><span class="line">                    onCollapse=&#123;<span class="keyword">this</span>.onCollapse&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;GYSider/&gt;</span><br><span class="line">                &lt;<span class="regexp">/Sider&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Layout&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Header className='header'&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;GYHeader collapsed=&#123;this.state.collapsed&#125; onToggle=&#123;this.onToggle&#125;/</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Header&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Content className='gy-content'&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;Component/</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Content&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Layout&gt;</span><br><span class="line">            &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏组件"><a href="#侧边栏组件" class="headerlink" title="侧边栏组件"></a>侧边栏组件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Menu, Icon&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">const</span> SubMenu = Menu.SubMenu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'../util/Util'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'../util/router'</span>;</span><br><span class="line"><span class="keyword">import</span> connectStore <span class="keyword">from</span> <span class="string">'../util/connectStore'</span>;</span><br><span class="line"></span><br><span class="line">@withRouter()   <span class="comment">// 接入路由</span></span><br><span class="line">@connectStore   <span class="comment">// 接入 store</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GYSider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillReceiveProps(nextProps, nextContext) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'点击 subMenu 更新 store'</span>, nextContext.store);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMenuClick = <span class="function">(<span class="params">&#123;item, key, keyPath&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">const</span> path = item.props.path;</span><br><span class="line">        <span class="keyword">const</span> currentUrl = <span class="keyword">this</span>.props.router.currentUrl() || <span class="string">''</span>;</span><br><span class="line">        path &amp;&amp; path !== currentUrl &amp;&amp; item.props.component</span><br><span class="line">        &amp;&amp; self.props.router.pushState(<span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>, &#123;<span class="attr">path</span>: <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>&#125;, () =&gt; &#123;</span><br><span class="line">            self.context.onClickAction(&#123;</span><br><span class="line">                currentPath: path,</span><br><span class="line">                currentComponent: item.props.component</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 store 示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onSubMenuClick = <span class="function">(<span class="params">&#123;key, domEvent&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> store = <span class="keyword">this</span>.context.store;</span><br><span class="line">        <span class="keyword">this</span>.context.onClickAction(&#123;<span class="attr">store</span>: <span class="built_in">Object</span>.assign(store, &#123;[key]: key&#125;)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createMenu = <span class="function">(<span class="params">arr = []</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.map &amp;&amp; arr.map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!val.text) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> key = val.path || Util.generateKey();</span><br><span class="line">                    <span class="keyword">return</span> Util.isArray(val.children) ?</span><br><span class="line">                        &lt;SubMenu</span><br><span class="line">                            key=&#123;key&#125;</span><br><span class="line">                            onTitleClick=&#123;<span class="keyword">this</span>.onSubMenuClick&#125;</span><br><span class="line">                            title=&#123;&lt;span&gt;&#123;val.icon &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">val.icon</span>&#125;`&#125;/&gt;</span></span>&#125;</span><br><span class="line">                                &lt;span&gt;</span><br><span class="line">                                    &#123;val.text&#125;</span><br><span class="line">                                &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                            &lt;/</span>span&gt;&#125;&gt;</span><br><span class="line">                            &#123;<span class="keyword">this</span>.createMenu(val.children)&#125;</span><br><span class="line">                        &lt;<span class="regexp">/SubMenu&gt;</span></span><br><span class="line"><span class="regexp">                        :</span></span><br><span class="line"><span class="regexp">                        &lt;Menu.Item path=&#123;val.path&#125; key=&#123;key&#125; component=&#123;val.component&#125;&gt;</span></span><br><span class="line"><span class="regexp">                            &#123;val.icon &amp;&amp; &lt;Icon type=&#123;`$&#123;val.icon&#125;`&#125;/</span>&gt;&#125;</span><br><span class="line">                            &lt;span&gt;</span><br><span class="line">                                &#123;val.text&#125;</span><br><span class="line">                            &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Menu.Item&gt;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).filter(<span class="function"><span class="params">val</span> =&gt;</span> val !== <span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div className=<span class="string">'logo'</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Menu</span></span><br><span class="line"><span class="regexp">                    theme="dark"</span></span><br><span class="line"><span class="regexp">                    mode="inline"</span></span><br><span class="line"><span class="regexp">                    onClick=&#123;this.onMenuClick&#125;</span></span><br><span class="line"><span class="regexp">                    style=&#123;&#123;margin: '16px 0', width: '100%'&#125;&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    &#123;this.createMenu(this.context.store.menuList)&#125;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Menu&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default GYSider;</span></span><br></pre></td></tr></table></figure><h2 id="接入-store-装饰函数-connectStore-js"><a href="#接入-store-装饰函数-connectStore-js" class="headerlink" title="接入 store 装饰函数 connectStore.js"></a>接入 store 装饰函数 connectStore.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">connectStore</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Component || <span class="keyword">typeof</span> Component !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`<span class="subst">$&#123;Component &amp;&amp; Component.name&#125;</span> is not a class`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Component.contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object,</span><br><span class="line">        onClickAction: PropTypes.func</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> 上面的入口组建 App</span><br><span class="line"><span class="keyword">import</span> UMD <span class="keyword">from</span> <span class="string">'./UMD'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> initialState = &#123;</span><br><span class="line">            menuList: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'umd'</span>,        <span class="comment">//对应的地址栏 url</span></span><br><span class="line">                    icon: <span class="string">'setting'</span>,    <span class="comment">//侧边栏的显示图标</span></span><br><span class="line">                    text: <span class="string">'umd'</span>,        <span class="comment">//侧边栏的显示文字</span></span><br><span class="line">                    component: UMD      <span class="comment">//点击时对应的右侧内容区组件</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;App initialState=&#123;initialState&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WrapView;</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> WrapView <span class="keyword">from</span> <span class="string">'./app/components/WrapView'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main App View</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">WrapView</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><p><strong>核心思路</strong>是通过 context 达到类似于 redux 管理数据的目的，App.js 提供 store（存储数据） 和 onClickAction（修改 store）给子组件，子组件通过 connectStore 装饰函数获取到 store 和 onClickAction，点击侧边栏的时候，先取到设置的 path 和 component，然后通过 onCLickAction 设置 currentComponent 和 currentPath，然后 setState 即可实现需求。<br>目前还有一个问题，就是刷新浏览器的时候如何跳转到相应的页面呢？<br>可以在 App.js 里面先获取到所有的 component 和 path 然后保存起来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存所有的路由对应的组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">getAllComponent = <span class="function">(<span class="params">menuList = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.allComponent = <span class="keyword">this</span>.allComponent || <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    menuList.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val.path &amp;&amp; Util.isReactComponent(val.component)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.allComponent.set(val.path, val.component);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Util.isArray(val.children)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getAllComponent(val.children);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在 App.js 通过以下代码跳转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 刷新浏览器，跳转到相应页面</span></span><br><span class="line">    <span class="keyword">const</span> currentPath = <span class="keyword">this</span>.state.currentPath;</span><br><span class="line">    <span class="keyword">const</span> documentHref = <span class="keyword">this</span>.props.router.currentUrl();</span><br><span class="line">    <span class="keyword">if</span> (currentPath !== documentHref &amp;&amp; <span class="keyword">this</span>.allComponent.has(documentHref)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            currentComponent: <span class="keyword">this</span>.allComponent.get(documentHref)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>fatal: Could not read from remote repository.的解决办法</title>
      <link href="2017/07/28/git/fatal-Could-not-read-from-remote-repository-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2017/07/28/git/fatal-Could-not-read-from-remote-repository-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>查看远端地址 <code>git remote –v</code><br>查看配置 <code>git config --list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .  // 暂存所有的更改</span><br><span class="line">git checkout . // 丢弃所有的更改</span><br><span class="line">git status // 查看文件状态</span><br><span class="line">git commit -m &quot;本次要提交的概要信息&quot; // 提交</span><br></pre></td></tr></table></figure><p>设置远端仓库地址 <code>git remote set-url origin 你的远端地址</code></p><p>git remote add origin_new 新的地址</p><p>git remote –v查看</p><p>git push origin_new master重新推送</p><p>下面是设置用户名</p><p>Git config –global user.name “用户名”</p><p>git config –global user.email 邮箱地址</p><p>设置代理： <code>git config --global https.proxy http://127.0.0.1:1080</code></p><p>取消设置代理：<code>git config --global --unset https.proxy</code></p><p>取消git init操作时出现    <strong>rm: cannot remove ‘.git’: Is a directory</strong><br>是因为输入的命令是：    <strong>rm -f .git</strong><br>解决办法：<strong>rm -rf .git</strong> 即删除整个.git目录</p><p>failed to push some refs to ‘git@github.com:***.git’ hint: Updates were rejected ···<br>使用git push origin master的时候出现一下错误：</p><p>解决办法：<br>git push -f origin master或者git pull下</p><p>恢复不小心删除的 <strong>git stash</strong> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fsck  //找到dangling的对象</span><br><span class="line">git show id  //上面列出的每一条记录的最后一个字符串，按 enter 查看具体信息</span><br><span class="line">git stash apply id</span><br></pre></td></tr></table></figure><p><strong>git 回滚提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//reset将一个分支的末端指向另一个提交。这可以用来移除当前分支的一些提交, 让master分支向后回退了两个提交</span><br><span class="line">git checkout master</span><br><span class="line">git reset HEAD~2</span><br><span class="line"></span><br><span class="line">//Revert撤销一个提交的同时会创建一个新的提交, 找出倒数第二个提交，然后创建一个新的提交来撤销这些更改，然后把这个提交加入项目中。</span><br><span class="line">git revert HEAD~2</span><br></pre></td></tr></table></figure><p>错误：<strong>Please enter a commit message to explain why this merge is necessary.</strong> 解决办法：</p><ol><li>（可选）按键盘字母 i 进入insert模式</li><li>（可选）修改最上面那行黄色合并信息</li><li>按键盘左上角”Esc” （退出insert模式）</li><li>输入”:wq”,按回车键即可（提交）</li></ol><p><strong>gitignore notworking</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;fixed untracked files&quot;</span><br></pre></td></tr></table></figure><p><strong>git Failed to connect to <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> port 80: Timed out</strong> 可能是因为设置了代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy//查看代理</span><br><span class="line">git config --global --unset http.proxy//取消代理</span><br></pre></td></tr></table></figure><p><strong>HTTP Basic access denied on Git</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset credential.helper</span><br><span class="line">git clone &apos;···&apos;</span><br><span class="line">login username，password</span><br></pre></td></tr></table></figure><p><strong>rebase 和 merge 区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p> rebase 选项告诉 Git 把你的提交移到同步了中央仓库修改后的 master 分支的顶部。rebase 操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>如果没有 rebase， pull 操作仍然可以完成，但每次 pull 操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。<br>合并玩冲突之后，<code>git rebase --continue</code>，Git 会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。<br>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：<code>git rebase --abort</code></p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建一个包含 redux、router、国际化的前端项目框架</title>
      <link href="2017/06/08/frontend/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-redux%E3%80%81router%E3%80%81%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
      <url>2017/06/08/frontend/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-redux%E3%80%81router%E3%80%81%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>搭建一个交互比较多的 <strong>react 前端项目框架</strong>，数据可预测，可路由跳转，可国际化，数据操作可控制</p><h2 id="使用的主要类库"><a href="#使用的主要类库" class="headerlink" title="使用的主要类库"></a>使用的主要类库</h2><ul><li>i18next 国际化</li><li>react-i18next</li><li>i18next-browser-languagedetector</li><li>immutability-helper</li><li>immutable 处理数据</li><li>react</li><li>react-dom</li><li>react-redux 管理数据</li><li>react-router 路由</li><li>react-router-redux 路由接入 store</li><li>redux<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2></li></ul><ul><li>因为 router 是异步过程，所以注入到 store 中，通过 action 跳转路由</li><li>在 react-redux 原生 action、reducer 之上封装了一层，便于分发、匹配 action、reducer</li><li>执行顺序： action -&gt; 前置拦截器（return true）-&gt; reducer（修改 store）-&gt; componentWillReceiveProps -&gt; shouldComponentUpdate（return true）-&gt; render -&gt; 后置拦截器</li></ul><p><strong>项目地址</strong>：<a href="https://github.com/liangxinwei/redux-ele" target="_blank" rel="noopener">https://github.com/liangxinwei/redux-ele</a></p><h2 id="项目布局"><a href="#项目布局" class="headerlink" title="项目布局"></a>项目布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">├── cfg                                 webpack 配置文件</span><br><span class="line">│   ├── base.js                        webpack 配置</span><br><span class="line">│   ├── default.js                     loader，plugin</span><br><span class="line">│   ├── dev.js                         dev 环境 </span><br><span class="line">│   └── dist.js                        dist 环境</span><br><span class="line">├── src                                 源码目录</span><br><span class="line">│   ├── app</span><br><span class="line">│   │   ├── component                  具体业务组件，配合 routes 目录使用</span><br><span class="line">│   │   ├── config                     store 配置</span><br><span class="line">│   │   │   ├── AppActionRouter.js    分发相应 type 的 action</span><br><span class="line">│   │   │   ├── AppReducerCreator.js  匹配相应 type 的 action 的 reducer</span><br><span class="line">│   │   │   ├── ConfigureStore.js       生成 store</span><br><span class="line">│   │   │   └── index.js                统一导出</span><br><span class="line">│   │   ├── i18n                        国际化配置</span><br><span class="line">│   │   │   ├── locales                中英文配置文件</span><br><span class="line">│   │   │   │   ├── en                 英文配置</span><br><span class="line">│   │   │   │   └── zh                 中文配置</span><br><span class="line">│   │   │   ├── i18n.js                 i18next 配置</span><br><span class="line">│   │   │   └── index.js                统一导出</span><br><span class="line">│   │   ├── middleware                   中间件</span><br><span class="line">│   │   │   ├── AppMiddleWare.js        前置、后置拦截器业务代码</span><br><span class="line">│   │   │   ├── ComponentMiddleWare.js  操作拦截器中间件</span><br><span class="line">│   │   │   ├── index.js                中间件统一导出</span><br><span class="line">│   │   │   └── LoggerMiddleWare.js     日志中间件</span><br><span class="line">│   │   ├── routes                       路由配置</span><br><span class="line">│   │   │   └── index.jsx</span><br><span class="line">│   │   └── App.jsx                      app 入口</span><br><span class="line">│   ├── index.ejs                         ejs 模板文件</span><br><span class="line">│   └── index.jsx                         挂载 react dom</span><br><span class="line">├── test</span><br><span class="line">├── .babelrc                            babel 配置文件</span><br><span class="line">├── .editorconfig                       跨平台编辑器配置文件</span><br><span class="line">├── .eslintignore                       eslintignore 配置文件</span><br><span class="line">├── .eslintrc                           eslint 配置文件</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package.json   </span><br><span class="line">├── postcss.config.js                   postcss 配置文件 </span><br><span class="line">├── server.js                           本地服务（webpack-dev-server）</span><br><span class="line">├── webpack.config.js                   webpack 配置文件入口</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h2 id="App-jsx-项目入口"><a href="#App-jsx-项目入口" class="headerlink" title="App.jsx 项目入口"></a>App.jsx 项目入口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Provider&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;I18nextProvider&#125; from &apos;react-i18next&apos;;</span><br><span class="line">import &#123;syncHistoryWithStore&#125; from &apos;react-router-redux&apos;;</span><br><span class="line">import &#123;hashHistory&#125; from &apos;react-router&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;reducers&#125; from &apos;./components&apos;; //合并之后的 reducer</span><br><span class="line">import &#123;default as Store&#125; from &apos;./config/ConfigureStore&apos;;</span><br><span class="line">import appMiddleWares from &apos;./middleware/AppMiddleWare&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;i18n, locales&#125; from &apos;./i18n&apos;; //见下面 i18n 配置</span><br><span class="line">import routes from &apos;./routes&apos;;</span><br><span class="line">import &apos;./style/index.scss&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * App View</span><br><span class="line"> */</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        // 添加i18n语言包</span><br><span class="line">        for (let ns in locales[&apos;zh&apos;]) &#123;</span><br><span class="line">            if (locales[&apos;zh&apos;].hasOwnProperty(ns)) &#123;</span><br><span class="line">                i18n.addResourceBundle(&apos;zh&apos;, ns, locales[&apos;zh&apos;][ns]);</span><br><span class="line">                i18n.addResourceBundle(&apos;en&apos;, ns, locales[&apos;en&apos;][ns]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let storeOptions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        const defaultStates = &#123;&#125;;</span><br><span class="line">        const allReducers = Object.assign(&#123;&#125;, reducers);  //此处可以并入其它模块中的 reducer</span><br><span class="line">        const preMiddleWares = Object.assign(&#123;&#125;, appMiddleWares.preMiddleWares);  //此处可以并入其它模块中的 preMiddleWares</span><br><span class="line">        const postMiddleWares = Object.assign(&#123;&#125;, appMiddleWares.postMiddleWares);  //此处可以并入其它模块中的 postMiddleWares</span><br><span class="line"></span><br><span class="line">        storeOptions.initialStates = defaultStates;</span><br><span class="line">        storeOptions.reducers = allReducers;</span><br><span class="line">        storeOptions.preMiddleWares = preMiddleWares;</span><br><span class="line">        storeOptions.postMiddleWares = postMiddleWares;</span><br><span class="line"></span><br><span class="line">        const store = Store.configureStore(storeOptions);</span><br><span class="line">        const history = syncHistoryWithStore(hashHistory, store);</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;I18nextProvider i18n=&#123;i18n&#125;&gt;</span><br><span class="line">                    &#123;routes(history)&#125;</span><br><span class="line">                &lt;/I18nextProvider&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h2 id="routes-路由配置"><a href="#routes-路由配置" class="headerlink" title="routes 路由配置"></a>routes 路由配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;Router, Route&#125; from &apos;react-router&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    HomeView,</span><br><span class="line">    BusinessDetail</span><br><span class="line">&#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">const routes = (history) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; component=&#123;HomeView&#125;/&gt;</span><br><span class="line">            &lt;Route path=&quot;/home&quot; component=&#123;HomeView&#125;/&gt;</span><br><span class="line">            &lt;Route path=&quot;/business/:id&quot; component=&#123;BusinessDetail&#125;/&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default routes;</span><br></pre></td></tr></table></figure><h2 id="ConfigureStore-js-构建-Store"><a href="#ConfigureStore-js-构建-Store" class="headerlink" title="ConfigureStore.js 构建 Store"></a>ConfigureStore.js 构建 Store</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import &#123;applyMiddleware, compose, createStore, combineReducers&#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import &#123;hashHistory&#125; from &apos;react-router&apos;;</span><br><span class="line">import &#123;routerReducer, routerMiddleware&#125; from &apos;react-router-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;componentMiddleWare, logger&#125; from &apos;../middleware&apos;;</span><br><span class="line">import appReducerCreator from &apos;./AppReducerCreator&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * store 构建器</span><br><span class="line"> */</span><br><span class="line">export function configureStore(config) &#123;</span><br><span class="line">    // 合并之后的 preMiddleWares, postMiddleWares, reducers</span><br><span class="line">    let &#123;initialStates, preMiddleWares, postMiddleWares, reducers&#125; = config;</span><br><span class="line">    let allReducer = Object.assign(&#123;&#125;, reducers);</span><br><span class="line">    let appReducer = appReducerCreator(initialStates, allReducer);</span><br><span class="line">    const finalReducer = combineReducers(&#123;appReducer, routing: routerReducer&#125;);</span><br><span class="line">    const allMiddleWares = [</span><br><span class="line">        thunk,  // 异步 action</span><br><span class="line">        componentMiddleWare(preMiddleWares, postMiddleWares),    // 具体业务拦截器</span><br><span class="line">        routerMiddleware(hashHistory),   // router 注入到 store 中</span><br><span class="line">        logger</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    let enhancer = compose(</span><br><span class="line">        applyMiddleware(...allMiddleWares)</span><br><span class="line">    );</span><br><span class="line">    return createStore(finalReducer, &#123;&#125;, enhancer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Store = &#123;</span><br><span class="line">    configureStore</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Store;</span><br></pre></td></tr></table></figure><h2 id="AppReducerCreator-js"><a href="#AppReducerCreator-js" class="headerlink" title="AppReducerCreator.js"></a>AppReducerCreator.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局 Reducer 产生器</span><br><span class="line"> */</span><br><span class="line">function appReducerCreator(wrapInitialState, allReducerMap) &#123;</span><br><span class="line">    function appReducer(state = wrapInitialState, action) &#123;</span><br><span class="line">        if (action &amp;&amp; action.type &amp;&amp; allReducerMap[action.type]) &#123;</span><br><span class="line">            return allReducerMap[action.type](state, action);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return appReducer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default appReducerCreator;</span><br></pre></td></tr></table></figure><h2 id="ComponentMiddleWare-js-action-拦截器"><a href="#ComponentMiddleWare-js-action-拦截器" class="headerlink" title="ComponentMiddleWare.js action 拦截器"></a>ComponentMiddleWare.js action 拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 操作拦截器中间件</span><br><span class="line"> */</span><br><span class="line">export function componentMiddleWare(preMiddleWares, postMiddleWares) &#123;</span><br><span class="line">    return function (&#123;getState&#125;) &#123;</span><br><span class="line">        return next =&gt; (action) =&gt; &#123;</span><br><span class="line">            // 前置拦截校验函数</span><br><span class="line">            let preInterceptFunc = preMiddleWares ? preMiddleWares[action.type] : null;</span><br><span class="line">            // 进行拦截校验操作</span><br><span class="line">            if (preInterceptFunc &amp;&amp; !preInterceptFunc.call(this, action, getState())) &#123;</span><br><span class="line">                console.error(&apos;Invalid action for preMiddleWares intercept!!&apos;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 调用 middleware 链中下一个 middleware 的 dispatch。</span><br><span class="line">            const returnValue = next(action);</span><br><span class="line"></span><br><span class="line">            // 后置拦截函数</span><br><span class="line">            let postInterceptFunc = postMiddleWares ? postMiddleWares[action.type] : null;</span><br><span class="line">            // 进行拦截校验操作</span><br><span class="line">            postInterceptFunc &amp;&amp; postInterceptFunc.call(this, action, getState());</span><br><span class="line">            </span><br><span class="line">            return returnValue;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoggerMiddleWare-js"><a href="#LoggerMiddleWare-js" class="headerlink" title="LoggerMiddleWare.js"></a>LoggerMiddleWare.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 日志 MiddleWare</span><br><span class="line"> */</span><br><span class="line">export function logger(&#123;getState&#125;) &#123;</span><br><span class="line">    return next =&gt; (action) =&gt; &#123;</span><br><span class="line">        console.info(&apos;will dispatch&apos;, action);</span><br><span class="line">        // 调用 middleware 链中下一个 middleware 的 dispatch。</span><br><span class="line">        const returnValue = next(action);</span><br><span class="line">        console.info(&apos;after dispatch&apos;, getState());</span><br><span class="line">        return returnValue;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppMiddleWare-js-具体业务中间件，构建-store-时注入"><a href="#AppMiddleWare-js-具体业务中间件，构建-store-时注入" class="headerlink" title="AppMiddleWare.js 具体业务中间件，构建 store 时注入"></a>AppMiddleWare.js 具体业务中间件，构建 store 时注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 前置拦截器</span><br><span class="line"> */</span><br><span class="line">let preMiddleWares = &#123;</span><br><span class="line">    TEST: (action, state) =&gt; &#123;</span><br><span class="line">        return true;// false 则本次 action 无效，数据不会被修改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后置拦截器</span><br><span class="line"> */</span><br><span class="line">let postMiddleWares = &#123;</span><br><span class="line">    TEST: (action, state) =&gt; &#123;</span><br><span class="line">        ··· // 此处修改之后不会立即在 ui 上体现出来，因为它在 render 之后执行。且因为参数 state 为引用，所以是直接修改，可做一些提示性的操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let appMiddleWares = &#123;</span><br><span class="line">    preMiddleWares,</span><br><span class="line">    postMiddleWares</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default appMiddleWares;</span><br></pre></td></tr></table></figure><h2 id="connectToStore-js-组件接入-store-decorator"><a href="#connectToStore-js-组件接入-store-decorator" class="headerlink" title="connectToStore.js 组件接入 store decorator"></a>connectToStore.js 组件接入 store decorator</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123;bindActionCreators&#125; from &apos;redux&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import appConfig from &apos;../config&apos;;</span><br><span class="line">// appConfig.router 即下面的 AppActionRouter.js</span><br><span class="line">const AppActionRouter = appConfig.router;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        store: state.appReducer || &#123;&#125;,</span><br><span class="line">        routerStore: (state.routing &amp;&amp; state.routing.locationBeforeTransitions) || &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">    return bindActionCreators(AppActionRouter, dispatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function connectToStore(component) &#123;</span><br><span class="line">    return connect(mapStateToProps, mapDispatchToProps)(component);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppActionRouter-js-分发-action"><a href="#AppActionRouter-js-分发-action" class="headerlink" title="AppActionRouter.js 分发 action"></a>AppActionRouter.js 分发 action</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123;actions&#125; from &apos;../components&apos;;</span><br><span class="line">// action 为合并之后的所有的 action</span><br><span class="line">/**</span><br><span class="line"> * app action Router</span><br><span class="line"> */</span><br><span class="line">function onClickWithoutCheck(action) &#123;</span><br><span class="line">    return action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 如果外部注入 action，那么直接使用 action 的操作即可。</span><br><span class="line"> * 如果外部没有注入 action， 使用 dispatch 操作。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export function onClickAction(action, props) &#123;</span><br><span class="line">    return function (dispatch, getState) &#123;</span><br><span class="line">        if (action.type &amp;&amp; actions.hasOwnProperty(action.type)) &#123;</span><br><span class="line">            actions[action.type].call(this, action, dispatch, props);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dispatch(onClickWithoutCheck(action));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="acion-示例"><a href="#acion-示例" class="headerlink" title="acion 示例"></a>acion 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let homeActions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">homeActions[&apos;TEST&apos;] = function (action, dispatch, state) &#123;</span><br><span class="line">    dispatch(action);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default homeActions;</span><br></pre></td></tr></table></figure><h2 id="reducer-示例"><a href="#reducer-示例" class="headerlink" title="reducer 示例"></a>reducer 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Immutable from &apos;immutable&apos;;</span><br><span class="line"></span><br><span class="line">let homeReducers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">homeReducers[&apos;TEST&apos;] = function (state, action) &#123;</span><br><span class="line">    let foo = Immutable.fromJS(state);</span><br><span class="line">    let newArr = foo.mergeDeep(Immutable.fromJS(action.content));</span><br><span class="line">    return newArr.toJS();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default homeReducers;</span><br></pre></td></tr></table></figure><h2 id="i18n-配置"><a href="#i18n-配置" class="headerlink" title="i18n 配置"></a>i18n 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import i18next from &apos;i18next&apos;;</span><br><span class="line">import LanguageDetector from &apos;i18next-browser-languagedetector&apos;;</span><br><span class="line"></span><br><span class="line">const i18n = i18next</span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    .init(&#123;</span><br><span class="line">        fallbackLng: &apos;zh&apos;,</span><br><span class="line"></span><br><span class="line">        // have a common namespace used around the full app</span><br><span class="line">        ns: [&apos;common&apos;],</span><br><span class="line">        defaultNS: &apos;common&apos;,</span><br><span class="line"></span><br><span class="line">        debug: false,</span><br><span class="line"></span><br><span class="line">        interpolation: &#123;</span><br><span class="line">            escapeValue: false // not needed for react!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.error(&apos;i18next&apos;, err);</span><br><span class="line">        &#125;</span><br><span class="line">        // console.log(&apos;i18next initialized and ready to go!&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">export default i18n;</span><br></pre></td></tr></table></figure><h3 id="i18n-英文配置"><a href="#i18n-英文配置" class="headerlink" title="i18n 英文配置"></a>i18n 英文配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const home = &#123;</span><br><span class="line">    title: &apos;Home Page&apos;</span><br><span class="line">&#125;;</span><br><span class="line">export default &#123;home&#125;;</span><br></pre></td></tr></table></figure><h3 id="i18n-中文配置"><a href="#i18n-中文配置" class="headerlink" title="i18n 中文配置"></a>i18n 中文配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const home = &#123;</span><br><span class="line">    title: &apos;首页&apos;</span><br><span class="line">&#125;;</span><br><span class="line">export default &#123;home&#125;;</span><br></pre></td></tr></table></figure><h3 id="i18n-中英文统一导出"><a href="#i18n-中英文统一导出" class="headerlink" title="i18n 中英文统一导出"></a>i18n 中英文统一导出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import zh from &apos;./zh&apos;;</span><br><span class="line">import en from &apos;./en&apos;;</span><br><span class="line"></span><br><span class="line">const locales = &#123;</span><br><span class="line">    zh: zh,</span><br><span class="line">    en: en</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default locales;</span><br></pre></td></tr></table></figure><h2 id="组件实例"><a href="#组件实例" class="headerlink" title="组件实例"></a>组件实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;translate&#125; from &apos;react-i18next&apos;;</span><br><span class="line">import i18n from &apos;../i18n&apos;;</span><br><span class="line"></span><br><span class="line">@translate([&apos;home&apos;], &#123;wait: true&#125;)  // 使用多语言</span><br><span class="line">@connectToStore                     // 组件介入 store</span><br><span class="line">class Test extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 路由跳转</span><br><span class="line">    transformRouter = () =&gt; &#123;</span><br><span class="line">        const &#123;onClickAction&#125; = this.props;</span><br><span class="line">        // 见下面路由 acion</span><br><span class="line">        let gotoAction = &#123;</span><br><span class="line">            type: &apos;GOTO&apos;,</span><br><span class="line">            content: &apos;/home&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">        onClickAction(gotoAction, this.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发送 action</span><br><span class="line">    changeStore = () =&gt; &#123;</span><br><span class="line">        const &#123;onClickAction, store&#125; = this.props;</span><br><span class="line">        let action = &#123;</span><br><span class="line">            type: &apos;TEST&apos;,</span><br><span class="line">            content: &#123;data: &apos;test&apos;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        onClickAction(action, this.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 切换语言</span><br><span class="line">    setLanguage = () =&gt; &#123;</span><br><span class="line">        i18n.changeLanguage(&apos;zh&apos;); // or en</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;t, store&#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&apos;app-home&apos;&gt;</span><br><span class="line">                &lt;div className=&apos;app-header&apos;&gt;</span><br><span class="line">                    &lt;span&gt;&#123;t(&apos;title&apos;)&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    content</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;Footer/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Test;</span><br></pre></td></tr></table></figure><h2 id="路由-acion，不需要-路由-recuder"><a href="#路由-acion，不需要-路由-recuder" class="headerlink" title="路由 acion，不需要 路由 recuder"></a>路由 acion，不需要 路由 recuder</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;push&#125; from &apos;react-router-redux&apos;;</span><br><span class="line"></span><br><span class="line">let routerActions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">routerActions[&apos;GOTO&apos;] = function (action, dispatch, state) &#123;</span><br><span class="line">    dispatch(push(action[&apos;content&apos;]));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default routerActions;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些容易被忽略的 JavaScript 知识点</title>
      <link href="2017/05/10/js/%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84-javascript-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>2017/05/10/js/%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84-javascript-%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="ReferenceError和TypeError"><a href="#ReferenceError和TypeError" class="headerlink" title="ReferenceError和TypeError"></a>ReferenceError和TypeError</h2><p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError异常。如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作，比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError 。ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</p><h2 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h2><p>由于函数被包含在一对 () 括号内部，因此成为了一个表达式，通过在末尾加上另外一个()可以立即执行这个函数，比如 (function foo(){ .. })() 。第一个()将函数变成表达式，第二个()执行了这个函数。</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 关键字可以将变量绑定到所在的任意作用域中（通常是 { .. } 内部）。换句话说， let为其声明的变量隐式地了所在的块作用域。使用 let 进行的声明不会在块作用域中进行提升。声明的代码被运行之前，声明并不“存在” 。for 循环头部的let不仅将i绑定到了for循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>考虑以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = 2;</span><br><span class="line">var a;</span><br><span class="line">console.log(a);// 2</span><br></pre></td></tr></table></figure><p>考虑另外一段代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a);// undefined</span><br><span class="line">var a = 2;</span><br></pre></td></tr></table></figure><p>过程： 当你看到 var a = 2; 时，JavaScript 实际上会将其看成两个声明： var a; 和 a = 2; 。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。第一个代码片段会以如下形式进行处理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">a = 2;</span><br><span class="line">console.log(a);</span><br></pre></td></tr></table></figure><p>其中第一部分是编译，而第二部分是执行。第二个代码片段实际是按照以下流程处理的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a;</span><br><span class="line">console.log(a);</span><br><span class="line">a = 2;</span><br></pre></td></tr></table></figure><p>这个过程就叫作提升。但是函数表达式却不会被提升。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo(); // 不是 ReferenceError, 而是 TypeError!</span><br><span class="line">var foo = function bar() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段程序中的变量标识符 foo() 被提升并分配给所在作用域（在这里是全局作用域） ，因此foo()不会导致 ReferenceError 。但是 foo 此时并没有赋值（如果它是一个函数声明而不是函数表达式，那么就会赋值） 。 foo() 由于对 undefined 值进行函数调用而导致非法操作，因此抛出 TypeError 异常。<br>同时也要记住，即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo(); // TypeError</span><br><span class="line">bar(); // ReferenceError</span><br><span class="line">var foo = function bar() &#123;</span><br><span class="line">    // ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个代码片段经过提升后，实际上会被理解为以下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var foo;</span><br><span class="line">foo(); // TypeError</span><br><span class="line">bar(); // ReferenceError</span><br><span class="line">foo = function() &#123;</span><br><span class="line">    var bar = ...self...</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明和变量声明都会被提升。但是是函数会首先被提升，然后才是变量。考虑以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); // 1</span><br><span class="line">var foo;</span><br><span class="line">function foo() &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">foo = function() &#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>会输出 1 而不是 2 ！这个代码片段会被引擎理解为如下形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    console.log(1);</span><br><span class="line">&#125;</span><br><span class="line">foo(); // 1</span><br><span class="line">foo = function() &#123;</span><br><span class="line">    console.log(2);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意， var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明（因此被忽略了） ，因为函数声明会被提升到普通变量之前。尽管重复的 var 声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。</p><h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><p>定义：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。下面这段代码清晰地展示了闭包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function bar() &#123;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    return bar;</span><br><span class="line">&#125;</span><br><span class="line">var baz = foo();</span><br><span class="line">baz(); // 2 —— 这就是闭包的效果。</span><br></pre></td></tr></table></figure><p>bar() 显然可以被正常执行，但是它在自己定义的词法作用域以外的地方执行。看上去 foo() 的内容不会再被使用，所以很自然地会考虑对其进行回收。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 bar() 本身在使用。拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><h2 id="typeof-null-“object”"><a href="#typeof-null-“object”" class="headerlink" title="typeof null = “object”"></a>typeof null = “object”</h2><p>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为  object 类型， null 的二进制表示是全 0， 自然前三位也是 0， 所以执行 typeof 时会返回“ object ” 。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>使用 delete 运算符可以将单元从数组中删除，单元删除后，数组的 length 属性并不会发生变化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var a = [ ];</span><br><span class="line">a[0] = 1;</span><br><span class="line">//  此处没有设置 a[1] 单元</span><br><span class="line">a[2] = 3;</span><br><span class="line">a[1]; // undefined</span><br><span class="line">a.length; // 3</span><br></pre></td></tr></table></figure><p>上面的代码可以正常运行，但其中的 “ 空白单元 ” （ empty slot ）可能会导致出人意料的结果。另外：如果字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a = [ ];</span><br><span class="line">a[&quot;13&quot;] = 42;</span><br><span class="line">a.length; // 14</span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h2><p>对于 . 运算符需要给予特别注意，因为它是一个有效的数字字符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符。<br><strong>true 转换为 1 ， false 转换为 0 。 undefined 转换为 NaN ， null 转换为 0。</strong><br>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。使用 Object.create(null) 创建的对象 [[Prototype]] 属性为 null ，并且没有 valueOf() 和 toString() 方法，因此无法进行强制类型转换。看下面的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">//  无效语法：因为 . 被视为常量 42. 的一部分，所以没有. 属性访问运算符来调用 tofixed 方法</span><br><span class="line">42.toFixed(3);    // SyntaxError</span><br><span class="line">//  下面的语法都有效：</span><br><span class="line">(42).toFixed(3);  // &quot;42.000&quot;</span><br><span class="line">0.42.toFixed(3);  // &quot;0.420&quot;</span><br><span class="line">42..toFixed(3);   // &quot;42.000&quot;</span><br><span class="line">42 .toFixed(3);     // &quot;42.000&quot;</span><br><span class="line"></span><br><span class="line">var a = &#123;</span><br><span class="line">valueOf: function()&#123;</span><br><span class="line">    return &quot;42&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var b = &#123;</span><br><span class="line">    toString: function()&#123;</span><br><span class="line">        return &quot;42&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">var c = [4,2];</span><br><span class="line">c.toString = function()&#123;</span><br><span class="line">    return this.join(&quot;&quot;); // &quot;42&quot;</span><br><span class="line">&#125;;</span><br><span class="line">Number(a); // 42</span><br><span class="line">Number(b); // 42</span><br><span class="line">Number(c); // 42</span><br><span class="line">Number(&quot;&quot;); // 0</span><br><span class="line">Number([]); // 0</span><br><span class="line">Number([&quot;abc&quot;]); // NaN</span><br></pre></td></tr></table></figure><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><ol><li>假值 undefined,null,false,+0,-0,NaN,””。<strong>假值列表以外的值都是真值</strong></li><li>假值对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var a = new Boolean(false);</span><br><span class="line">var b = new Number(0);</span><br><span class="line">var c = new String(&quot;&quot;);</span><br><span class="line">var d = Boolean(a &amp;&amp; b &amp;&amp; c);</span><br><span class="line">d; // true 说明 a 、 b 、 c 都为 true</span><br></pre></td></tr></table></figure></li></ol><p>虽然 JavaScript  代码中会出现假值对象，但它实际上并不属于 JavaScript  语言的范畴。浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是 “ 假值对象 ” 。假值对象看起来和普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 。最常见的例子是 document.all ，它是一个类数组对象，包含了页面上的所有元素，由 DOM （而不是 JavaScript  引擎）提供给 JavaScript  程序使用。它以前曾是一个真正意义上的对象，布尔强制类型转换结果为 true ，不过现在它是一个假值对象。document.all 并不是一个标准用法，早就被废止了。</p><h2 id="奇特的-运算符"><a href="#奇特的-运算符" class="headerlink" title="奇特的 ~ 运算符"></a>奇特的 ~ 运算符</h2><p><strong>1. 类型转换</strong></p><p>它首先将值强制类型转换为 32 位数字，然后执行字位操作 “非” （对每一个字位进行反转）。这与<code>!</code>很相像，不仅将值强制类型转换为布尔值<code>&lt;</code>，还对其做字位反转。对<code>~</code>还可以有另外一种诠释，源自早期的计算机科学和离散数学：<code>~</code>返回 2 的补码。<code>~x</code>大致等同于<code>-(x+1)</code>。<br><code>~</code>和<code>indexOf()</code>一起可以将结果强制类型转换（实际上仅仅是转换）为真 /  假值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var a = &quot;Hello World&quot;;</span><br><span class="line">~a.indexOf(&quot;lo&quot;); // -4 &lt;--  真值 !</span><br><span class="line">if (~a.indexOf(&quot;lo&quot;)) &#123; // true</span><br><span class="line">    //  找到匹配！</span><br><span class="line">&#125;</span><br><span class="line">~a.indexOf(&quot;ol&quot;); // 0 &lt;--  假值 !</span><br><span class="line">!~a.indexOf(&quot;ol&quot;); // true</span><br><span class="line">if (!~a.indexOf(&quot;ol&quot;)) &#123; // true</span><br><span class="line">    //  没有找到匹配！</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 indexOf(..) 返回 -1 ，<code>~</code>将其转换为假值 0，其他情况一律转换为真值。</p><p><strong>2. 字位截除</strong></p><p>使用 <code>~~</code> 来截除数字值的小数部分，以为这和<code>Math.floor(..)</code>的效果一样，实际上并非如此。<code>~~</code>中的第一个<code>~</code>执行<code>ToInt32</code>并反转字位，然后第二个<code>~</code>再进行一次字位反转，即将所有字位反转回原值，最后得到的仍然是<code>ToInt32</code>的结果。<code>~~</code>和<code>!!</code>很相似，它只适用于 32 位数字，更重要的是它对负数的处理与<code>Math.floor(..)</code>不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Math.floor(-49.6); // -50</span><br><span class="line">~~-49.6; // -49</span><br></pre></td></tr></table></figure><p><code>~~x</code>能将值截除为一个 32 位整数，<code>x | 0</code>也可以，而且看起来还更简洁。出于对运算符优先级的考虑，我们可能更倾向于使用 <code>~~x</code> 。</p><h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><p>常见的误区是：“ == 检查值是否相等， === 检查值和类型是否相等 ” 。听起来蛮有道理，然而还不够准确。<br>正确的解释是：“ == 允许在相等比较中进行强制类型转换，而 === 不允许。”<br>两种解释的区别：<br>根据第一种解释（不准确的版本）， === 似乎比 == 做的事情更多，因为它还要检查值的类型。第二种解释中 == 的工作量更大一些，因为如果值的类型不同还需要进行强制类型转换。有人觉得 == 会比 === 慢，实际上虽然强制类型转换确实要多花点时间，但仅仅是微秒级（百万分之一秒）的差别而已。如果进行比较的两个值类型相同，则 == 和 === 使用相同的算法，所以除了 JavaScript  引擎实现上的细微差别之外，它们之间并没有什么不同。== 和 === 都会检查操作数的类型。区别在于<strong>操作数类型不同时它们的处理方式不同</strong>。</p><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p>逗号操作符可以在一条语句中执行多个操作，常用于申明多个变量，还可以用于赋值（总会返回表达式中的最后一项）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var num1 = 1, num2 = 2, num3 = 3;</span><br><span class="line">var num = (5, 1, 4, 8, 0); // num 为 0</span><br></pre></td></tr></table></figure><h2 id="抽象关系比较-a-lt-b"><a href="#抽象关系比较-a-lt-b" class="headerlink" title="抽象关系比较 a &lt; b"></a>抽象关系比较 a &lt; b</h2><p>分为两个部分：比较双方都是字符串（后半部分）和其他情况（前半部分）。比较双方首先调用 ToPrimitive ，如果结果出现非字符串，就根据 ToNumber 规则将双方强制类型转换为数字来进行比较。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = [ 42 ];</span><br><span class="line">var b = [ &quot;43&quot; ];</span><br><span class="line">a &lt; b; // true</span><br><span class="line">b &lt; a; // false</span><br></pre></td></tr></table></figure><p> -0 和 NaN 的相关规则在这里也适用。如果比较双方都是字符串，则按字母顺序来进行比较</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var a = [ &quot;42&quot; ];</span><br><span class="line">var b = [ &quot;043&quot; ];</span><br><span class="line">a &lt; b; // false</span><br><span class="line"></span><br><span class="line">var a = [ 4, 2 ];</span><br><span class="line">var b = [ 0, 4, 3 ];</span><br><span class="line">a &lt; b; // false</span><br><span class="line"></span><br><span class="line">var a = &#123; b: 42 &#125;;</span><br><span class="line">var b = &#123; b: 43 &#125;;</span><br><span class="line">a &lt; b; // ??</span><br><span class="line">// 结果还是 false ，因为 a 是 [object Object] ，b 也是 [object Object]，所以按照字母顺序 a &lt; b 并不成立。</span><br><span class="line"></span><br><span class="line">// 下面的例子就有些奇怪了:</span><br><span class="line">var a = &#123; b: 42 &#125;;</span><br><span class="line">var b = &#123; b: 43 &#125;;</span><br><span class="line">a &lt; b; // false</span><br><span class="line">a == b; // false</span><br><span class="line">a &gt; b; // false</span><br><span class="line">a &lt;= b; // true</span><br><span class="line">a &gt;= b; // true</span><br></pre></td></tr></table></figure><p>因为根据规范 a &lt;= b 被处理为 b &lt; a ，然后将结果反转。因为 b &lt; a 的结果是 false ，所以 a &lt;= b 的结果是 true。实际上 JavaScript  中 &lt;= 是 “ 不大于 ” 的意思（即 !(a &gt; b) ，处理为 !(b &lt; a) ）。同理 a &gt;= b 处理为 b &lt;= a 。</p><h2 id="比较字符串"><a href="#比较字符串" class="headerlink" title="比较字符串"></a>比较字符串</h2><p>在比较字符串时，实际比较的是两个字符串中对应位置的每个字符的字符编码值。任何操作数与NaN进行关系比较，结果都是 false。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;23&quot; &lt; &quot;3&quot;      // false “2” 的字符编码是 50，“3” 是 51 </span><br><span class="line">&quot;a&quot; &lt; 2         // false 因为 “a” 被转换成了 NaN</span><br></pre></td></tr></table></figure><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[] + &#123;&#125;; // &quot;[object Object]&quot;</span><br><span class="line">&#123;&#125; + []; // 0</span><br><span class="line">[null].toString() // &quot;&quot;</span><br><span class="line">[undefined].toString() // &quot;&quot;</span><br><span class="line">[null, undefined].toString() // &quot;,&quot;</span><br></pre></td></tr></table></figure><p>第一行代码中， {} 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 [] 会被强制类型转换为 “” ，而 {} 会被强制类型转换为 “[object Object]” 。<br>但在第二行代码中， {} 被当作一个独立的空代码块（不执行任何操作）。代码块结尾不需要分号，所以这里不存在语法上的问题。最后 + [] 将 [] 显式强制类型转换为 0 。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var Person = function(name) &#123; this.name = name;</span><br><span class="line">&#125;;</span><br><span class="line">// 实例化一个Person</span><br><span class="line">var alice = new Person(&apos;alice&apos;);</span><br><span class="line">// 不要这么做!</span><br><span class="line">Person(&apos;bob&apos;); //=&gt; undefined</span><br></pre></td></tr></table></figure><p>这个函数只会返回 undefined，并且执行上下文是 window(全局)对象，你无意间创建了一个全局变量 name。调用构造函数时不要丢掉 new 关键字。当使用 new 关键字来调用构造函数时，执行上下文从全局对象(window)变成一个空的 上下文，这个上下文代表了新生成的实例。因此，this 关键字指向当前创建的实例。默认情况下，如果你的构造函数中没有返回任何内容，就会返回 this——当前的上下文。 要不然就返回任意非原始类型的值。</p><h2 id="bind-实现"><a href="#bind-实现" class="headerlink" title="bind 实现"></a>bind 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Function.prototype.bind = Function.prototype.bind || function (obj) &#123;</span><br><span class="line">    var slice = [].slice,</span><br><span class="line">        args = slice.call(arguments, 1), self = this,</span><br><span class="line">        nop = function () &#123;&#125;,</span><br><span class="line">        bound = function () &#123;</span><br><span class="line">            return self.apply(this instanceof nop ? this : (obj || &#123;&#125;), args.concat(slice.call(arguments)));</span><br><span class="line">        &#125;;</span><br><span class="line">    nop.prototype = self.prototype; bound.prototype = new nop();</span><br><span class="line">    return bound; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Object-create-实现"><a href="#Object-create-实现" class="headerlink" title="Object.create() 实现"></a>Object.create() 实现</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Object.create = Object.create || function(o) &#123;</span><br><span class="line">    function F() &#123;&#125;;</span><br><span class="line">    F.prototype = o;</span><br><span class="line">    return new F();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
