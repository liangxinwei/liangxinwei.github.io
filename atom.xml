<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>梁新维</title>
  
  <subtitle>sometimes code， sometimes design</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.liangxinwei.cn/"/>
  <updated>2020-01-02T00:46:46.982Z</updated>
  <id>https://www.liangxinwei.cn/</id>
  
  <author>
    <name>liangxinwei</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2020Flag</title>
    <link href="https://www.liangxinwei.cn/2020/01/01/2020Flag/"/>
    <id>https://www.liangxinwei.cn/2020/01/01/2020Flag/</id>
    <published>2020-01-01T14:24:06.000Z</published>
    <updated>2020-01-02T00:46:46.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ol><li>Icon 独立为项目（React、Vue）各一份、便于代码复用   DDL：2020-04-30</li><li>看技术书籍、设计书籍、产品书籍   DDL：2020-12-31 一个月一本<ol><li>技术书籍：<ol><li>计算机网络</li><li>软件工程</li></ol></li><li>设计书籍：<ol><li>写给大家看的设计书</li><li>简约至上</li><li>dont make me think</li><li>点石成金</li></ol></li><li>产品书籍：<ol><li>《幕后产品》王诗沐</li><li>《有效需求分析》徐锋</li></ol></li></ol></li><li>学习 TypeScript 并能有配套练习项目   DDL：2020-06-30</li><li>学习Node.js 后台并能有配套练习项目   DDL：2020-12-31，2020-06-30 完成 70%</li><li>学习MySQL、redis、MongoDB并能有配套练习项目   DDL：2020-12-31，2020-06-30 完成 70%</li></ol><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>搭建自己的GitHub Pages博客</li><li>练字，达到字迹美观工整、笔力苍劲</li><li>读一些哲学方面的书</li><li>健身，年中能有8块腹肌</li><li>学英语，单词量20000，不看字母能听懂英文电影</li><li>学习理财相关的知识，开始钱生钱</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工作&quot;&gt;&lt;a href=&quot;#工作&quot; class=&quot;headerlink&quot; title=&quot;工作&quot;&gt;&lt;/a&gt;工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Icon 独立为项目（React、Vue）各一份、便于代码复用   DDL：2020-04-30&lt;/li&gt;
&lt;li&gt;看技术书籍、
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.liangxinwei.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="https://www.liangxinwei.cn/2019/12/31/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://www.liangxinwei.cn/2019/12/31/2019年终总结/</id>
    <published>2019-12-31T12:15:06.000Z</published>
    <updated>2020-01-02T00:46:46.982Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2019年12月31日，眨眼间，2019年过去了。</p><p>时间总是过的很快，尤其是走出象牙塔进入社会之后，刚毕业那会怀揣着简历到处面试的情景仍然记忆犹新。</p><p>这次的年终总结算是2018年到2019年的总结，从我入职现在的公司开始到现在，与我而言，算是很有收获的2年。</p><h2 id="工作上"><a href="#工作上" class="headerlink" title="工作上"></a>工作上</h2><p>这应该是挑战与机遇并存的2年，之前的工作中，我一直是只负责某一部分具体的业务，入职之后，刚开始是写C端小程序、H5活动页面，然后逐步负责公司整个B端相关系统的前端方面的工作，期间遇到过困难、经历过挑战。刚接手B端系统的时候，前同事写的比较随意，代码格式各不一样，维护起来很吃力，不过还好那会业务不算很忙，总算抽出时间重构了最核心的一部分逻辑，并且将打包时间从之前的恐怖的动辄20-30min缩短到2min之内，将webpack版本性能3升级到4，为此领导特意请我喝了一周的☕️，个人感觉还是挺有成就感的一件事。</p><p>团队中也有了新鲜的血液，不同同事之间的代码风格各不一样，如何保证代码质量就成了必须要考虑的一件事，所以我们商讨了一份内部使用的 <code>ESLint</code> 规则，以及<code>code review</code>，有利于以后的维护。</p><p>公司扩张之后，相应的，业务也随之而来，期间和另一位同事（大神）配合搭建起了针对线下各个门店的视频监控系统。第一次涉足视频领域，感觉挺不错。</p><h2 id="工作外围"><a href="#工作外围" class="headerlink" title="工作外围"></a>工作外围</h2><p>随着公司的扩张，随之而来的招人和带新人就成了我工作之余的另一件事，慢慢的学会了怎么样面试别人，在这里特别感谢我的领导，总是在恰当的时间的提点我，令我感觉成长了很多，获益良多。</p><p>另外，得益于用户对移动端办公的迫切需求和小程序的急速发展，公司的B端系统也同步到了小程序上，我作为唯一的开发人员、测试人员、产品人员、UI，从申请小程序到上线第一版以及之后的版本迭代，期间未出现过重大BUG，被领导称做「全干工程师」😓。这样的经历也让我对前端开发有了更深一步的认识与理解，作为最接近用户的程序员，我们应该时刻站在用户的角度思考怎么样能让所开发的产品更易用、更简洁、交互更合理、操作更简单，并且在产品上线之后主动了解用户的反馈，并针对反馈做相应的改进，然后再上线、跟踪反馈、优化，达到整个流程的闭环。这种一个人负责所有的事情对我虽然是第一次，但是开发过程中下意识的思考UI、产品，开发完的测试，上线之后的跟踪反馈，让我耳目一新，原来前端开发人员还可以这样，为此还特意买了设计相关的书籍、B端产品相关的书籍，边看书边开发，美美哒。</p><p>前端团队成长方面，我组织公司的前端同事搭建起了前端团队的自我成长体系，并付诸于行动，每周（最长不超过2周）开一次前端分享（交流）会，包括并不限于JavaScript、CSS、React、Vue、产品、设计相关，相互督促学习，并实践与公司的项目中。以目前的反馈来看，效果挺好。通过学习，我相信不只是我，团队中的任何一位同事，都会在各个方面都有所成长。</p><h2 id="情感上"><a href="#情感上" class="headerlink" title="情感上"></a>情感上</h2><p>今年顺利收获女朋友一枚，工作也有了更大的动力。想给她更好的生活，就得更努力赚钱，努力工作，努力学习，一直成长。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>最近因为一些原因，公司也开始了传说中的内部优化，虽然没有波及到研发部门，但是日渐空阔的办公室还是实时提醒着我，<strong>凛冬将至</strong>，这更让我觉得提升自己的能力才是最重要的，在这里告诫大家，一定要有危机意识，居安思危。</p><h2 id="2020年目标"><a href="#2020年目标" class="headerlink" title="2020年目标"></a>2020年目标</h2><p>明天又是新的一年，在这里立几个小目标：</p><ol><li>前端技术方面有大的突破（多阅读源码）</li><li>学习Node.js、MongoDB、MySQL，并能有相应的后台练习项目</li><li>学习产品相关的知识</li><li>学习理财相关的知识，开始钱生钱</li><li>健身，年中能有8块腹肌</li><li>练字，达到字迹美观工整、笔力苍劲</li><li>学习英语，单词量能达到20000，慢英语能听懂</li></ol><h2 id="最后想说"><a href="#最后想说" class="headerlink" title="最后想说"></a>最后想说</h2><p>现在看来，那件事（前端团队的自我成长体系）到现在才运行起来，带给我的教训：<br><strong>要做成一件看起来很难的事，只是缺乏立即去做的决心，和坚持下去的恒心，仅此而已。</strong></p><p>今年对自己整体的评价：<br>技术方面，刚及格，主要是业务太繁忙，又刚交女朋友，学习的时间太少，<br>其他方面，比如UI意识、产品意识等等，还算是比较满意，不再仅仅是前端开发，眼界开阔了不少，业余还看了一些理财方面的书籍，打算来年继续学习。</p><p>2020年，29岁了，希望能有更好的成长。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天是2019年12月31日，眨眼间，2019年过去了。&lt;/p&gt;
&lt;p&gt;时间总是过的很快，尤其是走出象牙塔进入社会之后，刚毕业那会怀揣着简历到处面试的情景仍然记忆犹新。&lt;/p&gt;
&lt;p&gt;这次的年终总结算是2018年到2019年的总结，从我入职现在的公司开始到现在，与我而言，算
      
    
    </summary>
    
      <category term="随笔" scheme="https://www.liangxinwei.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>B端产品经理长成读书笔记</title>
    <link href="https://www.liangxinwei.cn/2019/09/12/B%E7%AB%AF%E4%BA%A7%E5%93%81%E7%BB%8F%E7%90%86%E9%95%BF%E6%88%90%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.liangxinwei.cn/2019/09/12/B端产品经理长成读书笔记/</id>
    <published>2019-09-12T14:51:34.000Z</published>
    <updated>2020-01-02T00:46:46.983Z</updated>
    
    <content type="html"><![CDATA[<p>PMBOK：项目管理知识体系 Project Management Body Of Knowledge</p><p>产品的规则设计：<br>1、精神理念：什么最重要<br>2、目标：产品要达成什么目标<br>3、谁更重要：多方冲突时保护谁<br>4、鼓励什么：什么事再产品中会受到认可和激励<br>5、拒绝什么：什么事不能在产品中做？禁止和惩罚什么？</p><p>方案出错，90%是问题出错了<br>问题-拆解-方案-结论 原则<br>1、定义问题，2、拆解问题，3、导出方案，4、评估得出结论</p><p>更高的时间和行动成本会拉低用户对产品的需求</p><p>RFM模型<br>RFM是最经典的客户消费行为特征分析模型，RFM代表Recency（最近一次消费时间），Frequency（某一个时间范围内的消费频次），Monetary（某一个时间范围内的平均客单价或累计交易额）。根据公司实际数据情况，将这三个指标划分成几档，可以形成多种组合（假设每个指标分五档，则可产生5x5x5个组合），对这些组合进行聚类分析，提炼出行为模式类似的多个群体，实现对客户消费特征的群体细分。</p><p>数据集市 DM Data Mart<br>数据仓库 DW Data Warehouse<br>BI Business Intelligence</p><p>数据仓库和大数据是两个完全不同的概念,它们在理念、技术方案、应用领域方面都完全不同,具体如下。<br>·理念:数据仓库源于交易数据,对数据的准确性要求高,适合做离线分析;大数据源于日志的行为数据,对数据准确性要求不高,适合做自动化策略。<br>技术方案:数据仓库采用传统的、经典的数据分析思路,即抽样、分析、预测;大数据基于海量数据和运算能力,不做抽样而做全量研究,不做分析而做模型应用。<br>应用领域:数据仓库主要用来做企业经营分析;大数据主要用来做各种业务自动化应用。</p><p><img src="/images/141031.png" alt="典型的企业级应用架构图"></p><p><img src="/images/142247.png" alt="支持企业客户销售管理的应用架构图"></p><p><img src="/images/IMG_1982.PNG" alt></p><p><img src="/images/IMG_1983.PNG" alt="战略层"></p><p><img src="/images/IMG_1984.PNG" alt="战略分析工具"></p><p><img src="/images/IMG_1985.PNG" alt="展示层"></p><p><img src="/images/IMG_1986.PNG" alt="执行层-管理层"></p><p><img src="/images/IMG_1987.PNG" alt="执行层-运营层"></p><p><img src="/images/140128.png" alt></p><p><img src="/images/131302.png" alt></p><p><img src="/images/135026.png" alt></p><p><img src="/images/140428.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PMBOK：项目管理知识体系 Project Management Body Of Knowledge&lt;/p&gt;
&lt;p&gt;产品的规则设计：&lt;br&gt;1、精神理念：什么最重要&lt;br&gt;2、目标：产品要达成什么目标&lt;br&gt;3、谁更重要：多方冲突时保护谁&lt;br&gt;4、鼓励什么：什么事再产品
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.liangxinwei.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>九败一胜读书笔记</title>
    <link href="https://www.liangxinwei.cn/2019/08/19/%E4%B9%9D%E8%B4%A5%E4%B8%80%E8%83%9C%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://www.liangxinwei.cn/2019/08/19/九败一胜读书笔记/</id>
    <published>2019-08-19T14:02:58.000Z</published>
    <updated>2020-01-02T00:46:46.989Z</updated>
    
    <content type="html"><![CDATA[<p>获取的长期经验不是最重要的，快速学习能力是决定一个人发展现状及未来前景的重要因素。</p><p>总重契约精神，总重大家共同制订好的游戏规则，没有这个，创业就无从谈起。</p><p>CEO不可被人代替的指责是：设计公司整体愿景和所有战略，确保传达给所有利益相关方，不仅是管理层，包括所有员工，不仅是公司内部人，包括股东、消费者、商户和所有合作伙伴；招到并留住最优秀的人；确保公司要有足够的资金。</p><p>以身作则不是塑造公司价值观的最好办法，而是唯一办法。</p><p>把所有东西考虑清楚再去讨论能不能做。</p><p>2004-2009校内网给他们的经验和教训：</p><ol><li>创业团队必须分工明确，CEO必须解放出来，关注整个业界、时代、社会发展的潮流。</li><li>快速推广很重要。</li><li>没有盲目地自我创新，快速学习别人的优点。比如模仿Facebook，在节省成本的同时，让用户有了当时一流的UI体验。</li><li>对资本的看法太过理想化了。应该更早的接触资本，降低姿态，做一些妥协。</li><li>必须和信任的人一起创业。唯有信任才能在遇到低潮的情况下让团队依旧坚持稳固。</li></ol><p>O2O 线上线下：线上交易，线下消费</p><p>保持对未知的世界充满好奇，先把更多的会放进自己的视，才有抉择的余地。</p><p>对于社会能产生真实价值的东西，是事业最稳定的基石。不管这种东西是解决人与人的关系，还是解决人与物的关系。</p><p>互联网时代是”产品为王”的时代，是完美主义者有着系统性优势的时代。只有完美主义的人，才能把产品打磨的那么出色，产品出色，整个公司就赢了。</p><p>任何一个部门，一年只要做对一件事就能获得成功</p><p>招聘进来的人的水准应该比现有团队50%的人高，整个团队才会越来越强</p><p>对未来越有信心，对现在越有耐心。</p><p>一家老有新闻的企业并非好事，在那些枯燥，平凡的日常管理细节里，每天前进一点，日积月累，短期内看不出公司发生了多少变化，把观察时间放长一点，三五年，你就会发现这家公司可能已经脱胎换骨了。这同样适用于每个人。</p><p>未来是不确定的，只能战战兢兢，如履薄冰。</p><p>一如既往的好奇心，超强的学习能力。</p><p>免费的根本问题在于真正的免费如何盈利。</p><p>想要构建产品壁垒，就最好做自己擅长的部分。</p><p>无数平庸的细节堆积出来的，就是平庸的产品。</p><p>如果你希望在一个好的创业公司一路高歌猛进的话，每一年都是关键的一年。</p><p>小公司做起来的关键是抓住了一个机会，中等公司的关键是有一批比较强的高管，大公司的关键是要有正确的流程和价值观。</p><p>企业创始人的价值观决定整个企业其他人对待整个市场的方式。美团网价值观的排序是：消费者第一、商家第二、员工第三、股东第四、王兴第五。</p><p>核心价值观的渗透度越高，整个企业的人员稳定性才越强。公司的使命、愿景、价值观，这些看起来是虚无缥缈的东西，确是团队精神生长的坚实土地。</p><p>CEO履行好自己的指责，其他事情都应该找最专业、最好的人来做。</p><p>团队的组件原则：招进来的人，水准应该比现有团队50%的人高。只要按照这个标准，整个团队会越来越强。</p><p>公司越来越大，为了保障公司的正常运转，需要一套行之有效的组织架构和严密的流程。系统和流程保障了分工明确、权责到位，不易出差错；另一方面却让跨部门合作变得越来越困难，效率在沟通中损耗，创新的热情和机会就有可能在这些损耗中溜掉。</p><p><img src="/images/124117.png" alt="企业家精神"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;获取的长期经验不是最重要的，快速学习能力是决定一个人发展现状及未来前景的重要因素。&lt;/p&gt;
&lt;p&gt;总重契约精神，总重大家共同制订好的游戏规则，没有这个，创业就无从谈起。&lt;/p&gt;
&lt;p&gt;CEO不可被人代替的指责是：设计公司整体愿景和所有战略，确保传达给所有利益相关方，不仅是管
      
    
    </summary>
    
      <category term="读书笔记" scheme="https://www.liangxinwei.cn/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>roadhog 1.3.X 打包慢的解决办法</title>
    <link href="https://www.liangxinwei.cn/2019/06/11/roadhog-1-3-X-%E6%89%93%E5%8C%85%E6%85%A2%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://www.liangxinwei.cn/2019/06/11/roadhog-1-3-X-打包慢的解决办法/</id>
    <published>2019-06-11T11:01:51.000Z</published>
    <updated>2020-01-02T00:46:46.987Z</updated>
    
    <content type="html"><![CDATA[<p>背景：公司的后台管理系统项目基于 Antd Pro 早期版本，使用的脚手架是 <a href="https://github.com/sorrycc/roadhog" target="_blank" rel="noopener">roadhog</a>，虽然接入了 dva 等框架，方便了我们把工作重心集中在业务上，但是随着项目的庞大，问题随之而来，首当其冲的就是线上部署的时候打包慢的问题。因为 road 的扩展不太灵活，其本身的初衷就是尽可能减少webpack的配置，所以如何降低打包的速度就成了亟需解决的问题。</p><p>项目依赖58个，打包之后140个文件。</p><p>网上搜了一圈，发现没有令人满意的解决方案，只好自己来解决。仔细缕了一遍思路后发现，还是有解决办法的。</p><p>以下改动仅适用于公司的后台管理系统项目。</p><blockquote><ol><li>删除项目中没有用到或废弃的代码</li><li>利用好 roadhog 支持的 webpack 配置项</li><li>自己改 roadhog 的源码，然后发布为 npm 包，替换掉 roadhog</li></ol></blockquote><p>第一项不用说。</p><p>第二项是设置 webpack 的 externals，由于项目中用到了 g2、d3、echarts、@antv/data-set、moment、g-cloud、g2-plugin-slider、cal-heatmap 等 js 库，所以把它们都配置到 externals 下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"entry"</span>: <span class="string">"src/index.js"</span>,</span><br><span class="line">  <span class="attr">"extraBabelPlugins"</span>: [</span><br><span class="line">    <span class="string">"transform-runtime"</span>,</span><br><span class="line">    <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">    <span class="string">"transform-class-properties"</span>,</span><br><span class="line">    [<span class="string">"import"</span>, &#123; <span class="attr">"libraryName"</span>: <span class="string">"antd"</span>, <span class="attr">"libraryDirectory"</span>: <span class="string">"es"</span>, <span class="attr">"style"</span>: <span class="literal">true</span> &#125;]</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"env"</span>: &#123;</span><br><span class="line">    <span class="attr">"development"</span>: &#123;</span><br><span class="line">      <span class="attr">"extraBabelPlugins"</span>: [</span><br><span class="line">        <span class="string">"dva-hmr"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"externals"</span>: &#123;</span><br><span class="line">    <span class="attr">"g2"</span>: <span class="string">"G2"</span>,</span><br><span class="line">    <span class="attr">"echarts"</span>: <span class="string">"echarts"</span>,</span><br><span class="line">    <span class="attr">"@antv/data-set"</span>: <span class="string">"DataSet"</span>,</span><br><span class="line">    <span class="attr">"moment"</span>: <span class="string">"moment"</span>,</span><br><span class="line">    <span class="attr">"g-cloud"</span>: <span class="string">"Cloud"</span>,</span><br><span class="line">    <span class="attr">"g2-plugin-slider"</span>: <span class="string">"G2.Plugin.slider"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"ignoreMomentLocale"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"theme"</span>: <span class="string">"./src/theme.js"</span>,</span><br><span class="line">  <span class="attr">"hash"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"multipage"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 .eslint.js 将其配置为全局变量：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"globals": &#123;</span><br><span class="line">  "CalHeatMap": true,</span><br><span class="line">  "DataSet": true,</span><br><span class="line">  "moment": true,</span><br><span class="line">  "echarts": true,</span><br><span class="line">  "G2": true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上注意：</p><ol><li>配置 <code>&quot;multipage&quot;: true</code> 后，roadhog 才会把超过2次引用的依赖打为 common 包</li><li>“dva-hmr” 设置在 development 才会避免生产环境下将其打包，因为生产环境下不会用到</li><li>将这些 js 库文件（不用包涵g-cloud、g2-plugin-slider）下载下来，放到项目根目录下 public/js 下，roadhog 作者约定 public 目录下的文件会在 server 和 build 时被自动 copy 到输出目录（默认是 ./dist）下。所以可以在这里存放 favicon, iconfont, html, html 里引用的图片等。</li><li>手动在 index.ejs 里面将其引入</li></ol><p>第三项</p><p>主要改动的地方：</p><ol><li>common.js 下 HtmlWebpackPlugin 插件配置的地方，给它配置 public 下的所有 js 文件和 css 文件的路径和环境变量：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (existsSync(join(paths.appSrc, <span class="string">'index.ejs'</span>))) &#123;</span><br><span class="line">    <span class="keyword">const</span> scripts = glob.sync(path.resolve(paths.appPublic) + <span class="string">'/js/*.js'</span>).map(<span class="function"><span class="params">filePath</span> =&gt;</span> path.basename(filePath));</span><br><span class="line">    <span class="keyword">const</span> stylesheets = glob.sync(path.resolve(paths.appPublic) + <span class="string">'/stylesheets/*.css'</span>).map(<span class="function"><span class="params">filePath</span> =&gt;</span> path.basename(filePath));</span><br><span class="line">    ret.push(<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">        template: <span class="string">'src/index.ejs'</span>,</span><br><span class="line">        inject: <span class="literal">true</span>,</span><br><span class="line">        scripts,</span><br><span class="line">        stylesheets,</span><br><span class="line">        env: <span class="built_in">JSON</span>.stringify(NODE_ENV)</span><br><span class="line">    &#125;));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>然后在你的项目的 index.ejs 中引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">stylesheets</span> = <span class="string">htmlWebpackPlugin.options.stylesheets</span> || [] %&gt;</span></span><br><span class="line">  &lt;% for(var i = 0; i &lt; stylesheets.length; i++) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= 'stylesheets/' + stylesheets[i] %&gt;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> <span class="attr">var</span> <span class="attr">scripts</span> = <span class="string">htmlWebpackPlugin.options.scripts</span> || [] %&gt;</span></span><br><span class="line">  &lt;% for(var i = 0; i &lt; scripts.length; i++) &#123; %&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"&lt;%= 'js/' + scripts[i] %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>修改 webpack.config.prod.js</li></ol><p>替换 webpack.optimize.UglifyJsPlugin 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...(debug ? [] : [<span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">    uglifyOptions: &#123;</span><br><span class="line">        compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    cache: <span class="literal">true</span>,</span><br><span class="line">    sourceMap: <span class="literal">false</span>,</span><br><span class="line">    parallel: <span class="literal">true</span>,</span><br><span class="line">&#125;)]),</span><br></pre></td></tr></table></figure><p>UglifyJsPlugin 的好处不必多说，大家自己 google。</p><p>删掉 webpack.optimize.CommonsChunkPlugin 配置，参考 vue-cli2 的配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (config.multipage) &#123;</span><br><span class="line">    <span class="comment">// Support hash</span></span><br><span class="line">    <span class="keyword">const</span> name = config.hash ? <span class="string">'common.[hash]'</span> : <span class="string">'common'</span>;</span><br><span class="line">    <span class="comment">// ret.push(new webpack.optimize.CommonsChunkPlugin(&#123;</span></span><br><span class="line">    <span class="comment">//   name: 'common',</span></span><br><span class="line">    <span class="comment">//   filename: `$&#123;name&#125;.js`,</span></span><br><span class="line">    <span class="comment">// &#125;));</span></span><br><span class="line">    ret = ret.concat([</span><br><span class="line">      <span class="comment">// split vendor js into its own file</span></span><br><span class="line">      <span class="comment">// 将所有从node_modules中引入的js提取到vendor.js，即抽取库文件</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'vendor'</span>,</span><br><span class="line">        minChunks(<span class="built_in">module</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="built_in">module</span>.resource &amp;&amp; <span class="regexp">/\.js$/</span>.test(<span class="built_in">module</span>.resource) &amp;&amp; <span class="built_in">module</span>.resource.indexOf(paths.appNodeModules) === <span class="number">0</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">      <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">      <span class="comment">// 从vendor中提取出manifest，原因如上</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name: <span class="string">'manifest'</span>,</span><br><span class="line">        minChunks: <span class="literal">Infinity</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">      <span class="comment">// This instance extracts shared chunks from code splitted chunks and bundles them</span></span><br><span class="line">      <span class="comment">// in a separate chunk, similar to the vendor chunk</span></span><br><span class="line">      <span class="comment">// see: https://webpack.js.org/plugins/commons-chunk-plugin/#extra-async-commons-chunk</span></span><br><span class="line">      <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">        name,</span><br><span class="line">        <span class="keyword">async</span>: <span class="string">'vendor-async'</span>,</span><br><span class="line">        children: <span class="literal">true</span>,</span><br><span class="line">        minChunks: <span class="number">3</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，运行 <code>npm run test</code>，<code>npm run build</code>，编译好之后，发布到 npm 仓库如 <a href="https://www.npmjs.com/package/liangxinwei_roadhog" target="_blank" rel="noopener">liangxinwei_roadhog</a>。</p><p>最后，删掉项目下的 package.json 里面 roadhog 相关的依赖，替换为  <code>&quot;liangxinwei_roadhog&quot;: &quot;^1.0.0&quot;</code>：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">  - "roadhog": "^1.3.1",</span><br><span class="line">  - "roadhog-api-doc": "^0.1.0",</span><br><span class="line">  + "liangxinwei_roadhog": "^1.0.0",</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>修改启动和打包命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"start"</span>: <span class="string">"node --max_old_space_size=4096 node_modules/liangxinwei_roadhog/lib/server.js"</span>,</span><br><span class="line"><span class="string">"build"</span>: <span class="string">"node --max_old_space_size=4096 node_modules/liangxinwei_roadhog/lib/build.js"</span></span><br></pre></td></tr></table></figure><p>经过我前后的数据比对，修改第二项之后，打包时间由原来的 20-30min 缩减到 5-6min，修改第三项之后，初次打包时间为 3-4min，再次打包时间缩减到 1min 之内。大功告成！</p><p>前端开发长路漫漫，大家且行且珍惜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;背景：公司的后台管理系统项目基于 Antd Pro 早期版本，使用的脚手架是 &lt;a href=&quot;https://github.com/sorrycc/roadhog&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;roadhog&lt;/a&gt;，虽然接入了 dva 
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>webpack各配置项全解析</title>
    <link href="https://www.liangxinwei.cn/2019/01/30/webpack%E5%90%84%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%85%A8%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.liangxinwei.cn/2019/01/30/webpack各配置项全解析/</id>
    <published>2019-01-30T10:59:45.000Z</published>
    <updated>2020-04-15T03:03:23.399Z</updated>
    
    <content type="html"><![CDATA[<p>以下内容摘自<strong>【深入浅出webpack】</strong>，包含每一项的具体配置。</p><h2 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h2><p>表示入口, Webpack 执行构建的第一步将从 Entry 开始,可抽象成输入，类型可以是 string、 object、 array</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 只有 1 个入口,入口只有 1 个文件</span><br><span class="line">entry: &apos; ./app/entry&apos;,</span><br><span class="line">// 只有1个入口,入口有两个文件</span><br><span class="line">entry: [</span><br><span class="line">    &apos;./app/entry1&apos;,</span><br><span class="line">    &apos;./app/entry2&apos;</span><br><span class="line">],</span><br><span class="line">// 有两个入口</span><br><span class="line">entry: &#123;</span><br><span class="line">    a: &apos;./app/entry-a&apos;,</span><br><span class="line">    b: [&apos;./app/entry-bl&apos;, &apos;./app/entry-b2&apos;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="output"><a href="#output" class="headerlink" title="output"></a>output</h2><p>如何输出结果 : 在 Webpack 经过一系列处理后,如何输出最终想要的代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 输出文件存放的目录,必须是 string 类型的绝对路径</span><br><span class="line">    path: path.resolve(dirname, &apos; dist &apos;),</span><br><span class="line">    // 输出文件的名称</span><br><span class="line">    // 完整的名称</span><br><span class="line">    filename: &apos; bundle.js&apos;,</span><br><span class="line">    // 在配置了多个 entry 时,通过名称模板为不同的 entry 生成不同的文件名称</span><br><span class="line">    filename: &apos; [name].js&apos;,</span><br><span class="line">    // 根据文件内容的 Hash 值生成文件的名称, 用于 浏览器长时间缓存文件</span><br><span class="line">    filename: &apos; [chunkhash].js&apos;,</span><br><span class="line">    // 放到指定目录下</span><br><span class="line">    // 发布到线上的所有资源的 URL 前缀,为 string 类型</span><br><span class="line">    publicPath: &apos;/assets/&apos;,</span><br><span class="line">    // 放到根目录下</span><br><span class="line">    publicPath: &apos;&apos;,</span><br><span class="line">    // 放到 CDN 上 // 导出库的名称 , 为 string 类型, 不填它时,默认的输出格式是匿名的立即执行函数</span><br><span class="line">    publicPath: &apos;https://cdn.example.com/&apos;,</span><br><span class="line">    library: &apos; MyLibrary &apos;,</span><br><span class="line">    // 导出库的类型,为枚举类型,默认是 var</span><br><span class="line">    // 可以是umd、 umd2、 commonjs2、 commonjs、 amd、 this、 var、 assign、 window、global、jsonp</span><br><span class="line">    libraryTarget: &apos;umd&apos;,</span><br><span class="line">    // 是否包含有用的文件路径信息到生成的代码里 ,为 boolean 类型</span><br><span class="line">    pathinfo: true,</span><br><span class="line">    // 附加 Chunk 的文件名称</span><br><span class="line">    chunkFilename: &apos;[id].js&apos;,</span><br><span class="line">    chunkFilename: &apos;[chunkhash].js&apos;,</span><br><span class="line">    // JSONP 异步加载资源时的回调函数名称,需要和服务端搭配使用</span><br><span class="line">    jsonpFunction: &apos;myWebpackJsonp&apos;,</span><br><span class="line">    // 生成的 Source Map 文件的名称</span><br><span class="line">    // 浏览器开发者工具里显示的源码模块名称</span><br><span class="line">    sourceMapFilename: &apos;[file].map&apos;,</span><br><span class="line">    // 异步加载跨域的资源时使用的方式</span><br><span class="line">    devtoolModuleFilenameTemplate: &apos;webpack:lll[resource-path]&apos;,</span><br><span class="line">    crossOriginLoading: &apos;use-credentials&apos;,</span><br><span class="line">    crossOriginLoading: &apos;anonymous&apos;,</span><br><span class="line">    crossOriginLoading: false</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="module"><a href="#module" class="headerlink" title="module"></a>module</h2><p>配置模块相关</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 不用解析和处理的模块，Webpack忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能</span><br><span class="line">    // 注意，被忽略掉的文件里不应该包含 import、 require、 define 等模块化语句，</span><br><span class="line">    // 不然会导致在构建出的代码中包含无法在浏览器环境下执行的模块化语句。</span><br><span class="line">    // 单独、完整的 、react.min.js、文件没有采用模块化，忽略对 、react.min.js、文件 的递归解析处理</span><br><span class="line">    noParse: [/react\.min\.js$/],</span><br><span class="line">    // 配置 Loader</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        // 正则匹配命中要使用 Loader 的文件</span><br><span class="line">        test: /\.jsx$/,</span><br><span class="line">        // 只会命中这里面的文件</span><br><span class="line">        include: [</span><br><span class="line">          path.resolve(__dirname, &apos;src&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 忽略这里面的文件</span><br><span class="line">        exclude: [</span><br><span class="line">          path.resolve(__dirname, &apos;node_modules&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 使用哪些 Loader,有先后次序,从后向前执行</span><br><span class="line">        use: [</span><br><span class="line">          // style-loader会将 css代码转换成字符串后，注入 JavaScript代码中，通过 JavaScript 向 DOM 增加样式。 如果我们想将 css 代码提取到一个单独的文件中，而不是和 JavaScript 混在 一 起，则可以使用 ExtractTextPlugin</span><br><span class="line">          &apos;style-loader&apos;,</span><br><span class="line">          // css-loader 会找出 css 代码中 eimport 和 url ()这样的导入语句，告诉 Webpack 依赖这些资源 。 同时支持 CSS Modules、压缩 css 等功能 。处理完后再将结果交给 style-loader处理。</span><br><span class="line">          &apos;css-loader&apos;,</span><br><span class="line">          // 通过 sass-loader将 scss 源码转换为 css 代码，再将 css 代码交给 css-loader处理。</span><br><span class="line">          &apos;sass-loader&apos;,</span><br><span class="line">          // 直接使用 Loader 的名称</span><br><span class="line">          &#123;</span><br><span class="line">            loader: &apos;css-loader&apos;,</span><br><span class="line">            // 向 html-loader 传一些参数</span><br><span class="line">            options: &#123;&#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        // 不用解析和处理的模块，Webpack忽略对部分没采用模块化的文件的递归解析处理，这样做的好处是能提高构建性能</span><br><span class="line">        noParse: [</span><br><span class="line">          // 用正则匹配</span><br><span class="line">          /special-library\.js$/</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    /**</span><br><span class="line">     * 配置插件</span><br><span class="line">     */</span><br><span class="line">    plugins: [],</span><br><span class="line">    /**</span><br><span class="line">     * 配置寻找模块的规则</span><br><span class="line">     */</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        // 寻找模块的根目录,为 array 类型,默认以 node_modules 为根目录</span><br><span class="line">        // 可以指明存放第三方模块的绝对路径，以减少寻找， dirname 表示当前工作目录</span><br><span class="line">        modules: [path.resolve(__dirname, &apos;node_modules&apos;)],</span><br><span class="line">        modules: [</span><br><span class="line">            &apos;node modules &apos;,</span><br><span class="line">             path.resolve(__dirname, &apos;app&apos;)</span><br><span class="line">        ],</span><br><span class="line">        // 模块的后缀名，后缀尝试列表要尽可能小，频率出现最高的文件后缀要优先放在最前面</span><br><span class="line">        extensions: [&apos;.js&apos;, &apos;json&apos;, &apos;jsx&apos;, &apos;.css&apos;],</span><br><span class="line">        // 模块别名配置,用于映射模块，从而跳过耗时的递归解析操作。</span><br><span class="line">        alias: &#123;</span><br><span class="line">          // 将 &apos;module&apos;映射成&apos;new-module&apos; ,同样, &apos;module/path/file&apos;也会被映射 成&apos;new-module/path/file&apos;</span><br><span class="line">          &apos;module&apos;: &apos;new-module&apos;,</span><br><span class="line">          // 使用结尾符号$后 ,将 &apos;only-module&apos; 映射成 &apos;new-module&apos;, // 但是不像上面的 ,&apos; module/path/file &apos;不会被映射成&apos; new-module/path/file</span><br><span class="line">          &apos;only-module$&apos;: &apos;new-modules&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        // alias 还支持使用数组来更详细地进行配置</span><br><span class="line">        alias: [</span><br><span class="line">            &#123;</span><br><span class="line">              // 老模块</span><br><span class="line">              name: &apos;module&apos;,</span><br><span class="line">              // 新模块</span><br><span class="line">              alias: &apos;new-module &apos;,</span><br><span class="line">              // 是否只映射模块,如果是 true, 则只有&apos; module &apos;会被映射:如果是 false,则&apos;module/inner/path &apos;也会被映射</span><br><span class="line">              onlyModule: true,</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        // 是否跟随文件的软链接去搜寻模块的路径</span><br><span class="line">        symlinks: true,</span><br><span class="line">        // 模块的描述文件</span><br><span class="line">        descriptionFiles: [&apos; package.json &apos;],</span><br><span class="line">        // 模块的描述文件里描述入口的文件的字段名</span><br><span class="line">        mainFields: [&apos; main &apos;],</span><br><span class="line">        // 是否强制导入语句写明文件后缀</span><br><span class="line">        enforceExtension: false</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 输出文件的性能检查配置</span><br><span class="line">     */</span><br><span class="line">    performance: &#123;</span><br><span class="line">        // 有性能问题时输出警告</span><br><span class="line">        hints: &apos;warning &apos;,</span><br><span class="line">        // 有性能问题时输出错误</span><br><span class="line">        hints: &apos;error &apos;,</span><br><span class="line">        // 关闭性能检查</span><br><span class="line">        hints: false,</span><br><span class="line">        // 最大文件的大小(单位为 bytes)</span><br><span class="line">        maxAssetSize: 200000,</span><br><span class="line">        // 最大入口文件的大小 (单位为 bytes)</span><br><span class="line">        maxEntrypointSize: 400000,</span><br><span class="line">        // 过滤要检查的文件</span><br><span class="line">        assetFilter: function (assetFilename) &#123;</span><br><span class="line">            return assetFilename.endsWith(&apos; .css &apos;) || assetFilename.endsWith(&apos;.js&apos;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 配置 source-map 类型</span><br><span class="line">    devtool: &apos; source-map &apos;,</span><br><span class="line">    // Webpack 使用的根目录, string 类型必须是绝对路径 //  配置输出代码的运行环境</span><br><span class="line">    context: __dirname,</span><br><span class="line">    // 浏览器,默认</span><br><span class="line">    target: &apos;web&apos;,</span><br><span class="line">    // WebWorker</span><br><span class="line">    target: &apos;webworker&apos;,</span><br><span class="line">    // Node.js,使用 、require、语句加载 Chunk代码 target:&apos;async-node&apos;, II Node.js,异步加载 Chunk代码</span><br><span class="line">    target: &apos;node&apos;,</span><br><span class="line">    // nw.js</span><br><span class="line">    target: &apos;node-webkit&apos;,</span><br><span class="line">    // electron,主线程</span><br><span class="line">    target: &apos;electron-main&apos;,</span><br><span class="line">    // electron,渲染线程</span><br><span class="line">    target: &apos;electron-renderer&apos;,</span><br><span class="line">    // 使用来自 JavaScript 运行环境提供的全局变量</span><br><span class="line">    externals: &#123;</span><br><span class="line">        jquery: &apos;jQuery&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * 控制台输出日志控制</span><br><span class="line">     */</span><br><span class="line">    stats: &#123;</span><br><span class="line">      assets: true,</span><br><span class="line">      colors: true,</span><br><span class="line">      errors: true,</span><br><span class="line">      errorDetails: true,</span><br><span class="line">      hash: true</span><br><span class="line">    &#125;,</span><br><span class="line">    /**</span><br><span class="line">     * DevServer 相关的配置</span><br><span class="line">     */</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        // 代理到后端服务接口</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &apos;/api&apos;: &apos;http:// localhost:3000&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        // 配置 DevServer HTTP 服务器的文 件根目录</span><br><span class="line">        contentBase: path.join(__dirname, &apos;public&apos;),</span><br><span class="line">        // 是否开启 Gzip 压缩</span><br><span class="line">        compress: true,</span><br><span class="line">        // 是否开发 HTMLS History API 网页</span><br><span class="line">        historyApiFallback: true,</span><br><span class="line">        // 是否开启模块热替换功能</span><br><span class="line">        hot: true,</span><br><span class="line">        // 是否开启 HTTPS 模式</span><br><span class="line">        https: false,</span><br><span class="line">        // 是否捕捉 Webpack构建的性能信息,用于分析是什么原因导致构建性能不佳</span><br><span class="line">        profile: true,</span><br><span class="line">        // 是否启用缓存来提升构建速度</span><br><span class="line">        cache: false,</span><br><span class="line">        // 是否开始</span><br><span class="line">        watch: true,</span><br><span class="line">        // 监听模式选项</span><br><span class="line">        // 不监听的文件或文件夹,支持正则匹配。默认为空</span><br><span class="line">        watchOptions: &#123;</span><br><span class="line">            ignored: /node modules/,</span><br><span class="line">            // 监听到变化发生后,等 300ms 再执行动作,截流,防止文件更新太快导致重新编 译频率太快。默认为 300ms</span><br><span class="line">            aggregateTimeout: 300,</span><br><span class="line">            // 不停地询问系统指定的文件有没有发生变化,默认每秒询问 1000 次</span><br><span class="line">            poll: 1000</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以下内容摘自&lt;strong&gt;【深入浅出webpack】&lt;/strong&gt;，包含每一项的具体配置。&lt;/p&gt;
&lt;h2 id=&quot;entry&quot;&gt;&lt;a href=&quot;#entry&quot; class=&quot;headerlink&quot; title=&quot;entry&quot;&gt;&lt;/a&gt;entry&lt;/h2&gt;&lt;p&gt;表示
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>小程序和h5页面之间的互相跳转</title>
    <link href="https://www.liangxinwei.cn/2018/10/23/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%92%8Ch5%E9%A1%B5%E9%9D%A2%E4%B9%8B%E9%97%B4%E7%9A%84%E4%BA%92%E7%9B%B8%E8%B7%B3%E8%BD%AC/"/>
    <id>https://www.liangxinwei.cn/2018/10/23/小程序和h5页面之间的互相跳转/</id>
    <published>2018-10-23T11:02:45.000Z</published>
    <updated>2020-01-02T00:46:46.989Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小程序跳转到-h5-页面"><a href="#小程序跳转到-h5-页面" class="headerlink" title="小程序跳转到 h5 页面"></a>小程序跳转到 h5 页面</h2><p>小程序代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wx.navigateTo(&#123;url: &apos;/pages/webview?url=&apos; + encodeURIComponent(&apos;h5页面的 url&apos;)&#125;);</span><br></pre></td></tr></table></figure><p>webview.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;web-view src=&quot;&#123;&#123;url&#125;&#125;&quot; bindmessage=&quot;handlePostMessage&quot;&gt;&lt;/web-view&gt;</span><br><span class="line"></span><br><span class="line">onLoad: function (options) &#123;</span><br><span class="line"> this.setData(&#123;</span><br><span class="line">   url: decodeURIComponent(options.url),</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 接收 h5 页面传递过来的参数</span><br><span class="line">handlePostMessage: function (e) &#123;</span><br><span class="line">  const data = e.detail;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>h5 页面代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">···</span><br><span class="line">  &lt;script type=&quot;text/javascript&quot; src=&quot;https://res.wx.qq.com/open/js/jweixin-1.3.2.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br></pre></td></tr></table></figure><p>记得把 url 的 host 添加到后台的合法域名中。</p><h2 id="h5-页面跳回小程序"><a href="#h5-页面跳回小程序" class="headerlink" title="h5 页面跳回小程序"></a>h5 页面跳回小程序</h2><p>在 h5 页面的任何点击事件中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/* eslint-disable */</span><br><span class="line"> wx.miniProgram.getEnv(function (res) &#123;</span><br><span class="line">   if (res.miniprogram) &#123;</span><br><span class="line">     wx.miniProgram.switchTab(&#123;url: &apos;/pages/home/home&apos;&#125;);</span><br><span class="line"> wx.miniProgram.postMessage(&#123;data: &#123;id: &apos;1234&apos;&#125;&#125;); // 传的参数</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> /* eslint-enable */</span><br></pre></td></tr></table></figure><p>请注意，<strong>是wx.miniProgram，不是 window.wx.miniProgram</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;小程序跳转到-h5-页面&quot;&gt;&lt;a href=&quot;#小程序跳转到-h5-页面&quot; class=&quot;headerlink&quot; title=&quot;小程序跳转到 h5 页面&quot;&gt;&lt;/a&gt;小程序跳转到 h5 页面&lt;/h2&gt;&lt;p&gt;小程序代码：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="小程序" scheme="https://www.liangxinwei.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>微信订阅号开发之获取网页授权</title>
    <link href="https://www.liangxinwei.cn/2018/10/17/%E5%BE%AE%E4%BF%A1%E8%AE%A2%E9%98%85%E5%8F%B7%E5%BC%80%E5%8F%91%E4%B9%8B%E8%8E%B7%E5%8F%96%E7%BD%91%E9%A1%B5%E6%8E%88%E6%9D%83/"/>
    <id>https://www.liangxinwei.cn/2018/10/17/微信订阅号开发之获取网页授权/</id>
    <published>2018-10-17T11:02:20.000Z</published>
    <updated>2020-04-15T03:45:35.043Z</updated>
    
    <content type="html"><![CDATA[<p>题记：项目（Vue）是h5页面，主要用于公众号里面的活动，目的是增加公众号关注人数，达到推广的目的，其中涉及到获取用户的昵称、头像、unionid等基本信息。<br>由于微信公众号改版成订阅号之后，并没有获取用户信息的接口，服务号才有，详情可查看<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842" target="_blank" rel="noopener">官方文档</a>。<br>所以目前想到的思路是借用和订阅号关联的服务号获取 code，然后利用获取到的code 发送给后端再请求用户信息。</p><p>首先，route.js 里面配置 needUnionId，通过 checkUnionId HOC 加工页面使其先获取 unionid，然后再通过 unionid 请求数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;Util&#125; <span class="keyword">from</span> <span class="string">'./utils'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/store'</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'./store/module/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;checkUnionId&#125; <span class="keyword">from</span> <span class="string">'./hoc'</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Router);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dynamicImport = <span class="function">(<span class="params">path</span>) =&gt;</span> <span class="keyword">async</span> (resolve) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">`./pages/<span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">  resolve(<span class="built_in">module</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 设置项：</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * meta:</span></span><br><span class="line"><span class="comment"> *    title:                页面标题</span></span><br><span class="line"><span class="comment"> *    checkUnionId:         如果需要一进入页面就发请求并携带参数 unionid，则接入 checkUnionId</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 注意：以下的 component 为 dynamicImport 类型的，dynamicImport 的参数都有 ../pages/ 前缀，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> routerList = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/wx-login'</span>,</span><br><span class="line">    name: <span class="string">'WXLogin'</span>,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      needUnionId: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    component: dynamicImport(<span class="string">'login/wx-login'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    name: <span class="string">'login'</span>,</span><br><span class="line">    component: dynamicImport(<span class="string">'login/login'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'*'</span>,</span><br><span class="line">    name: <span class="string">'not-found'</span>,</span><br><span class="line">    component: dynamicImport(<span class="string">'exception/not-found'</span>),</span><br><span class="line">    meta: &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">machiningRouter</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  arr.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> needUnionId = (v.meta || &#123;&#125;).needUnionId === <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (v.component &amp;&amp; needUnionId) &#123;</span><br><span class="line">      v.component = checkUnionId(v.component);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!needUnionId &amp;&amp; v.children) &#123;</span><br><span class="line">      machiningRouter(v.children);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">machiningRouter(routerList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// mode: 'history',</span></span><br><span class="line">  <span class="comment">// base: '/',</span></span><br><span class="line">  routes: routerList</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> metaData = to.meta || &#123;&#125;;</span><br><span class="line">  !metaData.hidden &amp;&amp; http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">  metaData.title &amp;&amp; Util.setDocumentTitle(metaData.title);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br><span class="line">router.afterEach(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> metaData = route.meta || &#123;&#125;;</span><br><span class="line">  !metaData.hidden &amp;&amp; http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><p>先看 wx-login.vue 的使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;Url, Util&#125; <span class="keyword">from</span> <span class="string">'@/utils'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;WeChat, closeWindow&#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'WXLogin'</span>,</span><br><span class="line">    data() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    created()  &#123;</span><br><span class="line">        <span class="comment">// 不需要</span></span><br><span class="line">        <span class="comment">// this.requestData();</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        <span class="comment">// 适用于一进入页面就请求数据，checkUnionId 会自动调用，不需要在 created 里面手动调用</span></span><br><span class="line">        <span class="keyword">async</span> requestData() &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 适用于点击按钮才请求数据，此时 checkUnionId 已经获取到了 unionid</span></span><br><span class="line">        <span class="keyword">async</span> handleLogin() &#123;</span><br><span class="line">        <span class="keyword">const</span> param = &#123;</span><br><span class="line">          unionid: <span class="keyword">this</span>.$parent.unionId,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">this</span>.$http.post(Url.PMS_QR_CODE_LOGIN, param);</span><br><span class="line">        <span class="keyword">this</span>.$toast(<span class="string">'扫码登录成功'</span>);</span><br><span class="line">        <span class="keyword">this</span>.status = <span class="string">'success'</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其中，checkUnionId.js 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapActions, mapGetters&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;getUnionId, WeChat&#125; <span class="keyword">from</span> <span class="string">'@/utils/wechat'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 校验 openId 是否为 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (component) =&gt; (&#123;</span><br><span class="line">  computed: &#123;</span><br><span class="line">    ...mapGetters([<span class="string">'unionId'</span>])</span><br><span class="line">  &#125;,</span><br><span class="line">  props: component.props,</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> h(component, &#123;</span><br><span class="line">      on: <span class="keyword">this</span>.$listeners,</span><br><span class="line">      attrs: <span class="keyword">this</span>.$attrs,</span><br><span class="line">      props: <span class="keyword">this</span>.$props</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.requestUnionId();</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapActions([<span class="string">'setLoading'</span>]),</span><br><span class="line">    <span class="keyword">async</span> requestUnionId() &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.unionId) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'local unionId:'</span>, <span class="keyword">this</span>.unionId);</span><br><span class="line">          <span class="keyword">this</span>.afterRequestUnionId();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">this</span>.$toast(<span class="string">'获取信息中···'</span>);</span><br><span class="line">          <span class="keyword">await</span> getUnionId();</span><br><span class="line">          <span class="keyword">await</span> <span class="keyword">new</span> WeChat().init();</span><br><span class="line">          <span class="keyword">this</span>.afterRequestUnionId();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">'check-unionid requestUnionId:'</span>, e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    afterRequestUnionId() &#123;</span><br><span class="line">      <span class="comment">// fixme: mounted 先于子组件的 mounted 执行，所以不在 setTimeout 里执行的话，this.$children 获取不到，因为页面是按需加载，不是全量加载</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.$children.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!v.requestData || <span class="built_in">Object</span>.prototype.toString.call(v) !== <span class="string">'[object Function]'</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">'用 checkUnionId 装饰的页面中，如果需要一进入页面就立即发送带 union_id 的请求，那么 methods 中必须有 requestData function 用于获取初始数据，否则，请忽略此条。'</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v.requestData();</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>wechat.js 为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/store'</span>;</span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">'@/store/module/user'</span>;</span><br><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">'@/store/module/http'</span>;</span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'./util'</span>;</span><br><span class="line"><span class="keyword">import</span> axiosInstance <span class="keyword">from</span> <span class="string">'./axios-instance'</span>;</span><br><span class="line"><span class="keyword">import</span> Url <span class="keyword">from</span> <span class="string">'./url'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> APP_ID = <span class="string">'APP_ID'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_DATA = &#123;</span><br><span class="line">  appId: APP_ID,</span><br><span class="line">  apiList: [</span><br><span class="line">    <span class="string">'checkJsApi'</span>,</span><br><span class="line">    <span class="string">'closeWindow'</span>,</span><br><span class="line">    <span class="string">'hideAllNonBaseMenuItem'</span></span><br><span class="line">  ],</span><br><span class="line">  errorType: [</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'1'</span>, <span class="attr">msg</span>: <span class="string">'分享成功'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'2'</span>, <span class="attr">msg</span>: <span class="string">'微信客户端版本过低，请升级最新版本'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'3'</span>, <span class="attr">msg</span>: <span class="string">'获取接口的签名失效，请重新调用方法获取API授权签名'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'4'</span>, <span class="attr">msg</span>: <span class="string">'微信分享失败，请重新分享'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'5'</span>, <span class="attr">msg</span>: <span class="string">'接口访问失败'</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">code</span>: <span class="string">'6'</span>, <span class="attr">msg</span>: <span class="string">'jsApi配置成功'</span>&#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 微信 api 全局管理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">      instance = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.hasInit = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.hasInit) &#123;</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// const config = await axiosInstance.post(Url.SIGNATURE, &#123;url: location.origin&#125;);</span></span><br><span class="line">        <span class="keyword">const</span> config = &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> registerData = &#123;</span><br><span class="line">          debug: <span class="literal">false</span>,</span><br><span class="line">          appId: DEFAULT_DATA.appId,</span><br><span class="line">          timestamp: config.timestamp,</span><br><span class="line">          nonceStr: config.noncestr,</span><br><span class="line">          signature: config.signature,</span><br><span class="line">          jsApiList: DEFAULT_DATA.apiList</span><br><span class="line">        &#125;;</span><br><span class="line">        wx.config(registerData);</span><br><span class="line">        wx.ready(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'wx.ready'</span>);</span><br><span class="line">          wx.hideAllNonBaseMenuItem &amp;&amp; wx.hideAllNonBaseMenuItem();</span><br><span class="line">          <span class="keyword">if</span> (!localStorage.getItem(<span class="string">'userUnionId'</span>)) &#123;</span><br><span class="line">            closeWindow();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'unionid is null'</span>);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">this</span>.hasInit = <span class="literal">true</span>;</span><br><span class="line">          resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        wx.error(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          wx.hideAllNonBaseMenuItem &amp;&amp; wx.hideAllNonBaseMenuItem();</span><br><span class="line">          <span class="comment">// Vue.$toast('请退出去重新进入');</span></span><br><span class="line">          <span class="comment">// closeWindow();</span></span><br><span class="line">          <span class="comment">// throw res;</span></span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">closeWindow</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">typeof</span> wx !== <span class="string">'undefined'</span> &amp;&amp; wx.closeWindow &amp;&amp; wx.closeWindow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 code</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCode</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">encodeURIComponent</span>(location.href);</span><br><span class="line">  <span class="built_in">window</span>.location.href = <span class="string">`https://open.weixin.qq.com/connect/oauth2/authorize?appid=<span class="subst">$&#123;APP_ID&#125;</span>&amp;redirect_uri=<span class="subst">$&#123;url&#125;</span>&amp;response_type=code&amp;scope=snsapi_userinfo&amp;connect_redirect=1&amp;state=<span class="subst">$&#123;Util.getRandomKey()&#125;</span>#wechat_redirect`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取 user unionId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUnionId</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> existedUnionId = localStorage.getItem(<span class="string">'userUnionId'</span>);</span><br><span class="line">    <span class="keyword">if</span> (existedUnionId) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'缓存中的 onion_id:'</span>, existedUnionId, <span class="string">', 不发请求'</span>);</span><br><span class="line">        http.actions.setLoading(store, &#123;<span class="attr">status</span>: <span class="literal">false</span>&#125;);</span><br><span class="line">        user.actions.setOpenId(store, existedUnionId);</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> code = Util.getUrlSearchParameter().code;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'code:'</span>, code);</span><br><span class="line">    <span class="keyword">if</span> (code) &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> axiosInstance.get(Url.USER_INFO, &#123;<span class="attr">params</span>: &#123;code&#125;&#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">            closeWindow();</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;);</span><br><span class="line">        result.telephone &amp;&amp; user.actions.setTelephoneNumber(store, result.telephone);</span><br><span class="line">        result.openid &amp;&amp; user.actions.setOpenId(store, result.openid);</span><br><span class="line">        result.unionid &amp;&amp; user.actions.setUnionId(store, result.unionid);</span><br><span class="line">        result.nickname &amp;&amp; user.actions.setNickname(store, result.nickname);</span><br><span class="line">        result.headimgurl &amp;&amp; user.actions.setHeadImgUrl(store, result.headimgurl);</span><br><span class="line">        resolve(&#123;<span class="attr">msg</span>: <span class="string">'success'</span>&#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'没有 code，微信即将重定向···'</span>);</span><br><span class="line">        getCode();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  WeChat,</span><br><span class="line">  getUnionId,</span><br><span class="line">  closeWindow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>wechat.js 里面涉及到的 Util 方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生成唯一的 key</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRandomKey</span>(<span class="params">len = <span class="number">6</span></span>) </span>&#123;</span><br><span class="line">    len = <span class="built_in">Object</span>.prototype.toString.call(len) === <span class="string">'[object Number]'</span> ? len : <span class="number">6</span>;</span><br><span class="line">    len = <span class="built_in">Math</span>.abs(len) || <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.random().toString(<span class="number">16</span>).substr(-len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 获取 URL 的 search 参数值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getUrlSearchParameter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> search = <span class="built_in">window</span>.location.search.replace(<span class="string">'?'</span>, <span class="string">''</span>);</span><br><span class="line">    <span class="keyword">const</span> searchList = search.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">const</span> searchObj = &#123;&#125;;</span><br><span class="line">    searchList.length &gt; <span class="number">0</span> &amp;&amp; searchList.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> list = v.split(<span class="string">'='</span>);</span><br><span class="line">      <span class="keyword">if</span> (list.length === <span class="number">2</span>) &#123;</span><br><span class="line">        searchObj[list[<span class="number">0</span>]] = list[<span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> searchObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题记：项目（Vue）是h5页面，主要用于公众号里面的活动，目的是增加公众号关注人数，达到推广的目的，其中涉及到获取用户的昵称、头像、unionid等基本信息。&lt;br&gt;由于微信公众号改版成订阅号之后，并没有获取用户信息的接口，服务号才有，详情可查看&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="小程序" scheme="https://www.liangxinwei.cn/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>浏览器/iframe 全屏、退出全屏</title>
    <link href="https://www.liangxinwei.cn/2018/08/15/%E6%B5%8F%E8%A7%88%E5%99%A8-iframe-%E5%85%A8%E5%B1%8F%E3%80%81%E9%80%80%E5%87%BA%E5%85%A8%E5%B1%8F/"/>
    <id>https://www.liangxinwei.cn/2018/08/15/浏览器-iframe-全屏、退出全屏/</id>
    <published>2018-08-15T10:56:06.000Z</published>
    <updated>2020-01-02T00:46:46.993Z</updated>
    
    <content type="html"><![CDATA[<p>外面的 html 文件 index.html：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;fullScreen&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            margin: 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;iframe allowfullscreen src=&quot;iframe.html&quot; frameborder=&quot;0&quot; style=&quot;width: 500px;height: 500px;background:#aaa&quot;&gt;&lt;/iframe&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>里面嵌套的 iframe.html 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;iframe&lt;/h1&gt;</span><br><span class="line">    &lt;button id=&quot;button&quot;&gt;全屏&lt;/button&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 判断是否允许全屏</span><br><span class="line">        var fullscreenEnabled =</span><br><span class="line">            document.fullscreenEnabled ||</span><br><span class="line">            document.mozFullScreenEnabled ||</span><br><span class="line">            document.webkitFullscreenEnabled ||</span><br><span class="line">            document.msFullscreenEnabled;</span><br><span class="line">        // 全屏</span><br><span class="line">        function launchFullscreen(element) &#123;</span><br><span class="line">            if (element.requestFullscreen) &#123;</span><br><span class="line">                element.requestFullscreen();</span><br><span class="line">            &#125; else if (element.mozRequestFullScreen) &#123;</span><br><span class="line">                element.mozRequestFullScreen();</span><br><span class="line">            &#125; else if (element.msRequestFullscreen) &#123;</span><br><span class="line">                element.msRequestFullscreen();</span><br><span class="line">            &#125; else if (element.webkitRequestFullscreen) &#123;</span><br><span class="line">                element.webkitRequestFullScreen();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 退出全屏</span><br><span class="line">        function exitFullscreen() &#123;</span><br><span class="line">            if (document.exitFullscreen) &#123;</span><br><span class="line">                document.exitFullscreen();</span><br><span class="line">            &#125; else if (document.msExitFullscreen) &#123;</span><br><span class="line">                document.msExitFullscreen();</span><br><span class="line">            &#125; else if (document.mozCancelFullScreen) &#123;</span><br><span class="line">                document.mozCancelFullScreen();</span><br><span class="line">            &#125; else if (document.webkitExitFullscreen) &#123;</span><br><span class="line">                document.webkitExitFullscreen();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        var btn = document.querySelector(&apos;#button&apos;);</span><br><span class="line">        if (fullscreenEnabled) &#123;</span><br><span class="line">            btn.addEventListener(&apos;click&apos;, function () &#123;</span><br><span class="line">                var fullscreenElement =</span><br><span class="line">                    document.fullscreenElement ||</span><br><span class="line">                    document.mozFullScreenElement ||</span><br><span class="line">                    document.webkitFullscreenElement;</span><br><span class="line">                if (fullscreenElement) &#123;</span><br><span class="line">                    exitFullscreen();</span><br><span class="line">                    btn.innerHTML = &apos;全屏&apos;;</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    launchFullscreen(document.documentElement);</span><br><span class="line">                    btn.innerHTML = &apos;退出全屏&apos;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, false);</span><br><span class="line">        &#125;</span><br><span class="line">        // 监听全屏事件</span><br><span class="line">        document.addEventListener(&apos;webkitfullscreenchange&apos;, function fullscreenChange() &#123;</span><br><span class="line">            if (document.fullscreenEnabled ||</span><br><span class="line">                document.webkitIsFullScreen ||</span><br><span class="line">                document.mozFullScreen ||</span><br><span class="line">                document.msFullscreenElement) &#123;</span><br><span class="line">                console.log(&apos;enter fullscreen&apos;);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                console.log(&apos;exit fullscreen&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, false);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;外面的 html 文件 index.html：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>javaweb常见HTTP状态码</title>
    <link href="https://www.liangxinwei.cn/2017/12/23/javaweb%E5%B8%B8%E8%A7%81HTTP%E7%8A%B6%E6%80%81%E7%A0%81/"/>
    <id>https://www.liangxinwei.cn/2017/12/23/javaweb常见HTTP状态码/</id>
    <published>2017-12-23T10:53:27.000Z</published>
    <updated>2020-01-02T00:46:46.986Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>404 -Not Found 代表客户端错误，指的是服务器端无法找到所请求的资源</li><li>400 -请求无效，服务器不理解请求的语法</li><li>403 - 禁止访问 ，服务器拒绝请求</li><li>405 - 资源被禁止，禁用请求中指定的方法</li><li>406 - 无法接受 ，无法使用请求的内容特性响应请求的网页</li><li>407 - 要求代理身份验证 ，此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理</li><li>408 - 请求超时，服务器等候请求时发生超时</li><li>409 - 冲突，服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息</li><li>410 - 已删除，如果请求的资源已永久删除，服务器就会返回此响应。</li><li>411 - 需要有效长度， 服务器不接受不含有效内容长度标头字段的请求。</li><li>412 - 未满足前提条件， 服务器未满足请求者在请求中设置的其中一个前提条件。</li><li>413 - 请求实体过大，服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</li><li>414 - 请求的 URI 过长， 请求的 URI（通常为网址）过长，服务器无法处理。</li><li>415 - 不支持的媒体类型， 请求的格式不受请求页面的支持。</li><li>416 - 请求范围不符合要求，如果页面无法提供请求的范围，则服务器会返回此状态代码。</li><li>417 - 未满足期望值，服务器未满足”期望”请求标头字段的要求</li><li>500 - 内部服务器错误，无法完成请求</li><li>501 - 未实现 ，服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码</li><li>502 - 网关错误 ，服务器作为网关或代理，从上游服务器收到无效响应</li><li>503 - 服务不可用，服务器目前无法使用，通常，这只是暂时状态</li><li>504 - 网关超时， 服务器作为网关或代理，但是没有及时从上游服务器收到请求</li><li>505 - HTTP 版本不受支持， 服务器不支持请求中所用的 HTTP 协议版本</li></ol><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li>2xx - 客户端请求已成功。 <ol><li>200 - 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页</li><li>201 - 已创建，请求成功并且服务器创建了新的资源</li><li>202 - 已接受，但尚未处理</li><li>203 - 非权威性信息，服务器已成功处理了请求，但返回的信息可能来自另一来源</li><li>204 - 无内容，服务器成功处理了请求，但没有返回任何内容</li><li>205 - 重置内容，服务器成功处理了请求，但没有返回任何内容</li><li>206 - 部分内容，服务器成功处理了部分 GET 请求</li></ol></li><li>3xx - 重定向 <ol><li>302 - 对象已移动</li><li>304 - 未修改</li><li>307 - 临时重定向</li></ol></li></ol><p><strong>附上全部状态码：</strong><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status" target="_blank" rel="noopener">HTTP response codes</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;404 -Not Found 代表客户端错误，指的是服务器端无法找到所请求的资源&lt;/li&gt;
&lt;li&gt;400 -请求无效，
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>javascript循环与闭包</title>
    <link href="https://www.liangxinwei.cn/2017/11/08/javascript%E5%BE%AA%E7%8E%AF%E4%B8%8E%E9%97%AD%E5%8C%85/"/>
    <id>https://www.liangxinwei.cn/2017/11/08/javascript循环与闭包/</id>
    <published>2017-11-08T10:54:53.000Z</published>
    <updated>2020-01-02T00:46:46.985Z</updated>
    
    <content type="html"><![CDATA[<p>当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。</p><p>下面我们来看一段代码，清晰地展示了闭包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    var a = 2;</span><br><span class="line">    function bar() &#123;</span><br><span class="line">        console.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    return bar;</span><br><span class="line">&#125;</span><br><span class="line">var baz = foo();</span><br><span class="line">baz(); // 2 —— 这就是闭包的效果。</span><br></pre></td></tr></table></figure><p>函数 bar() 的词法作用域能够访问 foo() 的内部作用域。然后我们将 bar() 函数本身当作一个值类型进行传递。在这个例子中，我们将 bar 所引用的函数对象本身当作返回值。在 foo() 执行后，其返回值（也就是内部的 bar() 函数）赋值给变量 baz 并调用 baz() ，实际上只是通过不同的标识符引用调用了内部的函数 bar() 。bar() 显然可以被正常执行。但是在这个例子中，它<strong>在自己定义的词法作用域以外的地方执行</strong>。在 foo() 执行后，通常会期待 foo() 的整个内部作用域都被销毁，因为我们知道引擎有垃圾回收器用来释放不再使用的内存空间。由于看上去 foo() 的内容不会再被使用，所以很自然地会考虑对其进行回收。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 bar() 本身在使用。拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><p>这个函数在定义时的词法作用域以外的地方被调用。闭包使得函数可以继续访问定义时的词法作用域。</p><p>要说明闭包， for 循环是最常见的例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, i * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常情况下，我们对这段代码行为的预期是分别输出数字 1~5，每秒一次，每次一个。但实际上，这段代码在运行时会以每秒一次的频率输出五次 6。</p><p>仔细想一下，延迟函数的回调会在循环结束时才执行。事实上，当定时器运行时即使每个迭代中执行的是 setTimeout(.., 0) ，所有的回调函数依然是在循环结束后才会被执行，因此会每次输出一个 6 出来。</p><p><strong>缺陷是我们试图假设循环中的每个迭代在运行时都会给自己“捕获”一个 i 的副本。但是根据作用域的工作原理，实际情况是尽管循环中的五个函数是在各个迭代中分别定义的，但是它们都被封闭在一个共享的全局作用域中，因此实际上只有一个 i 。</strong></p><p>我们来试一下通过声明并立即执行一个函数来创建作用域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(i);</span><br><span class="line">        &#125;, i * 1000);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样不行。但是为什么呢？我们现在显然拥有更多的词法作用域了。的确每个延迟函数都会将 IIFE（立即执行函数表达式） 在每次迭代中创建的作用域封闭起来。如果作用域是空的，那么仅仅将它们进行封闭是不够的。仔细看一下，我们的 IIFE 只是一个什么都没有的空作用域。它需要包含一点实质内容才能为我们所用。它需要有自己的变量，用来在每个迭代中储存 i 的值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function () &#123;</span><br><span class="line">        var j = i;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(j);</span><br><span class="line">        &#125;, j * 1000);</span><br><span class="line">    &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>行了！它能正常工作了！。</p><p>可以对这段代码进行一些改进：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    (function (j) &#123;</span><br><span class="line">        setTimeout(function timer() &#123;</span><br><span class="line">            console.log(j);</span><br><span class="line">        &#125;, j * 1000);</span><br><span class="line">    &#125;)(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在迭代内使用 IIFE 会为每个迭代都生成一个新的作用域，使得延迟函数的回调可以将新的作用域封闭在每个迭代内部，每个迭代中都会含有一个具有正确值的变量供我们访问。</p><p>仔细思考我们对前面的解决方案的分析。我们使用 IIFE 在每次迭代时都创建一个新的作用域。换句话说，每次迭代我们都需要一个块作用域。 let 声明，可以用来劫持块作用域，并且在这个块作用域中声明一个变量。本质上这是将一个块转换成一个可以被关闭的作用域。因此，下面的代码可以正常运行了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for (var i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    let j = i; // 是的，闭包的块作用域！</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(j);</span><br><span class="line">    &#125;, j * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是，这还不是全部！for 循环头部的 let 声明还会有一个特殊的行为。这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (let i = 1; i &lt;= 5; i++) &#123;</span><br><span class="line">    setTimeout(function timer() &#123;</span><br><span class="line">        console.log(i);</span><br><span class="line">    &#125;, i * 1000);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，问题解决了！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用域之外执行。&lt;/p&gt;
&lt;p&gt;下面我们来看一段代码，清晰地展示了闭包：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>记一次管理系统和路由系统的整合</title>
    <link href="https://www.liangxinwei.cn/2017/09/28/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F%E5%92%8C%E8%B7%AF%E7%94%B1%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%95%B4%E5%90%88/"/>
    <id>https://www.liangxinwei.cn/2017/09/28/记一次管理系统和路由系统的整合/</id>
    <published>2017-09-28T10:58:27.000Z</published>
    <updated>2020-01-02T00:46:46.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求：整合管理系统和路由系统"><a href="#需求：整合管理系统和路由系统" class="headerlink" title="需求：整合管理系统和路由系统"></a>需求：整合管理系统和路由系统</h2><h2 id="UI："><a href="#UI：" class="headerlink" title="UI："></a>UI：</h2><p>同 <a href="https://preview.pro.ant.design/" target="_blank" rel="noopener">Ant Design Pro</a> </p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于左侧管理菜单内容在运行时才能确定，而且点击菜单要和右侧内容区联动，地址栏也要有相应的改变，而目前已有的路由系统都是要运行之前要确定具体的路由组建，因此采用 h5 的 history 和 传统的 document.location 结合的方式实现路由系统；整个项目的数据管理则因为考虑到左侧菜单对应的组件可能会使用包括 redux/mbox/dva/kao 之类的框架，如果也使用框架的话，可能会引起冲突，故通过 react 的 context 来实现。</p><h2 id="路由系统-router-js"><a href="#路由系统-router-js" class="headerlink" title="路由系统 router.js"></a>路由系统 router.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> instance = <span class="literal">undefined</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Router</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            <span class="keyword">this</span>.history = <span class="built_in">window</span>.history;</span><br><span class="line">            <span class="keyword">this</span>.location = <span class="built_in">window</span>.location;</span><br><span class="line">            instance = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goBack = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.back();</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    goForward = <span class="function">(<span class="params">cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.forward();</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    go = <span class="function">(<span class="params">num, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.history.go(num);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pushState = <span class="function">(<span class="params">url, state, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        url = url || <span class="string">''</span>;</span><br><span class="line">        <span class="comment">// 加 #，以 hash 的方式改变 url；如果不加，直接以 '/abc' 更改，刷新会报错，请求不到资源（js,css,···）</span></span><br><span class="line">        url = url[<span class="number">0</span>] === <span class="string">'/'</span> ? <span class="string">`#<span class="subst">$&#123;url&#125;</span>`</span> : <span class="string">`/#<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">this</span>.history.pushState(state || <span class="literal">null</span>, <span class="string">''</span>, url);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    replaceState = <span class="function">(<span class="params">url, state, cb</span>) =&gt;</span> &#123;</span><br><span class="line">        url = url || <span class="string">'/'</span>;</span><br><span class="line">        url = url[<span class="number">0</span>] === <span class="string">'/'</span> ? <span class="string">`#<span class="subst">$&#123;url&#125;</span>`</span> : <span class="string">`/#<span class="subst">$&#123;url&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">this</span>.history.replaceState(state || <span class="literal">null</span>, <span class="string">''</span>, url);</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentState = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.history.state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    currentUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> url = <span class="keyword">this</span>.location.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span> (url[<span class="number">0</span>] === <span class="string">'/'</span>) &#123;</span><br><span class="line">            url = url.replace(<span class="string">'/'</span>, <span class="string">''</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rootUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    originUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fullUrl = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.location.href;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    historyLength = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.history.length;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拦截器 拦截读写权限</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">    <span class="keyword">set</span>(target, key, value) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Setting the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    deleteProperty(target, key) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Deleting the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    defineProperty (target, key, descriptor) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`Defining the <span class="subst">$&#123;key&#125;</span> prototype is forbidden`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    setPrototypeOf (target, proto) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Changing the prototype is forbidden'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routerInstance = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="keyword">new</span> Router(), handler);</span><br></pre></td></tr></table></figure><h2 id="路由装饰函数-withRouter-js"><a href="#路由装饰函数-withRouter-js" class="headerlink" title="路由装饰函数 withRouter.js"></a>路由装饰函数 withRouter.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> withRouter = <span class="function">(<span class="params">config = &#123;&#125;</span>) =&gt;</span> <span class="function">(<span class="params">WrapComponent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="class"><span class="keyword">class</span> <span class="title">Component</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">            <span class="keyword">super</span>(props);</span><br><span class="line">            <span class="keyword">this</span>.state = &#123;</span><br><span class="line">                data: &#123;&#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            config.listenPopState === <span class="literal">true</span> &amp;&amp; <span class="built_in">window</span>.addEventListener(<span class="string">'popstate'</span>, <span class="keyword">this</span>.handlePopState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        handlePopState = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;<span class="attr">data</span>: data&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        componentWillUnmount() &#123;</span><br><span class="line">            config.listenPopState === <span class="literal">true</span> &amp;&amp; <span class="built_in">window</span>.removeEventListener(<span class="string">'popstate'</span>, <span class="keyword">this</span>.handlePopState);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            <span class="keyword">const</span> router = &#123;</span><br><span class="line">                go: routerInstance.go,</span><br><span class="line">                goBack: routerInstance.goBack,</span><br><span class="line">                fullUrl: routerInstance.fullUrl,</span><br><span class="line">                rootUrl: routerInstance.rootUrl,</span><br><span class="line">                originUrl: routerInstance.originUrl,</span><br><span class="line">                goForward: routerInstance.goForward,</span><br><span class="line">                pushState: routerInstance.pushState,</span><br><span class="line">                currentUrl: routerInstance.currentUrl,</span><br><span class="line">                replaceState: routerInstance.replaceState,</span><br><span class="line">                currentState: routerInstance.currentState,</span><br><span class="line">                historyLength: routerInstance.historyLength</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">return</span> React.createElement(WrapComponent, &#123;</span><br><span class="line">                routerData: <span class="keyword">this</span>.state.data,</span><br><span class="line">                router: <span class="keyword">new</span> <span class="built_in">Proxy</span>(router, handler),<span class="comment">// handler 上面定义的拦截器</span></span><br><span class="line">                ...this.props</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="入口组建-App-js"><a href="#入口组建-App-js" class="headerlink" title="入口组建 App.js"></a>入口组建 App.js</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Layout&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> GYSider <span class="keyword">from</span> <span class="string">'./GYSider'</span>;</span><br><span class="line"><span class="keyword">import</span> GYHeader <span class="keyword">from</span> <span class="string">'./GYHeader'</span>;</span><br><span class="line"><span class="keyword">import</span> GYContent <span class="keyword">from</span> <span class="string">'./GYContent'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_1 <span class="keyword">from</span> <span class="string">'../app/Test_1'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_2 <span class="keyword">from</span> <span class="string">'../app/Test_2'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_3 <span class="keyword">from</span> <span class="string">'../app/Test_3'</span>;</span><br><span class="line"><span class="keyword">import</span> Test_1_1_1 <span class="keyword">from</span> <span class="string">'../app/Test_1_1_1'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'../util/router'</span>;</span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'../util/Util'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;Header, Sider, Content&#125; = Layout;</span><br><span class="line"></span><br><span class="line">@withRouter()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">const</span> propsState = props.initialState || &#123;&#125;;</span><br><span class="line">        <span class="keyword">const</span> initialState = &#123;</span><br><span class="line">            menuList: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_1'</span>,</span><br><span class="line">                    icon: <span class="string">'user'</span>,</span><br><span class="line">                    text: <span class="string">'test_1'</span>,</span><br><span class="line">                    component: Test_1,</span><br><span class="line">                    children: [</span><br><span class="line">                        &#123;</span><br><span class="line">                            path: <span class="string">'test_1/test_1_1'</span>,</span><br><span class="line">                            text: <span class="string">'test_1_1'</span>,</span><br><span class="line">                            children: [</span><br><span class="line">                                &#123;</span><br><span class="line">                                    path: <span class="string">'test_1/test_1_1/test_1_1_1'</span>,</span><br><span class="line">                                    component: Test_1_1_1,</span><br><span class="line">                                    text: <span class="string">'test_1_1_1'</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    ]</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_2'</span>,</span><br><span class="line">                    icon: <span class="string">'setting'</span>,</span><br><span class="line">                    text: <span class="string">'test_2'</span>,</span><br><span class="line">                    component: Test_2</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'test_3'</span>,</span><br><span class="line">                    icon: <span class="string">'logout'</span>,</span><br><span class="line">                    text: <span class="string">'test_3'</span>,</span><br><span class="line">                    component: Test_3</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            store: &#123;</span><br><span class="line">                menuList: initialState.menuList.concat(propsState.menuList || [])</span><br><span class="line">            &#125;,</span><br><span class="line">            collapsed: <span class="literal">false</span>,</span><br><span class="line">            currentPath: <span class="string">''</span>,</span><br><span class="line">            currentComponent: GYContent</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">this</span>.getAllComponent(<span class="keyword">this</span>.state.store.menuList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存所有的路由对应的组件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getAllComponent = <span class="function">(<span class="params">menuList = []</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.allComponent = <span class="keyword">this</span>.allComponent || <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">        menuList.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (val.path &amp;&amp; Util.isReactComponent(val.component)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.allComponent.set(val.path, val.component);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (Util.isArray(val.children)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.getAllComponent(val.children);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object,</span><br><span class="line">        onClickAction: PropTypes.func</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object.isRequired,</span><br><span class="line">        onClickAction: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 子组件获取 store</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            store: <span class="keyword">this</span>.state.store,</span><br><span class="line">            onClickAction: <span class="keyword">this</span>.handleClickAction</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 store 时需要返回合并之后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    handleClickAction = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(<span class="built_in">Object</span>.assign(<span class="keyword">this</span>.state, data));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        <span class="comment">// 刷新浏览器，跳转到相应页面</span></span><br><span class="line">        <span class="keyword">const</span> currentPath = <span class="keyword">this</span>.state.currentPath;</span><br><span class="line">        <span class="keyword">const</span> documentHref = <span class="keyword">this</span>.props.router.currentUrl();</span><br><span class="line">        <span class="keyword">if</span> (currentPath !== documentHref &amp;&amp; <span class="keyword">this</span>.allComponent.has(documentHref)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                currentComponent: <span class="keyword">this</span>.allComponent.get(documentHref)</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onToggle = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            collapsed: !<span class="keyword">this</span>.state.collapsed</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onCollapse = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'onCollapse'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> Component = <span class="keyword">this</span>.state.currentComponent;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Layout className=<span class="string">'gy-app-view'</span>&gt;</span><br><span class="line">                &lt;Sider</span><br><span class="line">                    collapsible</span><br><span class="line">                    breakpoint=<span class="string">"md"</span></span><br><span class="line">                    width=&#123;<span class="number">256</span>&#125;</span><br><span class="line">                    collapsed=&#123;<span class="keyword">this</span>.state.collapsed&#125;</span><br><span class="line">                    trigger=&#123;<span class="literal">null</span>&#125;</span><br><span class="line">                    onCollapse=&#123;<span class="keyword">this</span>.onCollapse&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &lt;GYSider/&gt;</span><br><span class="line">                &lt;<span class="regexp">/Sider&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Layout&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Header className='header'&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;GYHeader collapsed=&#123;this.state.collapsed&#125; onToggle=&#123;this.onToggle&#125;/</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Header&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;Content className='gy-content'&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;Component/</span>&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Content&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Layout&gt;</span><br><span class="line">            &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure><h2 id="侧边栏组件"><a href="#侧边栏组件" class="headerlink" title="侧边栏组件"></a>侧边栏组件</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Menu, Icon&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">const</span> SubMenu = Menu.SubMenu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Util <span class="keyword">from</span> <span class="string">'../util/Util'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;withRouter&#125; <span class="keyword">from</span> <span class="string">'../util/router'</span>;</span><br><span class="line"><span class="keyword">import</span> connectStore <span class="keyword">from</span> <span class="string">'../util/connectStore'</span>;</span><br><span class="line"></span><br><span class="line">@withRouter()   <span class="comment">// 接入路由</span></span><br><span class="line">@connectStore   <span class="comment">// 接入 store</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GYSider</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillReceiveProps(nextProps, nextContext) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'点击 subMenu 更新 store'</span>, nextContext.store);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onMenuClick = <span class="function">(<span class="params">&#123;item, key, keyPath&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">const</span> path = item.props.path;</span><br><span class="line">        <span class="keyword">const</span> currentUrl = <span class="keyword">this</span>.props.router.currentUrl() || <span class="string">''</span>;</span><br><span class="line">        path &amp;&amp; path !== currentUrl &amp;&amp; item.props.component</span><br><span class="line">        &amp;&amp; self.props.router.pushState(<span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>, &#123;<span class="attr">path</span>: <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>&#125;, () =&gt; &#123;</span><br><span class="line">            self.context.onClickAction(&#123;</span><br><span class="line">                currentPath: path,</span><br><span class="line">                currentComponent: item.props.component</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新 store 示例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onSubMenuClick = <span class="function">(<span class="params">&#123;key, domEvent&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> store = <span class="keyword">this</span>.context.store;</span><br><span class="line">        <span class="keyword">this</span>.context.onClickAction(&#123;<span class="attr">store</span>: <span class="built_in">Object</span>.assign(store, &#123;[key]: key&#125;)&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    createMenu = <span class="function">(<span class="params">arr = []</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> arr.map &amp;&amp; arr.map(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!val.text) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> key = val.path || Util.generateKey();</span><br><span class="line">                    <span class="keyword">return</span> Util.isArray(val.children) ?</span><br><span class="line">                        &lt;SubMenu</span><br><span class="line">                            key=&#123;key&#125;</span><br><span class="line">                            onTitleClick=&#123;<span class="keyword">this</span>.onSubMenuClick&#125;</span><br><span class="line">                            title=&#123;&lt;span&gt;&#123;val.icon &amp;&amp; <span class="xml"><span class="tag">&lt;<span class="name">Icon</span> <span class="attr">type</span>=<span class="string">&#123;</span>`$&#123;<span class="attr">val.icon</span>&#125;`&#125;/&gt;</span>&#125;</span></span><br><span class="line">                                &lt;span&gt;</span><br><span class="line">                                    &#123;val.text&#125;</span><br><span class="line"><span class="xml">                                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;&gt;</span><br><span class="line">                            &#123;<span class="keyword">this</span>.createMenu(val.children)&#125;</span><br><span class="line">                        &lt;<span class="regexp">/SubMenu&gt;</span></span><br><span class="line"><span class="regexp">                        :</span></span><br><span class="line"><span class="regexp">                        &lt;Menu.Item path=&#123;val.path&#125; key=&#123;key&#125; component=&#123;val.component&#125;&gt;</span></span><br><span class="line"><span class="regexp">                            &#123;val.icon &amp;&amp; &lt;Icon type=&#123;`$&#123;val.icon&#125;`&#125;/</span>&gt;&#125;</span><br><span class="line">                            &lt;span&gt;</span><br><span class="line">                                &#123;val.text&#125;</span><br><span class="line">                            &lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                        &lt;/</span>Menu.Item&gt;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).filter(<span class="function"><span class="params">val</span> =&gt;</span> val !== <span class="literal">undefined</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;div className=<span class="string">'logo'</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">                &lt;Menu</span><br><span class="line">                    theme=<span class="string">"dark"</span></span><br><span class="line">                    mode=<span class="string">"inline"</span></span><br><span class="line">                    onClick=&#123;<span class="keyword">this</span>.onMenuClick&#125;</span><br><span class="line">                    style=&#123;&#123;<span class="attr">margin</span>: <span class="string">'16px 0'</span>, <span class="attr">width</span>: <span class="string">'100%'</span>&#125;&#125;</span><br><span class="line">                &gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.createMenu(<span class="keyword">this</span>.context.store.menuList)&#125;</span><br><span class="line">                &lt;<span class="regexp">/Menu&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> GYSider;</span><br></pre></td></tr></table></figure><h2 id="接入-store-装饰函数-connectStore-js"><a href="#接入-store-装饰函数-connectStore-js" class="headerlink" title="接入 store 装饰函数 connectStore.js"></a>接入 store 装饰函数 connectStore.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">connectStore</span>(<span class="params">Component</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!Component || <span class="keyword">typeof</span> Component !== <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(<span class="string">`<span class="subst">$&#123;Component &amp;&amp; Component.name&#125;</span> is not a class`</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Component.contextTypes = &#123;</span><br><span class="line">        store: PropTypes.object,</span><br><span class="line">        onClickAction: PropTypes.func</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> 上面的入口组建 App</span><br><span class="line"><span class="keyword">import</span> UMD <span class="keyword">from</span> <span class="string">'./UMD'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WrapView</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">let</span> initialState = &#123;</span><br><span class="line">            menuList: [</span><br><span class="line">                &#123;</span><br><span class="line">                    path: <span class="string">'umd'</span>,        <span class="comment">//对应的地址栏 url</span></span><br><span class="line">                    icon: <span class="string">'setting'</span>,    <span class="comment">//侧边栏的显示图标</span></span><br><span class="line">                    text: <span class="string">'umd'</span>,        <span class="comment">//侧边栏的显示文字</span></span><br><span class="line">                    component: UMD      <span class="comment">//点击时对应的右侧内容区组件</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;App initialState=&#123;initialState&#125;/&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> WrapView;</span><br><span class="line"></span><br><span class="line">···</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;render&#125; <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> WrapView <span class="keyword">from</span> <span class="string">'./app/components/WrapView'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Main App View</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">render(<span class="xml"><span class="tag">&lt;<span class="name">WrapView</span> /&gt;</span>, document.getElementById('app'));</span></span><br></pre></td></tr></table></figure><p><strong>核心思路</strong>是通过 context 达到类似于 redux 管理数据的目的，App.js 提供 store（存储数据） 和 onClickAction（修改 store）给子组件，子组件通过 connectStore 装饰函数获取到 store 和 onClickAction，点击侧边栏的时候，先取到设置的 path 和 component，然后通过 onCLickAction 设置 currentComponent 和 currentPath，然后 setState 即可实现需求。<br>目前还有一个问题，就是刷新浏览器的时候如何跳转到相应的页面呢？<br>可以在 App.js 里面先获取到所有的 component 和 path 然后保存起来：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 保存所有的路由对应的组件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">getAllComponent = <span class="function">(<span class="params">menuList = []</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.allComponent = <span class="keyword">this</span>.allComponent || <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    menuList.forEach(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (val.path &amp;&amp; Util.isReactComponent(val.component)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.allComponent.set(val.path, val.component);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (Util.isArray(val.children)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.getAllComponent(val.children);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再在 App.js 通过以下代码跳转：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">componentWillMount() &#123;</span><br><span class="line">    <span class="comment">// 刷新浏览器，跳转到相应页面</span></span><br><span class="line">    <span class="keyword">const</span> currentPath = <span class="keyword">this</span>.state.currentPath;</span><br><span class="line">    <span class="keyword">const</span> documentHref = <span class="keyword">this</span>.props.router.currentUrl();</span><br><span class="line">    <span class="keyword">if</span> (currentPath !== documentHref &amp;&amp; <span class="keyword">this</span>.allComponent.has(documentHref)) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            currentComponent: <span class="keyword">this</span>.allComponent.get(documentHref)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求：整合管理系统和路由系统&quot;&gt;&lt;a href=&quot;#需求：整合管理系统和路由系统&quot; class=&quot;headerlink&quot; title=&quot;需求：整合管理系统和路由系统&quot;&gt;&lt;/a&gt;需求：整合管理系统和路由系统&lt;/h2&gt;&lt;h2 id=&quot;UI：&quot;&gt;&lt;a href=&quot;#UI
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>fatal: Could not read from remote repository.的解决办法</title>
    <link href="https://www.liangxinwei.cn/2017/07/28/fatal-Could-not-read-from-remote-repository-%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://www.liangxinwei.cn/2017/07/28/fatal-Could-not-read-from-remote-repository-的解决办法/</id>
    <published>2017-07-28T11:01:01.000Z</published>
    <updated>2020-01-02T00:46:46.984Z</updated>
    
    <content type="html"><![CDATA[<p>查看远端地址 <code>git remote –v</code><br>查看配置 <code>git config --list</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add .  // 暂存所有的更改</span><br><span class="line">git checkout . // 丢弃所有的更改</span><br><span class="line">git status // 查看文件状态</span><br><span class="line">git commit -m &quot;本次要提交的概要信息&quot; // 提交</span><br></pre></td></tr></table></figure><p>设置远端仓库地址 <code>git remote set-url origin 你的远端地址</code></p><p>git remote add origin_new 新的地址</p><p>git remote –v查看</p><p>git push origin_new master重新推送</p><p>下面是设置用户名</p><p>Git config –global user.name “用户名”</p><p>git config –global user.email 邮箱地址</p><p>设置代理： <code>git config --global https.proxy http://127.0.0.1:1080</code></p><p>取消设置代理：<code>git config --global --unset https.proxy</code></p><p>取消git init操作时出现    <strong>rm: cannot remove ‘.git’: Is a directory</strong><br>是因为输入的命令是：    <strong>rm -f .git</strong><br>解决办法：<strong>rm -rf .git</strong> 即删除整个.git目录</p><p>failed to push some refs to ‘git@github.com:***.git’ hint: Updates were rejected ···<br>使用git push origin master的时候出现一下错误：</p><p>解决办法：<br>git push -f origin master或者git pull下</p><p>恢复不小心删除的 <strong>git stash</strong> 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fsck  //找到dangling的对象</span><br><span class="line">git show id  //上面列出的每一条记录的最后一个字符串，按 enter 查看具体信息</span><br><span class="line">git stash apply id</span><br></pre></td></tr></table></figure><p><strong>git 回滚提交</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//reset将一个分支的末端指向另一个提交。这可以用来移除当前分支的一些提交, 让master分支向后回退了两个提交</span><br><span class="line">git checkout master</span><br><span class="line">git reset HEAD~2</span><br><span class="line"></span><br><span class="line">//Revert撤销一个提交的同时会创建一个新的提交, 找出倒数第二个提交，然后创建一个新的提交来撤销这些更改，然后把这个提交加入项目中。</span><br><span class="line">git revert HEAD~2</span><br></pre></td></tr></table></figure><p>错误：<strong>Please enter a commit message to explain why this merge is necessary.</strong> 解决办法：</p><ol><li>（可选）按键盘字母 i 进入insert模式</li><li>（可选）修改最上面那行黄色合并信息</li><li>按键盘左上角”Esc” （退出insert模式）</li><li>输入”:wq”,按回车键即可（提交）</li></ol><p><strong>gitignore notworking</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;fixed untracked files&quot;</span><br></pre></td></tr></table></figure><p><strong>git Failed to connect to <a href="http://www.google.com" target="_blank" rel="noopener">www.google.com</a> port 80: Timed out</strong> 可能是因为设置了代理：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy//查看代理</span><br><span class="line">git config --global --unset http.proxy//取消代理</span><br></pre></td></tr></table></figure><p><strong>HTTP Basic access denied on Git</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset credential.helper</span><br><span class="line">git clone &apos;···&apos;</span><br><span class="line">login username，password</span><br></pre></td></tr></table></figure><p><strong>rebase 和 merge 区别</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull --rebase origin master</span><br></pre></td></tr></table></figure><p> rebase 选项告诉 Git 把你的提交移到同步了中央仓库修改后的 master 分支的顶部。rebase 操作过程是把本地提交一次一个地迁移到更新了的中央仓库master分支之上。这意味着可能要解决在迁移某个提交时出现的合并冲突，而不是解决包含了所有提交的大型合并时所出现的冲突。这样的方式让你尽可能保持每个提交的聚焦和项目历史的整洁。反过来，简化了哪里引入Bug的分析，如果有必要，回滚修改也可以做到对项目影响最小。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><p>如果没有 rebase， pull 操作仍然可以完成，但每次 pull 操作要同步中央仓库中别人修改时，提交历史会以一个多余的『合并提交』结尾。<br>合并玩冲突之后，<code>git rebase --continue</code>，Git 会继续一个一个地合并后面的提交，如其它的提交有冲突就重复这个过程。<br>如果你碰到了冲突，但发现搞不定，不要惊慌。只要执行下面这条命令，就可以回到你执行git pull –rebase命令前的样子：<code>git rebase --abort</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查看远端地址 &lt;code&gt;git remote –v&lt;/code&gt;&lt;br&gt;查看配置 &lt;code&gt;git config --list&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
      <category term="git" scheme="https://www.liangxinwei.cn/categories/git/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建一个包含 redux、router、国际化的前端项目框架</title>
    <link href="https://www.liangxinwei.cn/2017/06/08/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8C%85%E5%90%AB-redux%E3%80%81router%E3%80%81%E5%9B%BD%E9%99%85%E5%8C%96%E7%9A%84%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
    <id>https://www.liangxinwei.cn/2017/06/08/搭建一个包含-redux、router、国际化的前端项目框架/</id>
    <published>2017-06-08T10:57:41.000Z</published>
    <updated>2020-01-02T00:46:46.992Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>搭建一个交互比较多的 <strong>react 前端项目框架</strong>，数据可预测，可路由跳转，可国际化，数据操作可控制</p><h2 id="使用的主要类库"><a href="#使用的主要类库" class="headerlink" title="使用的主要类库"></a>使用的主要类库</h2><ul><li>i18next 国际化</li><li>react-i18next</li><li>i18next-browser-languagedetector</li><li>immutability-helper</li><li>immutable 处理数据</li><li>react</li><li>react-dom</li><li>react-redux 管理数据</li><li>react-router 路由</li><li>react-router-redux 路由接入 store</li><li>redux<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2></li></ul><ul><li>因为 router 是异步过程，所以注入到 store 中，通过 action 跳转路由</li><li>在 react-redux 原生 action、reducer 之上封装了一层，便于分发、匹配 action、reducer</li><li>执行顺序： action -&gt; 前置拦截器（return true）-&gt; reducer（修改 store）-&gt; componentWillReceiveProps -&gt; shouldComponentUpdate（return true）-&gt; render -&gt; 后置拦截器</li></ul><p><strong>项目地址</strong>：<a href="https://github.com/liangxinwei/redux-ele" target="_blank" rel="noopener">https://github.com/liangxinwei/redux-ele</a></p><h2 id="项目布局"><a href="#项目布局" class="headerlink" title="项目布局"></a>项目布局</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">├── cfg                                 webpack 配置文件</span><br><span class="line">│   ├── base.js                        webpack 配置</span><br><span class="line">│   ├── default.js                     loader，plugin</span><br><span class="line">│   ├── dev.js                         dev 环境 </span><br><span class="line">│   └── dist.js                        dist 环境</span><br><span class="line">├── src                                 源码目录</span><br><span class="line">│   ├── app</span><br><span class="line">│   │   ├── component                  具体业务组件，配合 routes 目录使用</span><br><span class="line">│   │   ├── config                     store 配置</span><br><span class="line">│   │   │   ├── AppActionRouter.js    分发相应 type 的 action</span><br><span class="line">│   │   │   ├── AppReducerCreator.js  匹配相应 type 的 action 的 reducer</span><br><span class="line">│   │   │   ├── ConfigureStore.js       生成 store</span><br><span class="line">│   │   │   └── index.js                统一导出</span><br><span class="line">│   │   ├── i18n                        国际化配置</span><br><span class="line">│   │   │   ├── locales                中英文配置文件</span><br><span class="line">│   │   │   │   ├── en                 英文配置</span><br><span class="line">│   │   │   │   └── zh                 中文配置</span><br><span class="line">│   │   │   ├── i18n.js                 i18next 配置</span><br><span class="line">│   │   │   └── index.js                统一导出</span><br><span class="line">│   │   ├── middleware                   中间件</span><br><span class="line">│   │   │   ├── AppMiddleWare.js        前置、后置拦截器业务代码</span><br><span class="line">│   │   │   ├── ComponentMiddleWare.js  操作拦截器中间件</span><br><span class="line">│   │   │   ├── index.js                中间件统一导出</span><br><span class="line">│   │   │   └── LoggerMiddleWare.js     日志中间件</span><br><span class="line">│   │   ├── routes                       路由配置</span><br><span class="line">│   │   │   └── index.jsx</span><br><span class="line">│   │   └── App.jsx                      app 入口</span><br><span class="line">│   ├── index.ejs                         ejs 模板文件</span><br><span class="line">│   └── index.jsx                         挂载 react dom</span><br><span class="line">├── test</span><br><span class="line">├── .babelrc                            babel 配置文件</span><br><span class="line">├── .editorconfig                       跨平台编辑器配置文件</span><br><span class="line">├── .eslintignore                       eslintignore 配置文件</span><br><span class="line">├── .eslintrc                           eslint 配置文件</span><br><span class="line">├── .gitignore</span><br><span class="line">├── package.json   </span><br><span class="line">├── postcss.config.js                   postcss 配置文件 </span><br><span class="line">├── server.js                           本地服务（webpack-dev-server）</span><br><span class="line">├── webpack.config.js                   webpack 配置文件入口</span><br><span class="line">└── README.md</span><br></pre></td></tr></table></figure><h2 id="App-jsx-项目入口"><a href="#App-jsx-项目入口" class="headerlink" title="App.jsx 项目入口"></a>App.jsx 项目入口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;Provider&#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123;I18nextProvider&#125; from &apos;react-i18next&apos;;</span><br><span class="line">import &#123;syncHistoryWithStore&#125; from &apos;react-router-redux&apos;;</span><br><span class="line">import &#123;hashHistory&#125; from &apos;react-router&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;reducers&#125; from &apos;./components&apos;; //合并之后的 reducer</span><br><span class="line">import &#123;default as Store&#125; from &apos;./config/ConfigureStore&apos;;</span><br><span class="line">import appMiddleWares from &apos;./middleware/AppMiddleWare&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;i18n, locales&#125; from &apos;./i18n&apos;; //见下面 i18n 配置</span><br><span class="line">import routes from &apos;./routes&apos;;</span><br><span class="line">import &apos;./style/index.scss&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * App View</span><br><span class="line"> */</span><br><span class="line">class App extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillMount() &#123;</span><br><span class="line">        // 添加i18n语言包</span><br><span class="line">        for (let ns in locales[&apos;zh&apos;]) &#123;</span><br><span class="line">            if (locales[&apos;zh&apos;].hasOwnProperty(ns)) &#123;</span><br><span class="line">                i18n.addResourceBundle(&apos;zh&apos;, ns, locales[&apos;zh&apos;][ns]);</span><br><span class="line">                i18n.addResourceBundle(&apos;en&apos;, ns, locales[&apos;en&apos;][ns]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        let storeOptions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">        const defaultStates = &#123;&#125;;</span><br><span class="line">        const allReducers = Object.assign(&#123;&#125;, reducers);  //此处可以并入其它模块中的 reducer</span><br><span class="line">        const preMiddleWares = Object.assign(&#123;&#125;, appMiddleWares.preMiddleWares);  //此处可以并入其它模块中的 preMiddleWares</span><br><span class="line">        const postMiddleWares = Object.assign(&#123;&#125;, appMiddleWares.postMiddleWares);  //此处可以并入其它模块中的 postMiddleWares</span><br><span class="line"></span><br><span class="line">        storeOptions.initialStates = defaultStates;</span><br><span class="line">        storeOptions.reducers = allReducers;</span><br><span class="line">        storeOptions.preMiddleWares = preMiddleWares;</span><br><span class="line">        storeOptions.postMiddleWares = postMiddleWares;</span><br><span class="line"></span><br><span class="line">        const store = Store.configureStore(storeOptions);</span><br><span class="line">        const history = syncHistoryWithStore(hashHistory, store);</span><br><span class="line"></span><br><span class="line">        return (</span><br><span class="line">            &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">                &lt;I18nextProvider i18n=&#123;i18n&#125;&gt;</span><br><span class="line">                    &#123;routes(history)&#125;</span><br><span class="line">                &lt;/I18nextProvider&gt;</span><br><span class="line">            &lt;/Provider&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><h2 id="routes-路由配置"><a href="#routes-路由配置" class="headerlink" title="routes 路由配置"></a>routes 路由配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import React from &apos;react&apos;;</span><br><span class="line">import &#123;Router, Route&#125; from &apos;react-router&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;</span><br><span class="line">    HomeView,</span><br><span class="line">    BusinessDetail</span><br><span class="line">&#125; from &apos;../components&apos;;</span><br><span class="line"></span><br><span class="line">const routes = (history) =&gt; &#123;</span><br><span class="line">    return (</span><br><span class="line">        &lt;Router history=&#123;history&#125;&gt;</span><br><span class="line">            &lt;Route path=&quot;/&quot; component=&#123;HomeView&#125;/&gt;</span><br><span class="line">            &lt;Route path=&quot;/home&quot; component=&#123;HomeView&#125;/&gt;</span><br><span class="line">            &lt;Route path=&quot;/business/:id&quot; component=&#123;BusinessDetail&#125;/&gt;</span><br><span class="line">        &lt;/Router&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default routes;</span><br></pre></td></tr></table></figure><h2 id="ConfigureStore-js-构建-Store"><a href="#ConfigureStore-js-构建-Store" class="headerlink" title="ConfigureStore.js 构建 Store"></a>ConfigureStore.js 构建 Store</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">import &#123;applyMiddleware, compose, createStore, combineReducers&#125; from &apos;redux&apos;;</span><br><span class="line">import thunk from &apos;redux-thunk&apos;;</span><br><span class="line">import &#123;hashHistory&#125; from &apos;react-router&apos;;</span><br><span class="line">import &#123;routerReducer, routerMiddleware&#125; from &apos;react-router-redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123;componentMiddleWare, logger&#125; from &apos;../middleware&apos;;</span><br><span class="line">import appReducerCreator from &apos;./AppReducerCreator&apos;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * store 构建器</span><br><span class="line"> */</span><br><span class="line">export function configureStore(config) &#123;</span><br><span class="line">    // 合并之后的 preMiddleWares, postMiddleWares, reducers</span><br><span class="line">    let &#123;initialStates, preMiddleWares, postMiddleWares, reducers&#125; = config;</span><br><span class="line">    let allReducer = Object.assign(&#123;&#125;, reducers);</span><br><span class="line">    let appReducer = appReducerCreator(initialStates, allReducer);</span><br><span class="line">    const finalReducer = combineReducers(&#123;appReducer, routing: routerReducer&#125;);</span><br><span class="line">    const allMiddleWares = [</span><br><span class="line">        thunk,  // 异步 action</span><br><span class="line">        componentMiddleWare(preMiddleWares, postMiddleWares),    // 具体业务拦截器</span><br><span class="line">        routerMiddleware(hashHistory),   // router 注入到 store 中</span><br><span class="line">        logger</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    let enhancer = compose(</span><br><span class="line">        applyMiddleware(...allMiddleWares)</span><br><span class="line">    );</span><br><span class="line">    return createStore(finalReducer, &#123;&#125;, enhancer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const Store = &#123;</span><br><span class="line">    configureStore</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default Store;</span><br></pre></td></tr></table></figure><h2 id="AppReducerCreator-js"><a href="#AppReducerCreator-js" class="headerlink" title="AppReducerCreator.js"></a>AppReducerCreator.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 全局 Reducer 产生器</span><br><span class="line"> */</span><br><span class="line">function appReducerCreator(wrapInitialState, allReducerMap) &#123;</span><br><span class="line">    function appReducer(state = wrapInitialState, action) &#123;</span><br><span class="line">        if (action &amp;&amp; action.type &amp;&amp; allReducerMap[action.type]) &#123;</span><br><span class="line">            return allReducerMap[action.type](state, action);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return state;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return appReducer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default appReducerCreator;</span><br></pre></td></tr></table></figure><h2 id="ComponentMiddleWare-js-action-拦截器"><a href="#ComponentMiddleWare-js-action-拦截器" class="headerlink" title="ComponentMiddleWare.js action 拦截器"></a>ComponentMiddleWare.js action 拦截器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 操作拦截器中间件</span><br><span class="line"> */</span><br><span class="line">export function componentMiddleWare(preMiddleWares, postMiddleWares) &#123;</span><br><span class="line">    return function (&#123;getState&#125;) &#123;</span><br><span class="line">        return next =&gt; (action) =&gt; &#123;</span><br><span class="line">            // 前置拦截校验函数</span><br><span class="line">            let preInterceptFunc = preMiddleWares ? preMiddleWares[action.type] : null;</span><br><span class="line">            // 进行拦截校验操作</span><br><span class="line">            if (preInterceptFunc &amp;&amp; !preInterceptFunc.call(this, action, getState())) &#123;</span><br><span class="line">                console.error(&apos;Invalid action for preMiddleWares intercept!!&apos;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 调用 middleware 链中下一个 middleware 的 dispatch。</span><br><span class="line">            const returnValue = next(action);</span><br><span class="line"></span><br><span class="line">            // 后置拦截函数</span><br><span class="line">            let postInterceptFunc = postMiddleWares ? postMiddleWares[action.type] : null;</span><br><span class="line">            // 进行拦截校验操作</span><br><span class="line">            postInterceptFunc &amp;&amp; postInterceptFunc.call(this, action, getState());</span><br><span class="line">            </span><br><span class="line">            return returnValue;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LoggerMiddleWare-js"><a href="#LoggerMiddleWare-js" class="headerlink" title="LoggerMiddleWare.js"></a>LoggerMiddleWare.js</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 日志 MiddleWare</span><br><span class="line"> */</span><br><span class="line">export function logger(&#123;getState&#125;) &#123;</span><br><span class="line">    return next =&gt; (action) =&gt; &#123;</span><br><span class="line">        console.info(&apos;will dispatch&apos;, action);</span><br><span class="line">        // 调用 middleware 链中下一个 middleware 的 dispatch。</span><br><span class="line">        const returnValue = next(action);</span><br><span class="line">        console.info(&apos;after dispatch&apos;, getState());</span><br><span class="line">        return returnValue;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppMiddleWare-js-具体业务中间件，构建-store-时注入"><a href="#AppMiddleWare-js-具体业务中间件，构建-store-时注入" class="headerlink" title="AppMiddleWare.js 具体业务中间件，构建 store 时注入"></a>AppMiddleWare.js 具体业务中间件，构建 store 时注入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 前置拦截器</span><br><span class="line"> */</span><br><span class="line">let preMiddleWares = &#123;</span><br><span class="line">    TEST: (action, state) =&gt; &#123;</span><br><span class="line">        return true;// false 则本次 action 无效，数据不会被修改</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 后置拦截器</span><br><span class="line"> */</span><br><span class="line">let postMiddleWares = &#123;</span><br><span class="line">    TEST: (action, state) =&gt; &#123;</span><br><span class="line">        ··· // 此处修改之后不会立即在 ui 上体现出来，因为它在 render 之后执行。且因为参数 state 为引用，所以是直接修改，可做一些提示性的操作</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">let appMiddleWares = &#123;</span><br><span class="line">    preMiddleWares,</span><br><span class="line">    postMiddleWares</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default appMiddleWares;</span><br></pre></td></tr></table></figure><h2 id="connectToStore-js-组件接入-store-decorator"><a href="#connectToStore-js-组件接入-store-decorator" class="headerlink" title="connectToStore.js 组件接入 store decorator"></a>connectToStore.js 组件接入 store decorator</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">import &#123;bindActionCreators&#125; from &apos;redux&apos;;</span><br><span class="line">import &#123;connect&#125; from &apos;react-redux&apos;;</span><br><span class="line">import appConfig from &apos;../config&apos;;</span><br><span class="line">// appConfig.router 即下面的 AppActionRouter.js</span><br><span class="line">const AppActionRouter = appConfig.router;</span><br><span class="line"></span><br><span class="line">function mapStateToProps(state) &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        store: state.appReducer || &#123;&#125;,</span><br><span class="line">        routerStore: (state.routing &amp;&amp; state.routing.locationBeforeTransitions) || &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function mapDispatchToProps(dispatch) &#123;</span><br><span class="line">    return bindActionCreators(AppActionRouter, dispatch);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default function connectToStore(component) &#123;</span><br><span class="line">    return connect(mapStateToProps, mapDispatchToProps)(component);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="AppActionRouter-js-分发-action"><a href="#AppActionRouter-js-分发-action" class="headerlink" title="AppActionRouter.js 分发 action"></a>AppActionRouter.js 分发 action</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import &#123;actions&#125; from &apos;../components&apos;;</span><br><span class="line">// action 为合并之后的所有的 action</span><br><span class="line">/**</span><br><span class="line"> * app action Router</span><br><span class="line"> */</span><br><span class="line">function onClickWithoutCheck(action) &#123;</span><br><span class="line">    return action;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 如果外部注入 action，那么直接使用 action 的操作即可。</span><br><span class="line"> * 如果外部没有注入 action， 使用 dispatch 操作。</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">export function onClickAction(action, props) &#123;</span><br><span class="line">    return function (dispatch, getState) &#123;</span><br><span class="line">        if (action.type &amp;&amp; actions.hasOwnProperty(action.type)) &#123;</span><br><span class="line">            actions[action.type].call(this, action, dispatch, props);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            dispatch(onClickWithoutCheck(action));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="acion-示例"><a href="#acion-示例" class="headerlink" title="acion 示例"></a>acion 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">let homeActions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">homeActions[&apos;TEST&apos;] = function (action, dispatch, state) &#123;</span><br><span class="line">    dispatch(action);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default homeActions;</span><br></pre></td></tr></table></figure><h2 id="reducer-示例"><a href="#reducer-示例" class="headerlink" title="reducer 示例"></a>reducer 示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import Immutable from &apos;immutable&apos;;</span><br><span class="line"></span><br><span class="line">let homeReducers = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">homeReducers[&apos;TEST&apos;] = function (state, action) &#123;</span><br><span class="line">    let foo = Immutable.fromJS(state);</span><br><span class="line">    let newArr = foo.mergeDeep(Immutable.fromJS(action.content));</span><br><span class="line">    return newArr.toJS();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default homeReducers;</span><br></pre></td></tr></table></figure><h2 id="i18n-配置"><a href="#i18n-配置" class="headerlink" title="i18n 配置"></a>i18n 配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import i18next from &apos;i18next&apos;;</span><br><span class="line">import LanguageDetector from &apos;i18next-browser-languagedetector&apos;;</span><br><span class="line"></span><br><span class="line">const i18n = i18next</span><br><span class="line">    .use(LanguageDetector)</span><br><span class="line">    .init(&#123;</span><br><span class="line">        fallbackLng: &apos;zh&apos;,</span><br><span class="line"></span><br><span class="line">        // have a common namespace used around the full app</span><br><span class="line">        ns: [&apos;common&apos;],</span><br><span class="line">        defaultNS: &apos;common&apos;,</span><br><span class="line"></span><br><span class="line">        debug: false,</span><br><span class="line"></span><br><span class="line">        interpolation: &#123;</span><br><span class="line">            escapeValue: false // not needed for react!!</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, (err) =&gt; &#123;</span><br><span class="line">        if (err) &#123;</span><br><span class="line">            console.error(&apos;i18next&apos;, err);</span><br><span class="line">        &#125;</span><br><span class="line">        // console.log(&apos;i18next initialized and ready to go!&apos;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">export default i18n;</span><br></pre></td></tr></table></figure><h3 id="i18n-英文配置"><a href="#i18n-英文配置" class="headerlink" title="i18n 英文配置"></a>i18n 英文配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const home = &#123;</span><br><span class="line">    title: &apos;Home Page&apos;</span><br><span class="line">&#125;;</span><br><span class="line">export default &#123;home&#125;;</span><br></pre></td></tr></table></figure><h3 id="i18n-中文配置"><a href="#i18n-中文配置" class="headerlink" title="i18n 中文配置"></a>i18n 中文配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const home = &#123;</span><br><span class="line">    title: &apos;首页&apos;</span><br><span class="line">&#125;;</span><br><span class="line">export default &#123;home&#125;;</span><br></pre></td></tr></table></figure><h3 id="i18n-中英文统一导出"><a href="#i18n-中英文统一导出" class="headerlink" title="i18n 中英文统一导出"></a>i18n 中英文统一导出</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import zh from &apos;./zh&apos;;</span><br><span class="line">import en from &apos;./en&apos;;</span><br><span class="line"></span><br><span class="line">const locales = &#123;</span><br><span class="line">    zh: zh,</span><br><span class="line">    en: en</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default locales;</span><br></pre></td></tr></table></figure><h2 id="组件实例"><a href="#组件实例" class="headerlink" title="组件实例"></a>组件实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">import React, &#123;Component&#125; from &apos;react&apos;;</span><br><span class="line">import &#123;translate&#125; from &apos;react-i18next&apos;;</span><br><span class="line">import i18n from &apos;../i18n&apos;;</span><br><span class="line"></span><br><span class="line">@translate([&apos;home&apos;], &#123;wait: true&#125;)  // 使用多语言</span><br><span class="line">@connectToStore                     // 组件介入 store</span><br><span class="line">class Test extends Component &#123;</span><br><span class="line">    constructor(props) &#123;</span><br><span class="line">        super(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 路由跳转</span><br><span class="line">    transformRouter = () =&gt; &#123;</span><br><span class="line">        const &#123;onClickAction&#125; = this.props;</span><br><span class="line">        // 见下面路由 acion</span><br><span class="line">        let gotoAction = &#123;</span><br><span class="line">            type: &apos;GOTO&apos;,</span><br><span class="line">            content: &apos;/home&apos;</span><br><span class="line">        &#125;;</span><br><span class="line">        onClickAction(gotoAction, this.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 发送 action</span><br><span class="line">    changeStore = () =&gt; &#123;</span><br><span class="line">        const &#123;onClickAction, store&#125; = this.props;</span><br><span class="line">        let action = &#123;</span><br><span class="line">            type: &apos;TEST&apos;,</span><br><span class="line">            content: &#123;data: &apos;test&apos;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        onClickAction(action, this.props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 切换语言</span><br><span class="line">    setLanguage = () =&gt; &#123;</span><br><span class="line">        i18n.changeLanguage(&apos;zh&apos;); // or en</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        const &#123;t, store&#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;div className=&apos;app-home&apos;&gt;</span><br><span class="line">                &lt;div className=&apos;app-header&apos;&gt;</span><br><span class="line">                    &lt;span&gt;&#123;t(&apos;title&apos;)&#125;&lt;/span&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    content</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">                &lt;Footer/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Test;</span><br></pre></td></tr></table></figure><h2 id="路由-acion，不需要-路由-recuder"><a href="#路由-acion，不需要-路由-recuder" class="headerlink" title="路由 acion，不需要 路由 recuder"></a>路由 acion，不需要 路由 recuder</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import &#123;push&#125; from &apos;react-router-redux&apos;;</span><br><span class="line"></span><br><span class="line">let routerActions = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">routerActions[&apos;GOTO&apos;] = function (action, dispatch, state) &#123;</span><br><span class="line">    dispatch(push(action[&apos;content&apos;]));</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">export default routerActions;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;搭建一个交互比较多的 &lt;strong&gt;react 前端项目框架&lt;/strong&gt;，数据可预测，可路由跳转，可国际化，数据操作可控制&lt;/p&gt;

      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
  <entry>
    <title>一些容易被忽略的 javascript 知识点</title>
    <link href="https://www.liangxinwei.cn/2017/05/10/%E4%B8%80%E4%BA%9B%E5%AE%B9%E6%98%93%E8%A2%AB%E5%BF%BD%E7%95%A5%E7%9A%84-javascript-%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    <id>https://www.liangxinwei.cn/2017/05/10/一些容易被忽略的-javascript-知识点/</id>
    <published>2017-05-10T10:55:37.000Z</published>
    <updated>2020-01-02T00:46:46.988Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ReferenceError和TypeError"><a href="#ReferenceError和TypeError" class="headerlink" title="ReferenceError和TypeError"></a>ReferenceError和TypeError</h2><p>如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量，引擎就会抛出 ReferenceError<br>异常。如果 RHS 查询找到了一个变量，但是你尝试对这个变量的值进行不合理的操作，<br>比如试图对一个非函数类型的值进行函数调用，或着引用 null 或 undefined 类型的值中的<br>属性，那么引擎会抛出另外一种类型的异常，叫作 TypeError 。ReferenceError 同作用域判别失败相关，而 TypeError 则代表作用域判别成功了，但是对结果的操作是非法或不合理的。</p><h2 id="立即执行函数表达式"><a href="#立即执行函数表达式" class="headerlink" title="立即执行函数表达式"></a>立即执行函数表达式</h2><p>由于函数被包含在一对 ( ) 括号内部，因此成为了一个表达式，通过在末尾加上另外一个()可以立即执行这个函数，比如 (function foo(){ .. })() 。第一个()将函数变成表达式，第二个()执行了这个函数。</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 关键字可以将变量绑定到所在的任意作用域中（通常是 { .. } 内部）。换句话说， let为其声明的变量隐式地了所在的块作用域。使用 let 进行的声明不会在块作用域中进行提升。声明的代码被运行之前，声明并不“存在” 。for 循环头部的let不仅将i绑定到了for循环的块中，事实上它将其重新绑定到了循环的每一个迭代中，确保使用上一个循环迭代结束时的值重新进行赋值。</p><h2 id="提升"><a href="#提升" class="headerlink" title="提升"></a>提升</h2><p>考虑以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );<span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>考虑另外一段代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log( a );<span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>过程： 当你看到 var a = 2; 时，JavaScript 实际上会将其看成两个声明： var a; 和 a = 2; 。第一个定义声明是在编译阶段进行的。第二个赋值声明会被留在原地等待执行阶段。<br>第一个代码片段会以如下形式进行处理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br></pre></td></tr></table></figure><p>其中第一部分是编译，而第二部分是执行。<br>第二个代码片段实际是按照以下流程处理的：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log( a );</span><br><span class="line">a = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>这个过程就叫作提升。但是函数表达式却不会被提升。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 不是 ReferenceError, 而是 TypeError!</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这段程序中的变量标识符 foo() 被提升并分配给所在作用域（在这里是全局作用域） ，因此foo()不会导致 ReferenceError 。但是 foo 此时并没有赋值（如果它是一个函数声明而不是函数表达式，那么就会赋值） 。 foo() 由于对 undefined 值进行函数调用而导致非法操作，因此抛出 TypeError 异常。<br>同时也要记住，即使是具名的函数表达式，名称标识符在赋值之前也无法在所在作用域中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// TypeError</span></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个代码片段经过提升后，实际上会被理解为以下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line">foo(); <span class="comment">// TypeError</span></span><br><span class="line">bar(); <span class="comment">// ReferenceError</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> bar = ...self...</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数声明和变量声明都会被提升。但是是函数会首先被提升，然后才是变量。<br>考虑以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>会输出 1 而不是 2 ！这个代码片段会被引擎理解为如下形式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="number">1</span> );</span><br><span class="line">&#125;</span><br><span class="line">foo(); <span class="comment">// 1</span></span><br><span class="line">foo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="number">2</span> );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>注意， var foo 尽管出现在 function foo()… 的声明之前，但它是重复的声明（因此被忽<br>略了） ，因为函数声明会被提升到普通变量之前。尽管重复的 var 声明会被忽略掉，但出现在后面的函数声明还是可以覆盖前面的。</p><h2 id="作用域闭包"><a href="#作用域闭包" class="headerlink" title="作用域闭包"></a>作用域闭包</h2><p>定义：当函数可以记住并访问所在的词法作用域时，就产生了闭包，即使函数是在当前词法作用<br>域之外执行。<br>下面这段代码清晰地展示了闭包：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log( a );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baz = foo();</span><br><span class="line">baz(); <span class="comment">// 2 —— 这就是闭包的效果。</span></span><br></pre></td></tr></table></figure><p>bar() 显然可以被正常执行，但是它在自己定义的词法作用域以外的地方执行。看上去 foo() 的内容不会再被使用，所以很自然地会考虑对其进行回收。而闭包的“神奇”之处正是可以阻止这件事情的发生。事实上内部作用域依然存在，因此没有被回收。谁在使用这个内部作用域？原来是 bar() 本身在使用。拜 bar() 所声明的位置所赐，它拥有涵盖 foo() 内部作用域的闭包，使得该作用域能够一直存活，以供 bar() 在之后任何时间进行引用。bar() 依然持有对该作用域的引用，而这个引用就叫作闭包。</p><h2 id="typeof-null-“object”"><a href="#typeof-null-“object”" class="headerlink" title="typeof null = “object”"></a>typeof null = “object”</h2><p>不同的对象在底层都表示为二进制，在 JavaScript 中二进制前三位都为 0 的话会被判断为  object 类型， null 的二进制表示是全 0， 自然前三位也是 0， 所以执行 typeof 时会返回“ object ” 。</p><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>使用 delete 运算符可以将单元从数组中删除，单元删除后，数组的 length 属性并不会发生变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ ];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//  此处没有设置 a[1] 单元</span></span><br><span class="line">a[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">a[<span class="number">1</span>]; <span class="comment">// undefined</span></span><br><span class="line">a.length; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面的代码可以正常运行，但其中的 “ 空白单元 ” （ empty slot ）可能会导致出人意料的结果。另外：如果字符串键值能够被强制类型转换为十进制数字的话，它就会被当作数字索引来处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ ];</span><br><span class="line">a[<span class="string">"13"</span>] = <span class="number">42</span>;</span><br><span class="line">a.length; <span class="comment">// 14</span></span><br></pre></td></tr></table></figure><h2 id="Number"><a href="#Number" class="headerlink" title="Number()"></a>Number()</h2><p>对于 . 运算符需要给予特别注意，因为它是一个有效的数字字符，会被优先识别为数字常量的一部分，然后才是对象属性访问运算符。<br>true 转换为 1 ， false 转换为 0 。 undefined 转换为 NaN ， null 转换为 0。<br>为了将值转换为相应的基本类型值，抽象操作 ToPrimitive 会首先（通过内部操作 DefaultValue）检查该值是否有 valueOf() 方法。如果有并且返回基本类型值，就使用该值进行强制类型转换。如果没有就使用 toString() 的返回值（如果存在）来进行强制类型转换。如果 valueOf() 和 toString() 均不返回基本类型值，会产生 TypeError 错误。<br>使用 Object.create(null) 创建的对象 [[Prototype]] 属性为 null ，并且没有 valueOf() 和 toString() 方法，因此无法进行强制类型转换。看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  无效语法：因为 . 被视为常量 42. 的一部分，所以没有. 属性访问运算符来调用 tofixed 方法</span></span><br><span class="line"><span class="number">42.</span>toFixed( <span class="number">3</span> );    <span class="comment">// SyntaxError</span></span><br><span class="line"><span class="comment">//  下面的语法都有效：</span></span><br><span class="line">(<span class="number">42</span>).toFixed( <span class="number">3</span> );  <span class="comment">// "42.000"</span></span><br><span class="line"><span class="number">0.42</span>.toFixed( <span class="number">3</span> );  <span class="comment">// "0.420"</span></span><br><span class="line"><span class="number">42.</span>.toFixed( <span class="number">3</span> );   <span class="comment">// "42.000"</span></span><br><span class="line"><span class="number">42</span> .toFixed(<span class="number">3</span>);     <span class="comment">// "42.000"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line">valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"42"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"42"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">4</span>,<span class="number">2</span>];</span><br><span class="line">c.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.join( <span class="string">""</span> ); <span class="comment">// "42"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">Number</span>( a ); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">Number</span>( b ); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">Number</span>( c ); <span class="comment">// 42</span></span><br><span class="line"><span class="built_in">Number</span>( <span class="string">""</span> ); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>( [] ); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>( [ <span class="string">"abc"</span> ] ); <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><ol><li>假值 undefined,null,false,+0,-0,NaN,””。<strong>假值列表以外的值都是真值</strong></li><li>假值对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Boolean</span>( <span class="literal">false</span> );</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Number</span>( <span class="number">0</span> );</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">String</span>( <span class="string">""</span> );</span><br><span class="line"><span class="keyword">var</span> d = <span class="built_in">Boolean</span>( a &amp;&amp; b &amp;&amp; c );</span><br><span class="line">d; <span class="comment">// true 说明 a 、 b 、 c 都为 true</span></span><br></pre></td></tr></table></figure></li></ol><p>虽然 JavaScript  代码中会出现假值对象，但它实际上并不属于 JavaScript  语言的范畴。<br>浏览器在某些特定情况下，在常规 JavaScript 语法基础上自己创建了一些外来值，这些就是 “ 假值对象 ” 。假值对象看起来和普通对象并无二致（都有属性，等等），但将它们强制类型转换为布尔值时结果为 false 。最常见的例子是 document.all ，它是一个类数组对象，包含了页面上的所有元素，由 DOM （而不是 JavaScript  引擎）提供给 JavaScript  程序使用。它以前曾是一个真正意义上的对象，布尔强制类型转换结果为 true ，不过现在它是一个假值对象。document.all 并不是一个标准用法，早就被废止了。</p><h2 id="奇特的-运算符"><a href="#奇特的-运算符" class="headerlink" title="奇特的 ~ 运算符"></a>奇特的 ~ 运算符</h2><ol><li><p>类型转换<br>它首先将值强制类型转换为 32  位数字，然后执行字位操作 “ 非 ” （对每一个字位进行反转）。这与 ! 很相像，不仅将值强制类型转换为布尔值 &lt; ，还对其做字位反转。对 ~ 还可以有另外一种诠释，源自早期的计算机科学和离散数学： ~ 返回 2  的补码。~x 大致等同于 -(x+1) 。<br>~ 和 indexOf() 一起可以将结果强制类型转换（实际上仅仅是转换）为真 /  假值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"Hello World"</span>;</span><br><span class="line">~a.indexOf( <span class="string">"lo"</span> ); <span class="comment">// -4 &lt;--  真值 !</span></span><br><span class="line"><span class="keyword">if</span> (~a.indexOf( <span class="string">"lo"</span> )) &#123; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//  找到匹配！</span></span><br><span class="line">&#125;</span><br><span class="line">~a.indexOf( <span class="string">"ol"</span> ); <span class="comment">// 0 &lt;--  假值 !</span></span><br><span class="line">!~a.indexOf( <span class="string">"ol"</span> ); <span class="comment">// true</span></span><br><span class="line"><span class="keyword">if</span> (!~a.indexOf( <span class="string">"ol"</span> )) &#123; <span class="comment">// true</span></span><br><span class="line"><span class="comment">//  没有找到匹配！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果 indexOf(..) 返回 -1 ， ~ 将其转换为假值 0 ，其他情况一律转换为真值。</p></li><li><p>字位截除<br>使用 <del>~ 来截除数字值的小数部分，以为这和 Math.floor(..) 的效果一样，实际上并非如此。</del> 中的第一个 ~ 执行 ToInt32 并反转字位，然后第二个 ~ 再进行一次字位反转，即将所有字位反转回原值，最后得到的仍然是 ToInt32 的结果。~~ 和 !! 很相似，它只适用于 32 位数字，更重要的是它对负数的处理与 Math.floor(..) 不同。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.floor( <span class="number">-49.6</span> ); <span class="comment">// -50</span></span><br><span class="line">~~<span class="number">-49.6</span>; <span class="comment">// -49</span></span><br></pre></td></tr></table></figure><p><del>x 能将值截除为一个 32  位整数， x | 0 也可以，而且看起来还更简洁。出于对运算符优先级的考虑，我们可能更倾向于使用 ~</del>x 。</p><h2 id="和"><a href="#和" class="headerlink" title="== 和 ==="></a>== 和 ===</h2><p>常见的误区是：“ == 检查值是否相等， === 检查值和类型是否相等 ” 。听起来蛮有道理，然而还不够准确。<br>正确的解释是：“ == 允许在相等比较中进行强制类型转换，而 === 不允许。”<br>两种解释的区别：<br>根据第一种解释（不准确的版本）， === 似乎比 == 做的事情更多，因为它还要检查值的类型。第二种解释中 == 的工作量更大一些，因为如果值的类型不同还需要进行强制类型转换。有人觉得 == 会比 === 慢，实际上虽然强制类型转换确实要多花点时间，但仅仅是微秒级（百万分之一秒）的差别而已。如果进行比较的两个值类型相同，则 == 和 === 使用相同的算法，所以除了 JavaScript  引擎实现上的细微差别之外，它们之间并没有什么不同。<br>== 和 === 都会检查操作数的类型。区别在于<strong>操作数类型不同时它们的处理方式不同</strong>。</p></li></ol><h2 id="抽象关系比较-a-lt-b"><a href="#抽象关系比较-a-lt-b" class="headerlink" title="抽象关系比较 a &lt; b"></a>抽象关系比较 a &lt; b</h2><p>分为两个部分：比较双方都是字符串（后半部分）和其他情况（前半部分）。比较双方首先调用 ToPrimitive ，如果结果出现非字符串，就根据 ToNumber 规则将双方强制类型转换为数字来进行比较。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="number">42</span> ];</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="string">"43"</span> ];</span><br><span class="line">a &lt; b; <span class="comment">// true</span></span><br><span class="line">b &lt; a; <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p> -0 和 NaN 的相关规则在这里也适用。如果比较双方都是字符串，则按字母顺序来进行比较</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [ <span class="string">"42"</span> ];</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="string">"043"</span> ];</span><br><span class="line">a &lt; b; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = [ <span class="number">4</span>, <span class="number">2</span> ];</span><br><span class="line"><span class="keyword">var</span> b = [ <span class="number">0</span>, <span class="number">4</span>, <span class="number">3</span> ];</span><br><span class="line">a &lt; b; <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">b</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">43</span> &#125;;</span><br><span class="line">a &lt; b; <span class="comment">// ??</span></span><br><span class="line"><span class="comment">// 结果还是 false ，因为 a 是 [object Object] ，b 也是 [object Object]，所以按照字母顺序 a &lt; b 并不成立。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的例子就有些奇怪了:</span></span><br><span class="line"><span class="keyword">var</span> a = &#123; <span class="attr">b</span>: <span class="number">42</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">b</span>: <span class="number">43</span> &#125;;</span><br><span class="line">a &lt; b; <span class="comment">// false</span></span><br><span class="line">a == b; <span class="comment">// false</span></span><br><span class="line">a &gt; b; <span class="comment">// false</span></span><br><span class="line">a &lt;= b; <span class="comment">// true</span></span><br><span class="line">a &gt;= b; <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>因为根据规范 a &lt;= b 被处理为 b &lt; a ，然后将结果反转。因为 b &lt; a 的结果是 false ，所以 a &lt;= b 的结果是 true。实际上 JavaScript  中 &lt;= 是 “ 不大于 ” 的意思（即 !(a &gt; b) ，处理为 !(b &lt; a) ）。同理 a &gt;= b 处理为 b &lt;= a 。</p><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString"></a>toString</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[] + &#123;&#125;; <span class="comment">// "[object Object]"</span></span><br><span class="line">&#123;&#125; + []; <span class="comment">// 0</span></span><br><span class="line">[<span class="literal">null</span>].toString() <span class="comment">// ""</span></span><br><span class="line">[<span class="literal">undefined</span>].toString() <span class="comment">// ""</span></span><br><span class="line">[<span class="literal">null</span>, <span class="literal">undefined</span>].toString() <span class="comment">// ","</span></span><br></pre></td></tr></table></figure><p>第一行代码中， {} 出现在 + 运算符表达式中，因此它被当作一个值（空对象）来处理。 [] 会被强制类型转换为 “” ，而 {} 会被强制类型转换为 “[object Object]” 。<br>但在第二行代码中， {} 被当作一个独立的空代码块（不执行任何操作）。代码块结尾不需要分号，所以这里不存在语法上的问题。最后 + [] 将 [] 显式强制类型转换为 0 。</p><h2 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实例化一个Person</span></span><br><span class="line"><span class="keyword">var</span> alice = <span class="keyword">new</span> Person(<span class="string">'alice'</span>);</span><br><span class="line"><span class="comment">// 不要这么做!</span></span><br><span class="line">Person(<span class="string">'bob'</span>); <span class="comment">//=&gt; undefined</span></span><br></pre></td></tr></table></figure><p>这个函数只会返回 undefined，并且执行上下文是 window(全局)对象，你无意间创建了一个全局变量 name。调用构造函数时不要丢掉 new 关键字。当使用 new 关键字来调用构造函数时，执行上下文从全局对象(window)变成一个空的 上下文，这个上下文代表了新生成的实例。因此，this 关键字指向当前创建的实例。默认情况下，如果你的构造函数中没有返回任何内容，就会返回 this——当前的上下文。 要不然就返回任意非原始类型的值。</p><h2 id="bind-实现"><a href="#bind-实现" class="headerlink" title="bind 实现"></a>bind 实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="built_in">Function</span>.prototype.bind || <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> slice = [].slice,</span><br><span class="line">args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>), self = <span class="keyword">this</span>,</span><br><span class="line">nop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">bound = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> self.apply( <span class="keyword">this</span> <span class="keyword">instanceof</span> nop ? <span class="keyword">this</span> : (obj || &#123;&#125;), args.concat(slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">&#125;;</span><br><span class="line">nop.prototype = self.prototype; bound.prototype = <span class="keyword">new</span> nop();</span><br><span class="line"><span class="keyword">return</span> bound; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Object-create-实现"><a href="#Object-create-实现" class="headerlink" title="Object.create() 实现"></a>Object.create() 实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.create = <span class="built_in">Object</span>.create || <span class="function"><span class="keyword">function</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">F.prototype = o;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ReferenceError和TypeError&quot;&gt;&lt;a href=&quot;#ReferenceError和TypeError&quot; class=&quot;headerlink&quot; title=&quot;ReferenceError和TypeError&quot;&gt;&lt;/a&gt;ReferenceError
      
    
    </summary>
    
      <category term="前端" scheme="https://www.liangxinwei.cn/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
  </entry>
  
</feed>
